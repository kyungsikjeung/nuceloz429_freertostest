
r002.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006508  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  080066b8  080066b8  000076b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067f4  080067f4  0000806c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080067f4  080067f4  000077f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067fc  080067fc  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067fc  080067fc  000077fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006800  08006800  00007800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006804  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000806c  2**0
                  CONTENTS
 10 .bss          000048cc  2000006c  2000006c  0000806c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004938  20004938  0000806c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018a8b  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003505  00000000  00000000  00020b27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001658  00000000  00000000  00024030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001159  00000000  00000000  00025688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027830  00000000  00000000  000267e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000182f5  00000000  00000000  0004e011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ecbe9  00000000  00000000  00066306  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00152eef  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006750  00000000  00000000  00152f34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000055  00000000  00000000  00159684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080066a0 	.word	0x080066a0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	080066a0 	.word	0x080066a0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	60f8      	str	r0, [r7, #12]
 80005d4:	60b9      	str	r1, [r7, #8]
 80005d6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	4a07      	ldr	r2, [pc, #28]	@ (80005f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	4a06      	ldr	r2, [pc, #24]	@ (80005fc <vApplicationGetIdleTaskMemory+0x30>)
 80005e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2280      	movs	r2, #128	@ 0x80
 80005e8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ea:	bf00      	nop
 80005ec:	3714      	adds	r7, #20
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	20000088 	.word	0x20000088
 80005fc:	200000dc 	.word	0x200000dc

08000600 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000608:	1d39      	adds	r1, r7, #4
 800060a:	f04f 33ff 	mov.w	r3, #4294967295
 800060e:	2201      	movs	r2, #1
 8000610:	4803      	ldr	r0, [pc, #12]	@ (8000620 <__io_putchar+0x20>)
 8000612:	f002 fce3 	bl	8002fdc <HAL_UART_Transmit>
  return ch;
 8000616:	687b      	ldr	r3, [r7, #4]
}
 8000618:	4618      	mov	r0, r3
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000504 	.word	0x20000504

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b5b0      	push	{r4, r5, r7, lr}
 8000626:	b096      	sub	sp, #88	@ 0x58
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062a:	f000 fdb5 	bl	8001198 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062e:	f000 f855 	bl	80006dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000632:	f000 f963 	bl	80008fc <MX_GPIO_Init>
  MX_ETH_Init();
 8000636:	f000 f8bb 	bl	80007b0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800063a:	f000 f907 	bl	800084c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800063e:	f000 f92f 	bl	80008a0 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  printf("hello world\r\n");
 8000642:	481f      	ldr	r0, [pc, #124]	@ (80006c0 <main+0x9c>)
 8000644:	f005 f920 	bl	8005888 <puts>

  /* Create the thread(s) */
  /* definition and creation of defaultTask */

  /* definition and creation of task01 */
  osThreadDef(task01, Task01_init, osPriorityNormal, 0, 128);
 8000648:	4b1e      	ldr	r3, [pc, #120]	@ (80006c4 <main+0xa0>)
 800064a:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800064e:	461d      	mov	r5, r3
 8000650:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000652:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000654:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000658:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task01Handle = osThreadCreate(osThread(task01), NULL);
 800065c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f003 fbad 	bl	8003dc2 <osThreadCreate>
 8000668:	4603      	mov	r3, r0
 800066a:	4a17      	ldr	r2, [pc, #92]	@ (80006c8 <main+0xa4>)
 800066c:	6013      	str	r3, [r2, #0]

  osThreadDef(task02, Task02_init, osPriorityNormal, 0, 128);
 800066e:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <main+0xa8>)
 8000670:	f107 0420 	add.w	r4, r7, #32
 8000674:	461d      	mov	r5, r3
 8000676:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000678:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800067a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800067e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task02Handle = osThreadCreate(osThread(task02), NULL);
 8000682:	f107 0320 	add.w	r3, r7, #32
 8000686:	2100      	movs	r1, #0
 8000688:	4618      	mov	r0, r3
 800068a:	f003 fb9a 	bl	8003dc2 <osThreadCreate>
 800068e:	4603      	mov	r3, r0
 8000690:	4a0f      	ldr	r2, [pc, #60]	@ (80006d0 <main+0xac>)
 8000692:	6013      	str	r3, [r2, #0]

  osThreadDef(task03, Task03_init, osPriorityNormal, 0, 128);
 8000694:	4b0f      	ldr	r3, [pc, #60]	@ (80006d4 <main+0xb0>)
 8000696:	1d3c      	adds	r4, r7, #4
 8000698:	461d      	mov	r5, r3
 800069a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800069c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800069e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task03Handle = osThreadCreate(osThread(task03), NULL);
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f003 fb89 	bl	8003dc2 <osThreadCreate>
 80006b0:	4603      	mov	r3, r0
 80006b2:	4a09      	ldr	r2, [pc, #36]	@ (80006d8 <main+0xb4>)
 80006b4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006b6:	f003 fb7d 	bl	8003db4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ba:	bf00      	nop
 80006bc:	e7fd      	b.n	80006ba <main+0x96>
 80006be:	bf00      	nop
 80006c0:	080066b8 	.word	0x080066b8
 80006c4:	080066d0 	.word	0x080066d0
 80006c8:	20000a30 	.word	0x20000a30
 80006cc:	080066f4 	.word	0x080066f4
 80006d0:	20000a34 	.word	0x20000a34
 80006d4:	08006718 	.word	0x08006718
 80006d8:	20000a38 	.word	0x20000a38

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b094      	sub	sp, #80	@ 0x50
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 0320 	add.w	r3, r7, #32
 80006e6:	2230      	movs	r2, #48	@ 0x30
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f005 f9e2 	bl	8005ab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000700:	2300      	movs	r3, #0
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	4b28      	ldr	r3, [pc, #160]	@ (80007a8 <SystemClock_Config+0xcc>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000708:	4a27      	ldr	r2, [pc, #156]	@ (80007a8 <SystemClock_Config+0xcc>)
 800070a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800070e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000710:	4b25      	ldr	r3, [pc, #148]	@ (80007a8 <SystemClock_Config+0xcc>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000714:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800071c:	2300      	movs	r3, #0
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	4b22      	ldr	r3, [pc, #136]	@ (80007ac <SystemClock_Config+0xd0>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a21      	ldr	r2, [pc, #132]	@ (80007ac <SystemClock_Config+0xd0>)
 8000726:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800072a:	6013      	str	r3, [r2, #0]
 800072c:	4b1f      	ldr	r3, [pc, #124]	@ (80007ac <SystemClock_Config+0xd0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000738:	2301      	movs	r3, #1
 800073a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800073c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000740:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000742:	2302      	movs	r3, #2
 8000744:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000746:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800074a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800074c:	2304      	movs	r3, #4
 800074e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000750:	23a8      	movs	r3, #168	@ 0xa8
 8000752:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000754:	2302      	movs	r3, #2
 8000756:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000758:	2307      	movs	r3, #7
 800075a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075c:	f107 0320 	add.w	r3, r7, #32
 8000760:	4618      	mov	r0, r3
 8000762:	f001 fc85 	bl	8002070 <HAL_RCC_OscConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800076c:	f000 fa00 	bl	8000b70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000770:	230f      	movs	r3, #15
 8000772:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000774:	2302      	movs	r3, #2
 8000776:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800077c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000780:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000782:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000786:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	2105      	movs	r1, #5
 800078e:	4618      	mov	r0, r3
 8000790:	f001 fee6 	bl	8002560 <HAL_RCC_ClockConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800079a:	f000 f9e9 	bl	8000b70 <Error_Handler>
  }
}
 800079e:	bf00      	nop
 80007a0:	3750      	adds	r7, #80	@ 0x50
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40007000 	.word	0x40007000

080007b0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000834 <MX_ETH_Init+0x84>)
 80007b6:	4a20      	ldr	r2, [pc, #128]	@ (8000838 <MX_ETH_Init+0x88>)
 80007b8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007ba:	4b20      	ldr	r3, [pc, #128]	@ (800083c <MX_ETH_Init+0x8c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007c0:	4b1e      	ldr	r3, [pc, #120]	@ (800083c <MX_ETH_Init+0x8c>)
 80007c2:	2280      	movs	r2, #128	@ 0x80
 80007c4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007c6:	4b1d      	ldr	r3, [pc, #116]	@ (800083c <MX_ETH_Init+0x8c>)
 80007c8:	22e1      	movs	r2, #225	@ 0xe1
 80007ca:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007cc:	4b1b      	ldr	r3, [pc, #108]	@ (800083c <MX_ETH_Init+0x8c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007d2:	4b1a      	ldr	r3, [pc, #104]	@ (800083c <MX_ETH_Init+0x8c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007d8:	4b18      	ldr	r3, [pc, #96]	@ (800083c <MX_ETH_Init+0x8c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007de:	4b15      	ldr	r3, [pc, #84]	@ (8000834 <MX_ETH_Init+0x84>)
 80007e0:	4a16      	ldr	r2, [pc, #88]	@ (800083c <MX_ETH_Init+0x8c>)
 80007e2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007e4:	4b13      	ldr	r3, [pc, #76]	@ (8000834 <MX_ETH_Init+0x84>)
 80007e6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80007ea:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007ec:	4b11      	ldr	r3, [pc, #68]	@ (8000834 <MX_ETH_Init+0x84>)
 80007ee:	4a14      	ldr	r2, [pc, #80]	@ (8000840 <MX_ETH_Init+0x90>)
 80007f0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007f2:	4b10      	ldr	r3, [pc, #64]	@ (8000834 <MX_ETH_Init+0x84>)
 80007f4:	4a13      	ldr	r2, [pc, #76]	@ (8000844 <MX_ETH_Init+0x94>)
 80007f6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000834 <MX_ETH_Init+0x84>)
 80007fa:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80007fe:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000800:	480c      	ldr	r0, [pc, #48]	@ (8000834 <MX_ETH_Init+0x84>)
 8000802:	f000 fe11 	bl	8001428 <HAL_ETH_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800080c:	f000 f9b0 	bl	8000b70 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000810:	2238      	movs	r2, #56	@ 0x38
 8000812:	2100      	movs	r1, #0
 8000814:	480c      	ldr	r0, [pc, #48]	@ (8000848 <MX_ETH_Init+0x98>)
 8000816:	f005 f94d 	bl	8005ab4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800081a:	4b0b      	ldr	r3, [pc, #44]	@ (8000848 <MX_ETH_Init+0x98>)
 800081c:	2221      	movs	r2, #33	@ 0x21
 800081e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000820:	4b09      	ldr	r3, [pc, #36]	@ (8000848 <MX_ETH_Init+0x98>)
 8000822:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000826:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000828:	4b07      	ldr	r3, [pc, #28]	@ (8000848 <MX_ETH_Init+0x98>)
 800082a:	2200      	movs	r2, #0
 800082c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000454 	.word	0x20000454
 8000838:	40028000 	.word	0x40028000
 800083c:	20000a40 	.word	0x20000a40
 8000840:	200003b4 	.word	0x200003b4
 8000844:	20000314 	.word	0x20000314
 8000848:	200002dc 	.word	0x200002dc

0800084c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000850:	4b11      	ldr	r3, [pc, #68]	@ (8000898 <MX_USART3_UART_Init+0x4c>)
 8000852:	4a12      	ldr	r2, [pc, #72]	@ (800089c <MX_USART3_UART_Init+0x50>)
 8000854:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000856:	4b10      	ldr	r3, [pc, #64]	@ (8000898 <MX_USART3_UART_Init+0x4c>)
 8000858:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800085c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800085e:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <MX_USART3_UART_Init+0x4c>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000864:	4b0c      	ldr	r3, [pc, #48]	@ (8000898 <MX_USART3_UART_Init+0x4c>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800086a:	4b0b      	ldr	r3, [pc, #44]	@ (8000898 <MX_USART3_UART_Init+0x4c>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000870:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <MX_USART3_UART_Init+0x4c>)
 8000872:	220c      	movs	r2, #12
 8000874:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000876:	4b08      	ldr	r3, [pc, #32]	@ (8000898 <MX_USART3_UART_Init+0x4c>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800087c:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <MX_USART3_UART_Init+0x4c>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000882:	4805      	ldr	r0, [pc, #20]	@ (8000898 <MX_USART3_UART_Init+0x4c>)
 8000884:	f002 fb5a 	bl	8002f3c <HAL_UART_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800088e:	f000 f96f 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000504 	.word	0x20000504
 800089c:	40004800 	.word	0x40004800

080008a0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008a4:	4b14      	ldr	r3, [pc, #80]	@ (80008f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80008aa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80008ac:	4b12      	ldr	r3, [pc, #72]	@ (80008f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ae:	2204      	movs	r2, #4
 80008b0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008b2:	4b11      	ldr	r3, [pc, #68]	@ (80008f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b4:	2202      	movs	r2, #2
 80008b6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	@ (80008f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008be:	4b0e      	ldr	r3, [pc, #56]	@ (80008f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c0:	2202      	movs	r2, #2
 80008c2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	@ (80008f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c6:	2201      	movs	r2, #1
 80008c8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	@ (80008f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008d0:	4b09      	ldr	r3, [pc, #36]	@ (80008f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008d6:	4b08      	ldr	r3, [pc, #32]	@ (80008f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d8:	2201      	movs	r2, #1
 80008da:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008dc:	4b06      	ldr	r3, [pc, #24]	@ (80008f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008de:	2200      	movs	r2, #0
 80008e0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008e2:	4805      	ldr	r0, [pc, #20]	@ (80008f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e4:	f001 fab5 	bl	8001e52 <HAL_PCD_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008ee:	f000 f93f 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	2000054c 	.word	0x2000054c

080008fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08c      	sub	sp, #48	@ 0x30
 8000900:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
 8000910:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	61bb      	str	r3, [r7, #24]
 8000916:	4b4c      	ldr	r3, [pc, #304]	@ (8000a48 <MX_GPIO_Init+0x14c>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	4a4b      	ldr	r2, [pc, #300]	@ (8000a48 <MX_GPIO_Init+0x14c>)
 800091c:	f043 0304 	orr.w	r3, r3, #4
 8000920:	6313      	str	r3, [r2, #48]	@ 0x30
 8000922:	4b49      	ldr	r3, [pc, #292]	@ (8000a48 <MX_GPIO_Init+0x14c>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	f003 0304 	and.w	r3, r3, #4
 800092a:	61bb      	str	r3, [r7, #24]
 800092c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	617b      	str	r3, [r7, #20]
 8000932:	4b45      	ldr	r3, [pc, #276]	@ (8000a48 <MX_GPIO_Init+0x14c>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	4a44      	ldr	r2, [pc, #272]	@ (8000a48 <MX_GPIO_Init+0x14c>)
 8000938:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800093c:	6313      	str	r3, [r2, #48]	@ 0x30
 800093e:	4b42      	ldr	r3, [pc, #264]	@ (8000a48 <MX_GPIO_Init+0x14c>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000946:	617b      	str	r3, [r7, #20]
 8000948:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	613b      	str	r3, [r7, #16]
 800094e:	4b3e      	ldr	r3, [pc, #248]	@ (8000a48 <MX_GPIO_Init+0x14c>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	4a3d      	ldr	r2, [pc, #244]	@ (8000a48 <MX_GPIO_Init+0x14c>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6313      	str	r3, [r2, #48]	@ 0x30
 800095a:	4b3b      	ldr	r3, [pc, #236]	@ (8000a48 <MX_GPIO_Init+0x14c>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	4b37      	ldr	r3, [pc, #220]	@ (8000a48 <MX_GPIO_Init+0x14c>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	4a36      	ldr	r2, [pc, #216]	@ (8000a48 <MX_GPIO_Init+0x14c>)
 8000970:	f043 0302 	orr.w	r3, r3, #2
 8000974:	6313      	str	r3, [r2, #48]	@ 0x30
 8000976:	4b34      	ldr	r3, [pc, #208]	@ (8000a48 <MX_GPIO_Init+0x14c>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	f003 0302 	and.w	r3, r3, #2
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	60bb      	str	r3, [r7, #8]
 8000986:	4b30      	ldr	r3, [pc, #192]	@ (8000a48 <MX_GPIO_Init+0x14c>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	4a2f      	ldr	r2, [pc, #188]	@ (8000a48 <MX_GPIO_Init+0x14c>)
 800098c:	f043 0308 	orr.w	r3, r3, #8
 8000990:	6313      	str	r3, [r2, #48]	@ 0x30
 8000992:	4b2d      	ldr	r3, [pc, #180]	@ (8000a48 <MX_GPIO_Init+0x14c>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	f003 0308 	and.w	r3, r3, #8
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	4b29      	ldr	r3, [pc, #164]	@ (8000a48 <MX_GPIO_Init+0x14c>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a6:	4a28      	ldr	r2, [pc, #160]	@ (8000a48 <MX_GPIO_Init+0x14c>)
 80009a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ae:	4b26      	ldr	r3, [pc, #152]	@ (8000a48 <MX_GPIO_Init+0x14c>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	f244 0181 	movw	r1, #16513	@ 0x4081
 80009c0:	4822      	ldr	r0, [pc, #136]	@ (8000a4c <MX_GPIO_Init+0x150>)
 80009c2:	f001 fa2d 	bl	8001e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2140      	movs	r1, #64	@ 0x40
 80009ca:	4821      	ldr	r0, [pc, #132]	@ (8000a50 <MX_GPIO_Init+0x154>)
 80009cc:	f001 fa28 	bl	8001e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009d6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009e0:	f107 031c 	add.w	r3, r7, #28
 80009e4:	4619      	mov	r1, r3
 80009e6:	481b      	ldr	r0, [pc, #108]	@ (8000a54 <MX_GPIO_Init+0x158>)
 80009e8:	f001 f86e 	bl	8001ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009ec:	f244 0381 	movw	r3, #16513	@ 0x4081
 80009f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f2:	2301      	movs	r3, #1
 80009f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fa:	2300      	movs	r3, #0
 80009fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	4811      	ldr	r0, [pc, #68]	@ (8000a4c <MX_GPIO_Init+0x150>)
 8000a06:	f001 f85f 	bl	8001ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a0a:	2340      	movs	r3, #64	@ 0x40
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2300      	movs	r3, #0
 8000a18:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	480b      	ldr	r0, [pc, #44]	@ (8000a50 <MX_GPIO_Init+0x154>)
 8000a22:	f001 f851 	bl	8001ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a26:	2380      	movs	r3, #128	@ 0x80
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	4805      	ldr	r0, [pc, #20]	@ (8000a50 <MX_GPIO_Init+0x154>)
 8000a3a:	f001 f845 	bl	8001ac8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a3e:	bf00      	nop
 8000a40:	3730      	adds	r7, #48	@ 0x30
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40020400 	.word	0x40020400
 8000a50:	40021800 	.word	0x40021800
 8000a54:	40020800 	.word	0x40020800

08000a58 <print_uart>:

/* USER CODE BEGIN 4 */

void print_uart(const char *str)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  if (str != NULL && huart3.Instance != NULL)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d00e      	beq.n	8000a84 <print_uart+0x2c>
 8000a66:	4b09      	ldr	r3, [pc, #36]	@ (8000a8c <print_uart+0x34>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d00a      	beq.n	8000a84 <print_uart+0x2c>
  {
    HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8000a6e:	6878      	ldr	r0, [r7, #4]
 8000a70:	f7ff fbbe 	bl	80001f0 <strlen>
 8000a74:	4603      	mov	r3, r0
 8000a76:	b29a      	uxth	r2, r3
 8000a78:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7c:	6879      	ldr	r1, [r7, #4]
 8000a7e:	4803      	ldr	r0, [pc, #12]	@ (8000a8c <print_uart+0x34>)
 8000a80:	f002 faac 	bl	8002fdc <HAL_UART_Transmit>
  }
}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000504 	.word	0x20000504

08000a90 <Task01_init>:
  }
}


void Task01_init(void const * argument)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task01_init */
  /* Infinite loop */
  for(;;)
  {
    print_uart("Default Task\r\n");
 8000a98:	4804      	ldr	r0, [pc, #16]	@ (8000aac <Task01_init+0x1c>)
 8000a9a:	f7ff ffdd 	bl	8000a58 <print_uart>
    osDelay(1000);
 8000a9e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000aa2:	f003 f9da 	bl	8003e5a <osDelay>
    print_uart("Default Task\r\n");
 8000aa6:	bf00      	nop
 8000aa8:	e7f6      	b.n	8000a98 <Task01_init+0x8>
 8000aaa:	bf00      	nop
 8000aac:	08006734 	.word	0x08006734

08000ab0 <Task02_init>:
  /* USER CODE END Task01_init */
}

/* USER CODE END Header_Task02_init */
void Task02_init(void const * argument)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b090      	sub	sp, #64	@ 0x40
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task01_init */
  /* Infinite loop */
  for(;;){
    indx = indx + 1;
 8000ab8:	4b17      	ldr	r3, [pc, #92]	@ (8000b18 <Task02_init+0x68>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	3301      	adds	r3, #1
 8000abe:	b2da      	uxtb	r2, r3
 8000ac0:	4b15      	ldr	r3, [pc, #84]	@ (8000b18 <Task02_init+0x68>)
 8000ac2:	701a      	strb	r2, [r3, #0]
    char buffer[50];
    snprintf(buffer, sizeof(buffer), "Task02,indx:%d\r\n", indx);
 8000ac4:	4b14      	ldr	r3, [pc, #80]	@ (8000b18 <Task02_init+0x68>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	f107 000c 	add.w	r0, r7, #12
 8000acc:	4a13      	ldr	r2, [pc, #76]	@ (8000b1c <Task02_init+0x6c>)
 8000ace:	2132      	movs	r1, #50	@ 0x32
 8000ad0:	f004 fee2 	bl	8005898 <sniprintf>
    print_uart(buffer);
 8000ad4:	f107 030c 	add.w	r3, r7, #12
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff ffbd 	bl	8000a58 <print_uart>

    // SusPend Task 01
    if (indx  == 5) {
 8000ade:	4b0e      	ldr	r3, [pc, #56]	@ (8000b18 <Task02_init+0x68>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b05      	cmp	r3, #5
 8000ae4:	d107      	bne.n	8000af6 <Task02_init+0x46>
      osThreadSuspend(task01Handle);
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b20 <Task02_init+0x70>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f003 f9c9 	bl	8003e82 <osThreadSuspend>
      print_uart("Task 01 suspended\r\n");
 8000af0:	480c      	ldr	r0, [pc, #48]	@ (8000b24 <Task02_init+0x74>)
 8000af2:	f7ff ffb1 	bl	8000a58 <print_uart>
    }
    if(indx == 7){
 8000af6:	4b08      	ldr	r3, [pc, #32]	@ (8000b18 <Task02_init+0x68>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b07      	cmp	r3, #7
 8000afc:	d107      	bne.n	8000b0e <Task02_init+0x5e>
      print_uart("Task 02 resumed Task 01\r\n");
 8000afe:	480a      	ldr	r0, [pc, #40]	@ (8000b28 <Task02_init+0x78>)
 8000b00:	f7ff ffaa 	bl	8000a58 <print_uart>
      osThreadResume(task01Handle);
 8000b04:	4b06      	ldr	r3, [pc, #24]	@ (8000b20 <Task02_init+0x70>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f003 f9c7 	bl	8003e9c <osThreadResume>
    }

    
    
    osDelay(1000);
 8000b0e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b12:	f003 f9a2 	bl	8003e5a <osDelay>
  for(;;){
 8000b16:	e7cf      	b.n	8000ab8 <Task02_init+0x8>
 8000b18:	20000a3c 	.word	0x20000a3c
 8000b1c:	08006744 	.word	0x08006744
 8000b20:	20000a30 	.word	0x20000a30
 8000b24:	08006758 	.word	0x08006758
 8000b28:	0800676c 	.word	0x0800676c

08000b2c <Task03_init>:
/* USER CODE END Task01_init */


/* USER CODE END Header_Task01_init */
void Task03_init(void const * argument)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task01_init */
  /* Infinite loop */
  for(;;){
    print_uart("Task 03 is running\r\n");
 8000b34:	4804      	ldr	r0, [pc, #16]	@ (8000b48 <Task03_init+0x1c>)
 8000b36:	f7ff ff8f 	bl	8000a58 <print_uart>
    osDelay(1000);
 8000b3a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b3e:	f003 f98c 	bl	8003e5a <osDelay>
    print_uart("Task 03 is running\r\n");
 8000b42:	bf00      	nop
 8000b44:	e7f6      	b.n	8000b34 <Task03_init+0x8>
 8000b46:	bf00      	nop
 8000b48:	08006788 	.word	0x08006788

08000b4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a04      	ldr	r2, [pc, #16]	@ (8000b6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d101      	bne.n	8000b62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b5e:	f000 fb3d 	bl	80011dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40010000 	.word	0x40010000

08000b70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b74:	b672      	cpsid	i
}
 8000b76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <Error_Handler+0x8>

08000b7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	4b12      	ldr	r3, [pc, #72]	@ (8000bd0 <HAL_MspInit+0x54>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b8a:	4a11      	ldr	r2, [pc, #68]	@ (8000bd0 <HAL_MspInit+0x54>)
 8000b8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b90:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b92:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd0 <HAL_MspInit+0x54>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	603b      	str	r3, [r7, #0]
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd0 <HAL_MspInit+0x54>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd0 <HAL_MspInit+0x54>)
 8000ba8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bae:	4b08      	ldr	r3, [pc, #32]	@ (8000bd0 <HAL_MspInit+0x54>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bb6:	603b      	str	r3, [r7, #0]
 8000bb8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	210f      	movs	r1, #15
 8000bbe:	f06f 0001 	mvn.w	r0, #1
 8000bc2:	f000 fc07 	bl	80013d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40023800 	.word	0x40023800

08000bd4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08e      	sub	sp, #56	@ 0x38
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a55      	ldr	r2, [pc, #340]	@ (8000d48 <HAL_ETH_MspInit+0x174>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	f040 80a4 	bne.w	8000d40 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	623b      	str	r3, [r7, #32]
 8000bfc:	4b53      	ldr	r3, [pc, #332]	@ (8000d4c <HAL_ETH_MspInit+0x178>)
 8000bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c00:	4a52      	ldr	r2, [pc, #328]	@ (8000d4c <HAL_ETH_MspInit+0x178>)
 8000c02:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c06:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c08:	4b50      	ldr	r3, [pc, #320]	@ (8000d4c <HAL_ETH_MspInit+0x178>)
 8000c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c10:	623b      	str	r3, [r7, #32]
 8000c12:	6a3b      	ldr	r3, [r7, #32]
 8000c14:	2300      	movs	r3, #0
 8000c16:	61fb      	str	r3, [r7, #28]
 8000c18:	4b4c      	ldr	r3, [pc, #304]	@ (8000d4c <HAL_ETH_MspInit+0x178>)
 8000c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1c:	4a4b      	ldr	r2, [pc, #300]	@ (8000d4c <HAL_ETH_MspInit+0x178>)
 8000c1e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000c22:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c24:	4b49      	ldr	r3, [pc, #292]	@ (8000d4c <HAL_ETH_MspInit+0x178>)
 8000c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c28:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000c2c:	61fb      	str	r3, [r7, #28]
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	2300      	movs	r3, #0
 8000c32:	61bb      	str	r3, [r7, #24]
 8000c34:	4b45      	ldr	r3, [pc, #276]	@ (8000d4c <HAL_ETH_MspInit+0x178>)
 8000c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c38:	4a44      	ldr	r2, [pc, #272]	@ (8000d4c <HAL_ETH_MspInit+0x178>)
 8000c3a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000c3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c40:	4b42      	ldr	r3, [pc, #264]	@ (8000d4c <HAL_ETH_MspInit+0x178>)
 8000c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000c48:	61bb      	str	r3, [r7, #24]
 8000c4a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]
 8000c50:	4b3e      	ldr	r3, [pc, #248]	@ (8000d4c <HAL_ETH_MspInit+0x178>)
 8000c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c54:	4a3d      	ldr	r2, [pc, #244]	@ (8000d4c <HAL_ETH_MspInit+0x178>)
 8000c56:	f043 0304 	orr.w	r3, r3, #4
 8000c5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5c:	4b3b      	ldr	r3, [pc, #236]	@ (8000d4c <HAL_ETH_MspInit+0x178>)
 8000c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c60:	f003 0304 	and.w	r3, r3, #4
 8000c64:	617b      	str	r3, [r7, #20]
 8000c66:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c68:	2300      	movs	r3, #0
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	4b37      	ldr	r3, [pc, #220]	@ (8000d4c <HAL_ETH_MspInit+0x178>)
 8000c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c70:	4a36      	ldr	r2, [pc, #216]	@ (8000d4c <HAL_ETH_MspInit+0x178>)
 8000c72:	f043 0301 	orr.w	r3, r3, #1
 8000c76:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c78:	4b34      	ldr	r3, [pc, #208]	@ (8000d4c <HAL_ETH_MspInit+0x178>)
 8000c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7c:	f003 0301 	and.w	r3, r3, #1
 8000c80:	613b      	str	r3, [r7, #16]
 8000c82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c84:	2300      	movs	r3, #0
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	4b30      	ldr	r3, [pc, #192]	@ (8000d4c <HAL_ETH_MspInit+0x178>)
 8000c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8c:	4a2f      	ldr	r2, [pc, #188]	@ (8000d4c <HAL_ETH_MspInit+0x178>)
 8000c8e:	f043 0302 	orr.w	r3, r3, #2
 8000c92:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c94:	4b2d      	ldr	r3, [pc, #180]	@ (8000d4c <HAL_ETH_MspInit+0x178>)
 8000c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c98:	f003 0302 	and.w	r3, r3, #2
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	4b29      	ldr	r3, [pc, #164]	@ (8000d4c <HAL_ETH_MspInit+0x178>)
 8000ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca8:	4a28      	ldr	r2, [pc, #160]	@ (8000d4c <HAL_ETH_MspInit+0x178>)
 8000caa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cae:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb0:	4b26      	ldr	r3, [pc, #152]	@ (8000d4c <HAL_ETH_MspInit+0x178>)
 8000cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000cbc:	2332      	movs	r3, #50	@ 0x32
 8000cbe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ccc:	230b      	movs	r3, #11
 8000cce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	481e      	ldr	r0, [pc, #120]	@ (8000d50 <HAL_ETH_MspInit+0x17c>)
 8000cd8:	f000 fef6 	bl	8001ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000cdc:	2386      	movs	r3, #134	@ 0x86
 8000cde:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cec:	230b      	movs	r3, #11
 8000cee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4817      	ldr	r0, [pc, #92]	@ (8000d54 <HAL_ETH_MspInit+0x180>)
 8000cf8:	f000 fee6 	bl	8001ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000cfc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d00:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	2302      	movs	r3, #2
 8000d04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d0e:	230b      	movs	r3, #11
 8000d10:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d16:	4619      	mov	r1, r3
 8000d18:	480f      	ldr	r0, [pc, #60]	@ (8000d58 <HAL_ETH_MspInit+0x184>)
 8000d1a:	f000 fed5 	bl	8001ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d1e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000d22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d24:	2302      	movs	r3, #2
 8000d26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d30:	230b      	movs	r3, #11
 8000d32:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4808      	ldr	r0, [pc, #32]	@ (8000d5c <HAL_ETH_MspInit+0x188>)
 8000d3c:	f000 fec4 	bl	8001ac8 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000d40:	bf00      	nop
 8000d42:	3738      	adds	r7, #56	@ 0x38
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40028000 	.word	0x40028000
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	40020800 	.word	0x40020800
 8000d54:	40020000 	.word	0x40020000
 8000d58:	40020400 	.word	0x40020400
 8000d5c:	40021800 	.word	0x40021800

08000d60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08a      	sub	sp, #40	@ 0x28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a19      	ldr	r2, [pc, #100]	@ (8000de4 <HAL_UART_MspInit+0x84>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d12c      	bne.n	8000ddc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
 8000d86:	4b18      	ldr	r3, [pc, #96]	@ (8000de8 <HAL_UART_MspInit+0x88>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8a:	4a17      	ldr	r2, [pc, #92]	@ (8000de8 <HAL_UART_MspInit+0x88>)
 8000d8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d90:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d92:	4b15      	ldr	r3, [pc, #84]	@ (8000de8 <HAL_UART_MspInit+0x88>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d9a:	613b      	str	r3, [r7, #16]
 8000d9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	4b11      	ldr	r3, [pc, #68]	@ (8000de8 <HAL_UART_MspInit+0x88>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da6:	4a10      	ldr	r2, [pc, #64]	@ (8000de8 <HAL_UART_MspInit+0x88>)
 8000da8:	f043 0308 	orr.w	r3, r3, #8
 8000dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dae:	4b0e      	ldr	r3, [pc, #56]	@ (8000de8 <HAL_UART_MspInit+0x88>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db2:	f003 0308 	and.w	r3, r3, #8
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000dba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dcc:	2307      	movs	r3, #7
 8000dce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4805      	ldr	r0, [pc, #20]	@ (8000dec <HAL_UART_MspInit+0x8c>)
 8000dd8:	f000 fe76 	bl	8001ac8 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000ddc:	bf00      	nop
 8000dde:	3728      	adds	r7, #40	@ 0x28
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40004800 	.word	0x40004800
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40020c00 	.word	0x40020c00

08000df0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08a      	sub	sp, #40	@ 0x28
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e10:	d13f      	bne.n	8000e92 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	613b      	str	r3, [r7, #16]
 8000e16:	4b21      	ldr	r3, [pc, #132]	@ (8000e9c <HAL_PCD_MspInit+0xac>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1a:	4a20      	ldr	r2, [pc, #128]	@ (8000e9c <HAL_PCD_MspInit+0xac>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e22:	4b1e      	ldr	r3, [pc, #120]	@ (8000e9c <HAL_PCD_MspInit+0xac>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e2e:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e34:	2302      	movs	r3, #2
 8000e36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e40:	230a      	movs	r3, #10
 8000e42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4815      	ldr	r0, [pc, #84]	@ (8000ea0 <HAL_PCD_MspInit+0xb0>)
 8000e4c:	f000 fe3c 	bl	8001ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	4619      	mov	r1, r3
 8000e64:	480e      	ldr	r0, [pc, #56]	@ (8000ea0 <HAL_PCD_MspInit+0xb0>)
 8000e66:	f000 fe2f 	bl	8001ac8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e9c <HAL_PCD_MspInit+0xac>)
 8000e6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e6e:	4a0b      	ldr	r2, [pc, #44]	@ (8000e9c <HAL_PCD_MspInit+0xac>)
 8000e70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e74:	6353      	str	r3, [r2, #52]	@ 0x34
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	4b08      	ldr	r3, [pc, #32]	@ (8000e9c <HAL_PCD_MspInit+0xac>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e7e:	4a07      	ldr	r2, [pc, #28]	@ (8000e9c <HAL_PCD_MspInit+0xac>)
 8000e80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e86:	4b05      	ldr	r3, [pc, #20]	@ (8000e9c <HAL_PCD_MspInit+0xac>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000e92:	bf00      	nop
 8000e94:	3728      	adds	r7, #40	@ 0x28
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40020000 	.word	0x40020000

08000ea4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08c      	sub	sp, #48	@ 0x30
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000eac:	2300      	movs	r3, #0
 8000eae:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60bb      	str	r3, [r7, #8]
 8000eb8:	4b2f      	ldr	r3, [pc, #188]	@ (8000f78 <HAL_InitTick+0xd4>)
 8000eba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ebc:	4a2e      	ldr	r2, [pc, #184]	@ (8000f78 <HAL_InitTick+0xd4>)
 8000ebe:	f043 0301 	orr.w	r3, r3, #1
 8000ec2:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ec4:	4b2c      	ldr	r3, [pc, #176]	@ (8000f78 <HAL_InitTick+0xd4>)
 8000ec6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	60bb      	str	r3, [r7, #8]
 8000ece:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ed0:	f107 020c 	add.w	r2, r7, #12
 8000ed4:	f107 0310 	add.w	r3, r7, #16
 8000ed8:	4611      	mov	r1, r2
 8000eda:	4618      	mov	r0, r3
 8000edc:	f001 fd60 	bl	80029a0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000ee0:	f001 fd4a 	bl	8002978 <HAL_RCC_GetPCLK2Freq>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000eec:	4a23      	ldr	r2, [pc, #140]	@ (8000f7c <HAL_InitTick+0xd8>)
 8000eee:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef2:	0c9b      	lsrs	r3, r3, #18
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ef8:	4b21      	ldr	r3, [pc, #132]	@ (8000f80 <HAL_InitTick+0xdc>)
 8000efa:	4a22      	ldr	r2, [pc, #136]	@ (8000f84 <HAL_InitTick+0xe0>)
 8000efc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000efe:	4b20      	ldr	r3, [pc, #128]	@ (8000f80 <HAL_InitTick+0xdc>)
 8000f00:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f04:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f06:	4a1e      	ldr	r2, [pc, #120]	@ (8000f80 <HAL_InitTick+0xdc>)
 8000f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f0a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f0c:	4b1c      	ldr	r3, [pc, #112]	@ (8000f80 <HAL_InitTick+0xdc>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f12:	4b1b      	ldr	r3, [pc, #108]	@ (8000f80 <HAL_InitTick+0xdc>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f18:	4b19      	ldr	r3, [pc, #100]	@ (8000f80 <HAL_InitTick+0xdc>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000f1e:	4818      	ldr	r0, [pc, #96]	@ (8000f80 <HAL_InitTick+0xdc>)
 8000f20:	f001 fd70 	bl	8002a04 <HAL_TIM_Base_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000f2a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d11b      	bne.n	8000f6a <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000f32:	4813      	ldr	r0, [pc, #76]	@ (8000f80 <HAL_InitTick+0xdc>)
 8000f34:	f001 fdc0 	bl	8002ab8 <HAL_TIM_Base_Start_IT>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000f3e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d111      	bne.n	8000f6a <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000f46:	2019      	movs	r0, #25
 8000f48:	f000 fa60 	bl	800140c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b0f      	cmp	r3, #15
 8000f50:	d808      	bhi.n	8000f64 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000f52:	2200      	movs	r2, #0
 8000f54:	6879      	ldr	r1, [r7, #4]
 8000f56:	2019      	movs	r0, #25
 8000f58:	f000 fa3c 	bl	80013d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f5c:	4a0a      	ldr	r2, [pc, #40]	@ (8000f88 <HAL_InitTick+0xe4>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6013      	str	r3, [r2, #0]
 8000f62:	e002      	b.n	8000f6a <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000f6a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3730      	adds	r7, #48	@ 0x30
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	431bde83 	.word	0x431bde83
 8000f80:	20000a48 	.word	0x20000a48
 8000f84:	40010000 	.word	0x40010000
 8000f88:	20000004 	.word	0x20000004

08000f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f90:	bf00      	nop
 8000f92:	e7fd      	b.n	8000f90 <NMI_Handler+0x4>

08000f94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <HardFault_Handler+0x4>

08000f9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa0:	bf00      	nop
 8000fa2:	e7fd      	b.n	8000fa0 <MemManage_Handler+0x4>

08000fa4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa8:	bf00      	nop
 8000faa:	e7fd      	b.n	8000fa8 <BusFault_Handler+0x4>

08000fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb0:	bf00      	nop
 8000fb2:	e7fd      	b.n	8000fb0 <UsageFault_Handler+0x4>

08000fb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fc8:	4802      	ldr	r0, [pc, #8]	@ (8000fd4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000fca:	f001 fde5 	bl	8002b98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000a48 	.word	0x20000a48

08000fd8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
 8000fe8:	e00a      	b.n	8001000 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fea:	f3af 8000 	nop.w
 8000fee:	4601      	mov	r1, r0
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	1c5a      	adds	r2, r3, #1
 8000ff4:	60ba      	str	r2, [r7, #8]
 8000ff6:	b2ca      	uxtb	r2, r1
 8000ff8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	697a      	ldr	r2, [r7, #20]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	429a      	cmp	r2, r3
 8001006:	dbf0      	blt.n	8000fea <_read+0x12>
  }

  return len;
 8001008:	687b      	ldr	r3, [r7, #4]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b086      	sub	sp, #24
 8001016:	af00      	add	r7, sp, #0
 8001018:	60f8      	str	r0, [r7, #12]
 800101a:	60b9      	str	r1, [r7, #8]
 800101c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
 8001022:	e009      	b.n	8001038 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	1c5a      	adds	r2, r3, #1
 8001028:	60ba      	str	r2, [r7, #8]
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fae7 	bl	8000600 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	3301      	adds	r3, #1
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	697a      	ldr	r2, [r7, #20]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	429a      	cmp	r2, r3
 800103e:	dbf1      	blt.n	8001024 <_write+0x12>
  }
  return len;
 8001040:	687b      	ldr	r3, [r7, #4]
}
 8001042:	4618      	mov	r0, r3
 8001044:	3718      	adds	r7, #24
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <_close>:

int _close(int file)
{
 800104a:	b480      	push	{r7}
 800104c:	b083      	sub	sp, #12
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001052:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001056:	4618      	mov	r0, r3
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001062:	b480      	push	{r7}
 8001064:	b083      	sub	sp, #12
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
 800106a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001072:	605a      	str	r2, [r3, #4]
  return 0;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <_isatty>:

int _isatty(int file)
{
 8001082:	b480      	push	{r7}
 8001084:	b083      	sub	sp, #12
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800108a:	2301      	movs	r3, #1
}
 800108c:	4618      	mov	r0, r3
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3714      	adds	r7, #20
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
	...

080010b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010bc:	4a14      	ldr	r2, [pc, #80]	@ (8001110 <_sbrk+0x5c>)
 80010be:	4b15      	ldr	r3, [pc, #84]	@ (8001114 <_sbrk+0x60>)
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010c8:	4b13      	ldr	r3, [pc, #76]	@ (8001118 <_sbrk+0x64>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d102      	bne.n	80010d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010d0:	4b11      	ldr	r3, [pc, #68]	@ (8001118 <_sbrk+0x64>)
 80010d2:	4a12      	ldr	r2, [pc, #72]	@ (800111c <_sbrk+0x68>)
 80010d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010d6:	4b10      	ldr	r3, [pc, #64]	@ (8001118 <_sbrk+0x64>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4413      	add	r3, r2
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d207      	bcs.n	80010f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010e4:	f004 fd34 	bl	8005b50 <__errno>
 80010e8:	4603      	mov	r3, r0
 80010ea:	220c      	movs	r2, #12
 80010ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295
 80010f2:	e009      	b.n	8001108 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010f4:	4b08      	ldr	r3, [pc, #32]	@ (8001118 <_sbrk+0x64>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010fa:	4b07      	ldr	r3, [pc, #28]	@ (8001118 <_sbrk+0x64>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	4a05      	ldr	r2, [pc, #20]	@ (8001118 <_sbrk+0x64>)
 8001104:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001106:	68fb      	ldr	r3, [r7, #12]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3718      	adds	r7, #24
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20030000 	.word	0x20030000
 8001114:	00000400 	.word	0x00000400
 8001118:	20000a90 	.word	0x20000a90
 800111c:	20004938 	.word	0x20004938

08001120 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001124:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <SystemInit+0x20>)
 8001126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800112a:	4a05      	ldr	r2, [pc, #20]	@ (8001140 <SystemInit+0x20>)
 800112c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001130:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001144:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800117c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001148:	f7ff ffea 	bl	8001120 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800114c:	480c      	ldr	r0, [pc, #48]	@ (8001180 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800114e:	490d      	ldr	r1, [pc, #52]	@ (8001184 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001150:	4a0d      	ldr	r2, [pc, #52]	@ (8001188 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001152:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001154:	e002      	b.n	800115c <LoopCopyDataInit>

08001156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800115a:	3304      	adds	r3, #4

0800115c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800115c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800115e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001160:	d3f9      	bcc.n	8001156 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001162:	4a0a      	ldr	r2, [pc, #40]	@ (800118c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001164:	4c0a      	ldr	r4, [pc, #40]	@ (8001190 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001168:	e001      	b.n	800116e <LoopFillZerobss>

0800116a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800116a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800116c:	3204      	adds	r2, #4

0800116e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800116e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001170:	d3fb      	bcc.n	800116a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001172:	f004 fcf3 	bl	8005b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001176:	f7ff fa55 	bl	8000624 <main>
  bx  lr    
 800117a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800117c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001180:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001184:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001188:	08006804 	.word	0x08006804
  ldr r2, =_sbss
 800118c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001190:	20004938 	.word	0x20004938

08001194 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001194:	e7fe      	b.n	8001194 <ADC_IRQHandler>
	...

08001198 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800119c:	4b0e      	ldr	r3, [pc, #56]	@ (80011d8 <HAL_Init+0x40>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a0d      	ldr	r2, [pc, #52]	@ (80011d8 <HAL_Init+0x40>)
 80011a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011a8:	4b0b      	ldr	r3, [pc, #44]	@ (80011d8 <HAL_Init+0x40>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a0a      	ldr	r2, [pc, #40]	@ (80011d8 <HAL_Init+0x40>)
 80011ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011b4:	4b08      	ldr	r3, [pc, #32]	@ (80011d8 <HAL_Init+0x40>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a07      	ldr	r2, [pc, #28]	@ (80011d8 <HAL_Init+0x40>)
 80011ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c0:	2003      	movs	r0, #3
 80011c2:	f000 f8fc 	bl	80013be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011c6:	200f      	movs	r0, #15
 80011c8:	f7ff fe6c 	bl	8000ea4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011cc:	f7ff fcd6 	bl	8000b7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40023c00 	.word	0x40023c00

080011dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011e0:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <HAL_IncTick+0x20>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	461a      	mov	r2, r3
 80011e6:	4b06      	ldr	r3, [pc, #24]	@ (8001200 <HAL_IncTick+0x24>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4413      	add	r3, r2
 80011ec:	4a04      	ldr	r2, [pc, #16]	@ (8001200 <HAL_IncTick+0x24>)
 80011ee:	6013      	str	r3, [r2, #0]
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	20000008 	.word	0x20000008
 8001200:	20000a94 	.word	0x20000a94

08001204 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  return uwTick;
 8001208:	4b03      	ldr	r3, [pc, #12]	@ (8001218 <HAL_GetTick+0x14>)
 800120a:	681b      	ldr	r3, [r3, #0]
}
 800120c:	4618      	mov	r0, r3
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	20000a94 	.word	0x20000a94

0800121c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001224:	f7ff ffee 	bl	8001204 <HAL_GetTick>
 8001228:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001234:	d005      	beq.n	8001242 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001236:	4b0a      	ldr	r3, [pc, #40]	@ (8001260 <HAL_Delay+0x44>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	461a      	mov	r2, r3
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	4413      	add	r3, r2
 8001240:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001242:	bf00      	nop
 8001244:	f7ff ffde 	bl	8001204 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	68fa      	ldr	r2, [r7, #12]
 8001250:	429a      	cmp	r2, r3
 8001252:	d8f7      	bhi.n	8001244 <HAL_Delay+0x28>
  {
  }
}
 8001254:	bf00      	nop
 8001256:	bf00      	nop
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000008 	.word	0x20000008

08001264 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001274:	4b0c      	ldr	r3, [pc, #48]	@ (80012a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800127a:	68ba      	ldr	r2, [r7, #8]
 800127c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001280:	4013      	ands	r3, r2
 8001282:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800128c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001290:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001296:	4a04      	ldr	r2, [pc, #16]	@ (80012a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	60d3      	str	r3, [r2, #12]
}
 800129c:	bf00      	nop
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b0:	4b04      	ldr	r3, [pc, #16]	@ (80012c4 <__NVIC_GetPriorityGrouping+0x18>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	0a1b      	lsrs	r3, r3, #8
 80012b6:	f003 0307 	and.w	r3, r3, #7
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	db0b      	blt.n	80012f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	f003 021f 	and.w	r2, r3, #31
 80012e0:	4907      	ldr	r1, [pc, #28]	@ (8001300 <__NVIC_EnableIRQ+0x38>)
 80012e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e6:	095b      	lsrs	r3, r3, #5
 80012e8:	2001      	movs	r0, #1
 80012ea:	fa00 f202 	lsl.w	r2, r0, r2
 80012ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	e000e100 	.word	0xe000e100

08001304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	6039      	str	r1, [r7, #0]
 800130e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001314:	2b00      	cmp	r3, #0
 8001316:	db0a      	blt.n	800132e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	b2da      	uxtb	r2, r3
 800131c:	490c      	ldr	r1, [pc, #48]	@ (8001350 <__NVIC_SetPriority+0x4c>)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	0112      	lsls	r2, r2, #4
 8001324:	b2d2      	uxtb	r2, r2
 8001326:	440b      	add	r3, r1
 8001328:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800132c:	e00a      	b.n	8001344 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	b2da      	uxtb	r2, r3
 8001332:	4908      	ldr	r1, [pc, #32]	@ (8001354 <__NVIC_SetPriority+0x50>)
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	f003 030f 	and.w	r3, r3, #15
 800133a:	3b04      	subs	r3, #4
 800133c:	0112      	lsls	r2, r2, #4
 800133e:	b2d2      	uxtb	r2, r2
 8001340:	440b      	add	r3, r1
 8001342:	761a      	strb	r2, [r3, #24]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000e100 	.word	0xe000e100
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001358:	b480      	push	{r7}
 800135a:	b089      	sub	sp, #36	@ 0x24
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f1c3 0307 	rsb	r3, r3, #7
 8001372:	2b04      	cmp	r3, #4
 8001374:	bf28      	it	cs
 8001376:	2304      	movcs	r3, #4
 8001378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3304      	adds	r3, #4
 800137e:	2b06      	cmp	r3, #6
 8001380:	d902      	bls.n	8001388 <NVIC_EncodePriority+0x30>
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	3b03      	subs	r3, #3
 8001386:	e000      	b.n	800138a <NVIC_EncodePriority+0x32>
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800138c:	f04f 32ff 	mov.w	r2, #4294967295
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43da      	mvns	r2, r3
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	401a      	ands	r2, r3
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a0:	f04f 31ff 	mov.w	r1, #4294967295
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	fa01 f303 	lsl.w	r3, r1, r3
 80013aa:	43d9      	mvns	r1, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	4313      	orrs	r3, r2
         );
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3724      	adds	r7, #36	@ 0x24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff ff4c 	bl	8001264 <__NVIC_SetPriorityGrouping>
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
 80013e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013e6:	f7ff ff61 	bl	80012ac <__NVIC_GetPriorityGrouping>
 80013ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	68b9      	ldr	r1, [r7, #8]
 80013f0:	6978      	ldr	r0, [r7, #20]
 80013f2:	f7ff ffb1 	bl	8001358 <NVIC_EncodePriority>
 80013f6:	4602      	mov	r2, r0
 80013f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013fc:	4611      	mov	r1, r2
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff ff80 	bl	8001304 <__NVIC_SetPriority>
}
 8001404:	bf00      	nop
 8001406:	3718      	adds	r7, #24
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff ff54 	bl	80012c8 <__NVIC_EnableIRQ>
}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e08a      	b.n	8001550 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001440:	2b00      	cmp	r3, #0
 8001442:	d106      	bne.n	8001452 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2220      	movs	r2, #32
 8001448:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f7ff fbc1 	bl	8000bd4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	4b40      	ldr	r3, [pc, #256]	@ (8001558 <HAL_ETH_Init+0x130>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800145a:	4a3f      	ldr	r2, [pc, #252]	@ (8001558 <HAL_ETH_Init+0x130>)
 800145c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001460:	6453      	str	r3, [r2, #68]	@ 0x44
 8001462:	4b3d      	ldr	r3, [pc, #244]	@ (8001558 <HAL_ETH_Init+0x130>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001466:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800146e:	4b3b      	ldr	r3, [pc, #236]	@ (800155c <HAL_ETH_Init+0x134>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	4a3a      	ldr	r2, [pc, #232]	@ (800155c <HAL_ETH_Init+0x134>)
 8001474:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001478:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800147a:	4b38      	ldr	r3, [pc, #224]	@ (800155c <HAL_ETH_Init+0x134>)
 800147c:	685a      	ldr	r2, [r3, #4]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	4936      	ldr	r1, [pc, #216]	@ (800155c <HAL_ETH_Init+0x134>)
 8001484:	4313      	orrs	r3, r2
 8001486:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001488:	4b34      	ldr	r3, [pc, #208]	@ (800155c <HAL_ETH_Init+0x134>)
 800148a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	6812      	ldr	r2, [r2, #0]
 800149a:	f043 0301 	orr.w	r3, r3, #1
 800149e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80014a2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014a4:	f7ff feae 	bl	8001204 <HAL_GetTick>
 80014a8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80014aa:	e011      	b.n	80014d0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80014ac:	f7ff feaa 	bl	8001204 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80014ba:	d909      	bls.n	80014d0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2204      	movs	r2, #4
 80014c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	22e0      	movs	r2, #224	@ 0xe0
 80014c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e03f      	b.n	8001550 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1e4      	bne.n	80014ac <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f000 f97a 	bl	80017dc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f000 fa25 	bl	8001938 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f000 fa7b 	bl	80019ea <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	461a      	mov	r2, r3
 80014fa:	2100      	movs	r1, #0
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f000 f9e3 	bl	80018c8 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001510:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	6812      	ldr	r2, [r2, #0]
 800151e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001522:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001526:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800153a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2210      	movs	r2, #16
 800154a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40023800 	.word	0x40023800
 800155c:	40013800 	.word	0x40013800

08001560 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	4b53      	ldr	r3, [pc, #332]	@ (80016c4 <ETH_SetMACConfig+0x164>)
 8001576:	4013      	ands	r3, r2
 8001578:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	7b9b      	ldrb	r3, [r3, #14]
 800157e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	7c12      	ldrb	r2, [r2, #16]
 8001584:	2a00      	cmp	r2, #0
 8001586:	d102      	bne.n	800158e <ETH_SetMACConfig+0x2e>
 8001588:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800158c:	e000      	b.n	8001590 <ETH_SetMACConfig+0x30>
 800158e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001590:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	7c52      	ldrb	r2, [r2, #17]
 8001596:	2a00      	cmp	r2, #0
 8001598:	d102      	bne.n	80015a0 <ETH_SetMACConfig+0x40>
 800159a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800159e:	e000      	b.n	80015a2 <ETH_SetMACConfig+0x42>
 80015a0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80015a2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80015a8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	7fdb      	ldrb	r3, [r3, #31]
 80015ae:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80015b0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80015b6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	7f92      	ldrb	r2, [r2, #30]
 80015bc:	2a00      	cmp	r2, #0
 80015be:	d102      	bne.n	80015c6 <ETH_SetMACConfig+0x66>
 80015c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015c4:	e000      	b.n	80015c8 <ETH_SetMACConfig+0x68>
 80015c6:	2200      	movs	r2, #0
                        macconf->Speed |
 80015c8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	7f1b      	ldrb	r3, [r3, #28]
 80015ce:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80015d0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80015d6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	791b      	ldrb	r3, [r3, #4]
 80015dc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80015de:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80015e6:	2a00      	cmp	r2, #0
 80015e8:	d102      	bne.n	80015f0 <ETH_SetMACConfig+0x90>
 80015ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015ee:	e000      	b.n	80015f2 <ETH_SetMACConfig+0x92>
 80015f0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80015f2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	7bdb      	ldrb	r3, [r3, #15]
 80015f8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80015fa:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001600:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001608:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800160a:	4313      	orrs	r3, r2
 800160c:	68fa      	ldr	r2, [r7, #12]
 800160e:	4313      	orrs	r3, r2
 8001610:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001622:	2001      	movs	r0, #1
 8001624:	f7ff fdfa 	bl	800121c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	68fa      	ldr	r2, [r7, #12]
 800162e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001638:	68fa      	ldr	r2, [r7, #12]
 800163a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800163e:	4013      	ands	r3, r2
 8001640:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001646:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800164e:	2a00      	cmp	r2, #0
 8001650:	d101      	bne.n	8001656 <ETH_SetMACConfig+0xf6>
 8001652:	2280      	movs	r2, #128	@ 0x80
 8001654:	e000      	b.n	8001658 <ETH_SetMACConfig+0xf8>
 8001656:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001658:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800165e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001666:	2a01      	cmp	r2, #1
 8001668:	d101      	bne.n	800166e <ETH_SetMACConfig+0x10e>
 800166a:	2208      	movs	r2, #8
 800166c:	e000      	b.n	8001670 <ETH_SetMACConfig+0x110>
 800166e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001670:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001678:	2a01      	cmp	r2, #1
 800167a:	d101      	bne.n	8001680 <ETH_SetMACConfig+0x120>
 800167c:	2204      	movs	r2, #4
 800167e:	e000      	b.n	8001682 <ETH_SetMACConfig+0x122>
 8001680:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001682:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800168a:	2a01      	cmp	r2, #1
 800168c:	d101      	bne.n	8001692 <ETH_SetMACConfig+0x132>
 800168e:	2202      	movs	r2, #2
 8001690:	e000      	b.n	8001694 <ETH_SetMACConfig+0x134>
 8001692:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001694:	4313      	orrs	r3, r2
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	4313      	orrs	r3, r2
 800169a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016ac:	2001      	movs	r0, #1
 80016ae:	f7ff fdb5 	bl	800121c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	619a      	str	r2, [r3, #24]
}
 80016ba:	bf00      	nop
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	fd20810f 	.word	0xfd20810f

080016c8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	4b3d      	ldr	r3, [pc, #244]	@ (80017d8 <ETH_SetDMAConfig+0x110>)
 80016e2:	4013      	ands	r3, r2
 80016e4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	7b1b      	ldrb	r3, [r3, #12]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d102      	bne.n	80016f4 <ETH_SetDMAConfig+0x2c>
 80016ee:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80016f2:	e000      	b.n	80016f6 <ETH_SetDMAConfig+0x2e>
 80016f4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	7b5b      	ldrb	r3, [r3, #13]
 80016fa:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80016fc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	7f52      	ldrb	r2, [r2, #29]
 8001702:	2a00      	cmp	r2, #0
 8001704:	d102      	bne.n	800170c <ETH_SetDMAConfig+0x44>
 8001706:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800170a:	e000      	b.n	800170e <ETH_SetDMAConfig+0x46>
 800170c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800170e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	7b9b      	ldrb	r3, [r3, #14]
 8001714:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001716:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800171c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	7f1b      	ldrb	r3, [r3, #28]
 8001722:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001724:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	7f9b      	ldrb	r3, [r3, #30]
 800172a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800172c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001732:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800173a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800173c:	4313      	orrs	r3, r2
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	4313      	orrs	r3, r2
 8001742:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800174c:	461a      	mov	r2, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800175e:	2001      	movs	r0, #1
 8001760:	f7ff fd5c 	bl	800121c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800176c:	461a      	mov	r2, r3
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	791b      	ldrb	r3, [r3, #4]
 8001776:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800177c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001782:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001788:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001790:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001792:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001798:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800179a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80017a0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	6812      	ldr	r2, [r2, #0]
 80017a6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80017aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80017ae:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80017bc:	2001      	movs	r0, #1
 80017be:	f7ff fd2d 	bl	800121c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017ca:	461a      	mov	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6013      	str	r3, [r2, #0]
}
 80017d0:	bf00      	nop
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	f8de3f23 	.word	0xf8de3f23

080017dc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b0a6      	sub	sp, #152	@ 0x98
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80017e4:	2301      	movs	r3, #1
 80017e6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80017ea:	2301      	movs	r3, #1
 80017ec:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80017f0:	2300      	movs	r3, #0
 80017f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80017f4:	2300      	movs	r3, #0
 80017f6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80017fa:	2301      	movs	r3, #1
 80017fc:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001800:	2300      	movs	r3, #0
 8001802:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001806:	2301      	movs	r3, #1
 8001808:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 800180c:	2301      	movs	r3, #1
 800180e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001812:	2300      	movs	r3, #0
 8001814:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001818:	2300      	movs	r3, #0
 800181a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800181e:	2300      	movs	r3, #0
 8001820:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001822:	2300      	movs	r3, #0
 8001824:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001828:	2300      	movs	r3, #0
 800182a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800182c:	2300      	movs	r3, #0
 800182e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001832:	2300      	movs	r3, #0
 8001834:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001838:	2300      	movs	r3, #0
 800183a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800183e:	2300      	movs	r3, #0
 8001840:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001844:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001848:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800184a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800184e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001850:	2300      	movs	r3, #0
 8001852:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001856:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800185a:	4619      	mov	r1, r3
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7ff fe7f 	bl	8001560 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001862:	2301      	movs	r3, #1
 8001864:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001866:	2301      	movs	r3, #1
 8001868:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800186a:	2301      	movs	r3, #1
 800186c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001870:	2301      	movs	r3, #1
 8001872:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001874:	2300      	movs	r3, #0
 8001876:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001878:	2300      	movs	r3, #0
 800187a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800187e:	2300      	movs	r3, #0
 8001880:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001884:	2300      	movs	r3, #0
 8001886:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001888:	2301      	movs	r3, #1
 800188a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800188e:	2301      	movs	r3, #1
 8001890:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001892:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001896:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001898:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800189c:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800189e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018a2:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80018a4:	2301      	movs	r3, #1
 80018a6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80018aa:	2300      	movs	r3, #0
 80018ac:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80018ae:	2300      	movs	r3, #0
 80018b0:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80018b2:	f107 0308 	add.w	r3, r7, #8
 80018b6:	4619      	mov	r1, r3
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f7ff ff05 	bl	80016c8 <ETH_SetDMAConfig>
}
 80018be:	bf00      	nop
 80018c0:	3798      	adds	r7, #152	@ 0x98
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
	...

080018c8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b087      	sub	sp, #28
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3305      	adds	r3, #5
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	021b      	lsls	r3, r3, #8
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	3204      	adds	r2, #4
 80018e0:	7812      	ldrb	r2, [r2, #0]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80018e6:	68ba      	ldr	r2, [r7, #8]
 80018e8:	4b11      	ldr	r3, [pc, #68]	@ (8001930 <ETH_MACAddressConfig+0x68>)
 80018ea:	4413      	add	r3, r2
 80018ec:	461a      	mov	r2, r3
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	3303      	adds	r3, #3
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	061a      	lsls	r2, r3, #24
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	3302      	adds	r3, #2
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	041b      	lsls	r3, r3, #16
 8001902:	431a      	orrs	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3301      	adds	r3, #1
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	021b      	lsls	r3, r3, #8
 800190c:	4313      	orrs	r3, r2
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	7812      	ldrb	r2, [r2, #0]
 8001912:	4313      	orrs	r3, r2
 8001914:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	4b06      	ldr	r3, [pc, #24]	@ (8001934 <ETH_MACAddressConfig+0x6c>)
 800191a:	4413      	add	r3, r2
 800191c:	461a      	mov	r2, r3
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	6013      	str	r3, [r2, #0]
}
 8001922:	bf00      	nop
 8001924:	371c      	adds	r7, #28
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	40028040 	.word	0x40028040
 8001934:	40028044 	.word	0x40028044

08001938 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	e03e      	b.n	80019c4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	68d9      	ldr	r1, [r3, #12]
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	440b      	add	r3, r1
 8001956:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	2200      	movs	r2, #0
 8001962:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	2200      	movs	r2, #0
 8001968:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	2200      	movs	r2, #0
 800196e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001970:	68b9      	ldr	r1, [r7, #8]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	3206      	adds	r2, #6
 8001978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2b02      	cmp	r3, #2
 800198c:	d80c      	bhi.n	80019a8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68d9      	ldr	r1, [r3, #12]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	1c5a      	adds	r2, r3, #1
 8001996:	4613      	mov	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	4413      	add	r3, r2
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	440b      	add	r3, r1
 80019a0:	461a      	mov	r2, r3
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	e004      	b.n	80019b2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	461a      	mov	r2, r3
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	3301      	adds	r3, #1
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2b03      	cmp	r3, #3
 80019c8:	d9bd      	bls.n	8001946 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68da      	ldr	r2, [r3, #12]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019dc:	611a      	str	r2, [r3, #16]
}
 80019de:	bf00      	nop
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b085      	sub	sp, #20
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80019f2:	2300      	movs	r3, #0
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	e048      	b.n	8001a8a <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6919      	ldr	r1, [r3, #16]
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	4613      	mov	r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4413      	add	r3, r2
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	440b      	add	r3, r1
 8001a08:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	2200      	movs	r2, #0
 8001a14:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	2200      	movs	r2, #0
 8001a26:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001a34:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001a4e:	68b9      	ldr	r1, [r7, #8]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	3212      	adds	r2, #18
 8001a56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d80c      	bhi.n	8001a7a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6919      	ldr	r1, [r3, #16]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	1c5a      	adds	r2, r3, #1
 8001a68:	4613      	mov	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	440b      	add	r3, r1
 8001a72:	461a      	mov	r2, r3
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	60da      	str	r2, [r3, #12]
 8001a78:	e004      	b.n	8001a84 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	3301      	adds	r3, #1
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2b03      	cmp	r3, #3
 8001a8e:	d9b3      	bls.n	80019f8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	691a      	ldr	r2, [r3, #16]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001aba:	60da      	str	r2, [r3, #12]
}
 8001abc:	bf00      	nop
 8001abe:	3714      	adds	r7, #20
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b089      	sub	sp, #36	@ 0x24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61fb      	str	r3, [r7, #28]
 8001ae2:	e177      	b.n	8001dd4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	4013      	ands	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	f040 8166 	bne.w	8001dce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d005      	beq.n	8001b1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d130      	bne.n	8001b7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	2203      	movs	r2, #3
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	68da      	ldr	r2, [r3, #12]
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b50:	2201      	movs	r2, #1
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	091b      	lsrs	r3, r3, #4
 8001b66:	f003 0201 	and.w	r2, r3, #1
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 0303 	and.w	r3, r3, #3
 8001b84:	2b03      	cmp	r3, #3
 8001b86:	d017      	beq.n	8001bb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	2203      	movs	r2, #3
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 0303 	and.w	r3, r3, #3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d123      	bne.n	8001c0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	08da      	lsrs	r2, r3, #3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3208      	adds	r2, #8
 8001bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	f003 0307 	and.w	r3, r3, #7
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	220f      	movs	r2, #15
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	691a      	ldr	r2, [r3, #16]
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	08da      	lsrs	r2, r3, #3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	3208      	adds	r2, #8
 8001c06:	69b9      	ldr	r1, [r7, #24]
 8001c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	2203      	movs	r2, #3
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 0203 	and.w	r2, r3, #3
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f000 80c0 	beq.w	8001dce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	4b66      	ldr	r3, [pc, #408]	@ (8001dec <HAL_GPIO_Init+0x324>)
 8001c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c56:	4a65      	ldr	r2, [pc, #404]	@ (8001dec <HAL_GPIO_Init+0x324>)
 8001c58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c5e:	4b63      	ldr	r3, [pc, #396]	@ (8001dec <HAL_GPIO_Init+0x324>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c6a:	4a61      	ldr	r2, [pc, #388]	@ (8001df0 <HAL_GPIO_Init+0x328>)
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	089b      	lsrs	r3, r3, #2
 8001c70:	3302      	adds	r3, #2
 8001c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	f003 0303 	and.w	r3, r3, #3
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	220f      	movs	r2, #15
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43db      	mvns	r3, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a58      	ldr	r2, [pc, #352]	@ (8001df4 <HAL_GPIO_Init+0x32c>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d037      	beq.n	8001d06 <HAL_GPIO_Init+0x23e>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a57      	ldr	r2, [pc, #348]	@ (8001df8 <HAL_GPIO_Init+0x330>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d031      	beq.n	8001d02 <HAL_GPIO_Init+0x23a>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a56      	ldr	r2, [pc, #344]	@ (8001dfc <HAL_GPIO_Init+0x334>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d02b      	beq.n	8001cfe <HAL_GPIO_Init+0x236>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a55      	ldr	r2, [pc, #340]	@ (8001e00 <HAL_GPIO_Init+0x338>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d025      	beq.n	8001cfa <HAL_GPIO_Init+0x232>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a54      	ldr	r2, [pc, #336]	@ (8001e04 <HAL_GPIO_Init+0x33c>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d01f      	beq.n	8001cf6 <HAL_GPIO_Init+0x22e>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a53      	ldr	r2, [pc, #332]	@ (8001e08 <HAL_GPIO_Init+0x340>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d019      	beq.n	8001cf2 <HAL_GPIO_Init+0x22a>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a52      	ldr	r2, [pc, #328]	@ (8001e0c <HAL_GPIO_Init+0x344>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d013      	beq.n	8001cee <HAL_GPIO_Init+0x226>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a51      	ldr	r2, [pc, #324]	@ (8001e10 <HAL_GPIO_Init+0x348>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d00d      	beq.n	8001cea <HAL_GPIO_Init+0x222>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a50      	ldr	r2, [pc, #320]	@ (8001e14 <HAL_GPIO_Init+0x34c>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d007      	beq.n	8001ce6 <HAL_GPIO_Init+0x21e>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a4f      	ldr	r2, [pc, #316]	@ (8001e18 <HAL_GPIO_Init+0x350>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d101      	bne.n	8001ce2 <HAL_GPIO_Init+0x21a>
 8001cde:	2309      	movs	r3, #9
 8001ce0:	e012      	b.n	8001d08 <HAL_GPIO_Init+0x240>
 8001ce2:	230a      	movs	r3, #10
 8001ce4:	e010      	b.n	8001d08 <HAL_GPIO_Init+0x240>
 8001ce6:	2308      	movs	r3, #8
 8001ce8:	e00e      	b.n	8001d08 <HAL_GPIO_Init+0x240>
 8001cea:	2307      	movs	r3, #7
 8001cec:	e00c      	b.n	8001d08 <HAL_GPIO_Init+0x240>
 8001cee:	2306      	movs	r3, #6
 8001cf0:	e00a      	b.n	8001d08 <HAL_GPIO_Init+0x240>
 8001cf2:	2305      	movs	r3, #5
 8001cf4:	e008      	b.n	8001d08 <HAL_GPIO_Init+0x240>
 8001cf6:	2304      	movs	r3, #4
 8001cf8:	e006      	b.n	8001d08 <HAL_GPIO_Init+0x240>
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e004      	b.n	8001d08 <HAL_GPIO_Init+0x240>
 8001cfe:	2302      	movs	r3, #2
 8001d00:	e002      	b.n	8001d08 <HAL_GPIO_Init+0x240>
 8001d02:	2301      	movs	r3, #1
 8001d04:	e000      	b.n	8001d08 <HAL_GPIO_Init+0x240>
 8001d06:	2300      	movs	r3, #0
 8001d08:	69fa      	ldr	r2, [r7, #28]
 8001d0a:	f002 0203 	and.w	r2, r2, #3
 8001d0e:	0092      	lsls	r2, r2, #2
 8001d10:	4093      	lsls	r3, r2
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d18:	4935      	ldr	r1, [pc, #212]	@ (8001df0 <HAL_GPIO_Init+0x328>)
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	089b      	lsrs	r3, r3, #2
 8001d1e:	3302      	adds	r3, #2
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d26:	4b3d      	ldr	r3, [pc, #244]	@ (8001e1c <HAL_GPIO_Init+0x354>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4013      	ands	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d4a:	4a34      	ldr	r2, [pc, #208]	@ (8001e1c <HAL_GPIO_Init+0x354>)
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d50:	4b32      	ldr	r3, [pc, #200]	@ (8001e1c <HAL_GPIO_Init+0x354>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d74:	4a29      	ldr	r2, [pc, #164]	@ (8001e1c <HAL_GPIO_Init+0x354>)
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d7a:	4b28      	ldr	r3, [pc, #160]	@ (8001e1c <HAL_GPIO_Init+0x354>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	43db      	mvns	r3, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4013      	ands	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d9e:	4a1f      	ldr	r2, [pc, #124]	@ (8001e1c <HAL_GPIO_Init+0x354>)
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001da4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e1c <HAL_GPIO_Init+0x354>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	43db      	mvns	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d003      	beq.n	8001dc8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dc8:	4a14      	ldr	r2, [pc, #80]	@ (8001e1c <HAL_GPIO_Init+0x354>)
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	61fb      	str	r3, [r7, #28]
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	2b0f      	cmp	r3, #15
 8001dd8:	f67f ae84 	bls.w	8001ae4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ddc:	bf00      	nop
 8001dde:	bf00      	nop
 8001de0:	3724      	adds	r7, #36	@ 0x24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40013800 	.word	0x40013800
 8001df4:	40020000 	.word	0x40020000
 8001df8:	40020400 	.word	0x40020400
 8001dfc:	40020800 	.word	0x40020800
 8001e00:	40020c00 	.word	0x40020c00
 8001e04:	40021000 	.word	0x40021000
 8001e08:	40021400 	.word	0x40021400
 8001e0c:	40021800 	.word	0x40021800
 8001e10:	40021c00 	.word	0x40021c00
 8001e14:	40022000 	.word	0x40022000
 8001e18:	40022400 	.word	0x40022400
 8001e1c:	40013c00 	.word	0x40013c00

08001e20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	807b      	strh	r3, [r7, #2]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e30:	787b      	ldrb	r3, [r7, #1]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e36:	887a      	ldrh	r2, [r7, #2]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e3c:	e003      	b.n	8001e46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e3e:	887b      	ldrh	r3, [r7, #2]
 8001e40:	041a      	lsls	r2, r3, #16
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	619a      	str	r2, [r3, #24]
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr

08001e52 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b086      	sub	sp, #24
 8001e56:	af02      	add	r7, sp, #8
 8001e58:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e101      	b.n	8002068 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d106      	bne.n	8001e84 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7fe ffb6 	bl	8000df0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2203      	movs	r2, #3
 8001e88:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e92:	d102      	bne.n	8001e9a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f001 fcbc 	bl	800381c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6818      	ldr	r0, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	7c1a      	ldrb	r2, [r3, #16]
 8001eac:	f88d 2000 	strb.w	r2, [sp]
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eb4:	f001 fc4e 	bl	8003754 <USB_CoreInit>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d005      	beq.n	8001eca <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e0ce      	b.n	8002068 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2100      	movs	r1, #0
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f001 fcb4 	bl	800383e <USB_SetCurrentMode>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d005      	beq.n	8001ee8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2202      	movs	r2, #2
 8001ee0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e0bf      	b.n	8002068 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ee8:	2300      	movs	r3, #0
 8001eea:	73fb      	strb	r3, [r7, #15]
 8001eec:	e04a      	b.n	8001f84 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001eee:	7bfa      	ldrb	r2, [r7, #15]
 8001ef0:	6879      	ldr	r1, [r7, #4]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	4413      	add	r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	440b      	add	r3, r1
 8001efc:	3315      	adds	r3, #21
 8001efe:	2201      	movs	r2, #1
 8001f00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f02:	7bfa      	ldrb	r2, [r7, #15]
 8001f04:	6879      	ldr	r1, [r7, #4]
 8001f06:	4613      	mov	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	4413      	add	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	440b      	add	r3, r1
 8001f10:	3314      	adds	r3, #20
 8001f12:	7bfa      	ldrb	r2, [r7, #15]
 8001f14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f16:	7bfa      	ldrb	r2, [r7, #15]
 8001f18:	7bfb      	ldrb	r3, [r7, #15]
 8001f1a:	b298      	uxth	r0, r3
 8001f1c:	6879      	ldr	r1, [r7, #4]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	4413      	add	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	440b      	add	r3, r1
 8001f28:	332e      	adds	r3, #46	@ 0x2e
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f2e:	7bfa      	ldrb	r2, [r7, #15]
 8001f30:	6879      	ldr	r1, [r7, #4]
 8001f32:	4613      	mov	r3, r2
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	4413      	add	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	440b      	add	r3, r1
 8001f3c:	3318      	adds	r3, #24
 8001f3e:	2200      	movs	r2, #0
 8001f40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f42:	7bfa      	ldrb	r2, [r7, #15]
 8001f44:	6879      	ldr	r1, [r7, #4]
 8001f46:	4613      	mov	r3, r2
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4413      	add	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	440b      	add	r3, r1
 8001f50:	331c      	adds	r3, #28
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f56:	7bfa      	ldrb	r2, [r7, #15]
 8001f58:	6879      	ldr	r1, [r7, #4]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	4413      	add	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	440b      	add	r3, r1
 8001f64:	3320      	adds	r3, #32
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f6a:	7bfa      	ldrb	r2, [r7, #15]
 8001f6c:	6879      	ldr	r1, [r7, #4]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	4413      	add	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	440b      	add	r3, r1
 8001f78:	3324      	adds	r3, #36	@ 0x24
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f7e:	7bfb      	ldrb	r3, [r7, #15]
 8001f80:	3301      	adds	r3, #1
 8001f82:	73fb      	strb	r3, [r7, #15]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	791b      	ldrb	r3, [r3, #4]
 8001f88:	7bfa      	ldrb	r2, [r7, #15]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d3af      	bcc.n	8001eee <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f8e:	2300      	movs	r3, #0
 8001f90:	73fb      	strb	r3, [r7, #15]
 8001f92:	e044      	b.n	800201e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f94:	7bfa      	ldrb	r2, [r7, #15]
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001faa:	7bfa      	ldrb	r2, [r7, #15]
 8001fac:	6879      	ldr	r1, [r7, #4]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	4413      	add	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	440b      	add	r3, r1
 8001fb8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001fbc:	7bfa      	ldrb	r2, [r7, #15]
 8001fbe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001fc0:	7bfa      	ldrb	r2, [r7, #15]
 8001fc2:	6879      	ldr	r1, [r7, #4]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	4413      	add	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	440b      	add	r3, r1
 8001fce:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001fd6:	7bfa      	ldrb	r2, [r7, #15]
 8001fd8:	6879      	ldr	r1, [r7, #4]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	4413      	add	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	440b      	add	r3, r1
 8001fe4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001fec:	7bfa      	ldrb	r2, [r7, #15]
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	4413      	add	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002002:	7bfa      	ldrb	r2, [r7, #15]
 8002004:	6879      	ldr	r1, [r7, #4]
 8002006:	4613      	mov	r3, r2
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	4413      	add	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	440b      	add	r3, r1
 8002010:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002018:	7bfb      	ldrb	r3, [r7, #15]
 800201a:	3301      	adds	r3, #1
 800201c:	73fb      	strb	r3, [r7, #15]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	791b      	ldrb	r3, [r3, #4]
 8002022:	7bfa      	ldrb	r2, [r7, #15]
 8002024:	429a      	cmp	r2, r3
 8002026:	d3b5      	bcc.n	8001f94 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6818      	ldr	r0, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	7c1a      	ldrb	r2, [r3, #16]
 8002030:	f88d 2000 	strb.w	r2, [sp]
 8002034:	3304      	adds	r3, #4
 8002036:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002038:	f001 fc4e 	bl	80038d8 <USB_DevInit>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d005      	beq.n	800204e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2202      	movs	r2, #2
 8002046:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e00c      	b.n	8002068 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f001 fe16 	bl	8003c92 <USB_DevDisconnect>

  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e267      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b00      	cmp	r3, #0
 800208c:	d075      	beq.n	800217a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800208e:	4b88      	ldr	r3, [pc, #544]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 030c 	and.w	r3, r3, #12
 8002096:	2b04      	cmp	r3, #4
 8002098:	d00c      	beq.n	80020b4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800209a:	4b85      	ldr	r3, [pc, #532]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80020a2:	2b08      	cmp	r3, #8
 80020a4:	d112      	bne.n	80020cc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020a6:	4b82      	ldr	r3, [pc, #520]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80020b2:	d10b      	bne.n	80020cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b4:	4b7e      	ldr	r3, [pc, #504]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d05b      	beq.n	8002178 <HAL_RCC_OscConfig+0x108>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d157      	bne.n	8002178 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e242      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020d4:	d106      	bne.n	80020e4 <HAL_RCC_OscConfig+0x74>
 80020d6:	4b76      	ldr	r3, [pc, #472]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a75      	ldr	r2, [pc, #468]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 80020dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	e01d      	b.n	8002120 <HAL_RCC_OscConfig+0xb0>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020ec:	d10c      	bne.n	8002108 <HAL_RCC_OscConfig+0x98>
 80020ee:	4b70      	ldr	r3, [pc, #448]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a6f      	ldr	r2, [pc, #444]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 80020f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020f8:	6013      	str	r3, [r2, #0]
 80020fa:	4b6d      	ldr	r3, [pc, #436]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a6c      	ldr	r2, [pc, #432]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 8002100:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002104:	6013      	str	r3, [r2, #0]
 8002106:	e00b      	b.n	8002120 <HAL_RCC_OscConfig+0xb0>
 8002108:	4b69      	ldr	r3, [pc, #420]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a68      	ldr	r2, [pc, #416]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 800210e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002112:	6013      	str	r3, [r2, #0]
 8002114:	4b66      	ldr	r3, [pc, #408]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a65      	ldr	r2, [pc, #404]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 800211a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800211e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d013      	beq.n	8002150 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002128:	f7ff f86c 	bl	8001204 <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002130:	f7ff f868 	bl	8001204 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b64      	cmp	r3, #100	@ 0x64
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e207      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002142:	4b5b      	ldr	r3, [pc, #364]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d0f0      	beq.n	8002130 <HAL_RCC_OscConfig+0xc0>
 800214e:	e014      	b.n	800217a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002150:	f7ff f858 	bl	8001204 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002158:	f7ff f854 	bl	8001204 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b64      	cmp	r3, #100	@ 0x64
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e1f3      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800216a:	4b51      	ldr	r3, [pc, #324]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f0      	bne.n	8002158 <HAL_RCC_OscConfig+0xe8>
 8002176:	e000      	b.n	800217a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002178:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d063      	beq.n	800224e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002186:	4b4a      	ldr	r3, [pc, #296]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f003 030c 	and.w	r3, r3, #12
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00b      	beq.n	80021aa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002192:	4b47      	ldr	r3, [pc, #284]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800219a:	2b08      	cmp	r3, #8
 800219c:	d11c      	bne.n	80021d8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800219e:	4b44      	ldr	r3, [pc, #272]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d116      	bne.n	80021d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021aa:	4b41      	ldr	r3, [pc, #260]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d005      	beq.n	80021c2 <HAL_RCC_OscConfig+0x152>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d001      	beq.n	80021c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e1c7      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c2:	4b3b      	ldr	r3, [pc, #236]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	4937      	ldr	r1, [pc, #220]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021d6:	e03a      	b.n	800224e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d020      	beq.n	8002222 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021e0:	4b34      	ldr	r3, [pc, #208]	@ (80022b4 <HAL_RCC_OscConfig+0x244>)
 80021e2:	2201      	movs	r2, #1
 80021e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e6:	f7ff f80d 	bl	8001204 <HAL_GetTick>
 80021ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ec:	e008      	b.n	8002200 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ee:	f7ff f809 	bl	8001204 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e1a8      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002200:	4b2b      	ldr	r3, [pc, #172]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d0f0      	beq.n	80021ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800220c:	4b28      	ldr	r3, [pc, #160]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	4925      	ldr	r1, [pc, #148]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 800221c:	4313      	orrs	r3, r2
 800221e:	600b      	str	r3, [r1, #0]
 8002220:	e015      	b.n	800224e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002222:	4b24      	ldr	r3, [pc, #144]	@ (80022b4 <HAL_RCC_OscConfig+0x244>)
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002228:	f7fe ffec 	bl	8001204 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002230:	f7fe ffe8 	bl	8001204 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e187      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002242:	4b1b      	ldr	r3, [pc, #108]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1f0      	bne.n	8002230 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0308 	and.w	r3, r3, #8
 8002256:	2b00      	cmp	r3, #0
 8002258:	d036      	beq.n	80022c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d016      	beq.n	8002290 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002262:	4b15      	ldr	r3, [pc, #84]	@ (80022b8 <HAL_RCC_OscConfig+0x248>)
 8002264:	2201      	movs	r2, #1
 8002266:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002268:	f7fe ffcc 	bl	8001204 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002270:	f7fe ffc8 	bl	8001204 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e167      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002282:	4b0b      	ldr	r3, [pc, #44]	@ (80022b0 <HAL_RCC_OscConfig+0x240>)
 8002284:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0f0      	beq.n	8002270 <HAL_RCC_OscConfig+0x200>
 800228e:	e01b      	b.n	80022c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002290:	4b09      	ldr	r3, [pc, #36]	@ (80022b8 <HAL_RCC_OscConfig+0x248>)
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002296:	f7fe ffb5 	bl	8001204 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800229c:	e00e      	b.n	80022bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800229e:	f7fe ffb1 	bl	8001204 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d907      	bls.n	80022bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e150      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
 80022b0:	40023800 	.word	0x40023800
 80022b4:	42470000 	.word	0x42470000
 80022b8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022bc:	4b88      	ldr	r3, [pc, #544]	@ (80024e0 <HAL_RCC_OscConfig+0x470>)
 80022be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1ea      	bne.n	800229e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 8097 	beq.w	8002404 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022d6:	2300      	movs	r3, #0
 80022d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022da:	4b81      	ldr	r3, [pc, #516]	@ (80024e0 <HAL_RCC_OscConfig+0x470>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10f      	bne.n	8002306 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	60bb      	str	r3, [r7, #8]
 80022ea:	4b7d      	ldr	r3, [pc, #500]	@ (80024e0 <HAL_RCC_OscConfig+0x470>)
 80022ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ee:	4a7c      	ldr	r2, [pc, #496]	@ (80024e0 <HAL_RCC_OscConfig+0x470>)
 80022f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80022f6:	4b7a      	ldr	r3, [pc, #488]	@ (80024e0 <HAL_RCC_OscConfig+0x470>)
 80022f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022fe:	60bb      	str	r3, [r7, #8]
 8002300:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002302:	2301      	movs	r3, #1
 8002304:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002306:	4b77      	ldr	r3, [pc, #476]	@ (80024e4 <HAL_RCC_OscConfig+0x474>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800230e:	2b00      	cmp	r3, #0
 8002310:	d118      	bne.n	8002344 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002312:	4b74      	ldr	r3, [pc, #464]	@ (80024e4 <HAL_RCC_OscConfig+0x474>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a73      	ldr	r2, [pc, #460]	@ (80024e4 <HAL_RCC_OscConfig+0x474>)
 8002318:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800231c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800231e:	f7fe ff71 	bl	8001204 <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002324:	e008      	b.n	8002338 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002326:	f7fe ff6d 	bl	8001204 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e10c      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002338:	4b6a      	ldr	r3, [pc, #424]	@ (80024e4 <HAL_RCC_OscConfig+0x474>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0f0      	beq.n	8002326 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d106      	bne.n	800235a <HAL_RCC_OscConfig+0x2ea>
 800234c:	4b64      	ldr	r3, [pc, #400]	@ (80024e0 <HAL_RCC_OscConfig+0x470>)
 800234e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002350:	4a63      	ldr	r2, [pc, #396]	@ (80024e0 <HAL_RCC_OscConfig+0x470>)
 8002352:	f043 0301 	orr.w	r3, r3, #1
 8002356:	6713      	str	r3, [r2, #112]	@ 0x70
 8002358:	e01c      	b.n	8002394 <HAL_RCC_OscConfig+0x324>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	2b05      	cmp	r3, #5
 8002360:	d10c      	bne.n	800237c <HAL_RCC_OscConfig+0x30c>
 8002362:	4b5f      	ldr	r3, [pc, #380]	@ (80024e0 <HAL_RCC_OscConfig+0x470>)
 8002364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002366:	4a5e      	ldr	r2, [pc, #376]	@ (80024e0 <HAL_RCC_OscConfig+0x470>)
 8002368:	f043 0304 	orr.w	r3, r3, #4
 800236c:	6713      	str	r3, [r2, #112]	@ 0x70
 800236e:	4b5c      	ldr	r3, [pc, #368]	@ (80024e0 <HAL_RCC_OscConfig+0x470>)
 8002370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002372:	4a5b      	ldr	r2, [pc, #364]	@ (80024e0 <HAL_RCC_OscConfig+0x470>)
 8002374:	f043 0301 	orr.w	r3, r3, #1
 8002378:	6713      	str	r3, [r2, #112]	@ 0x70
 800237a:	e00b      	b.n	8002394 <HAL_RCC_OscConfig+0x324>
 800237c:	4b58      	ldr	r3, [pc, #352]	@ (80024e0 <HAL_RCC_OscConfig+0x470>)
 800237e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002380:	4a57      	ldr	r2, [pc, #348]	@ (80024e0 <HAL_RCC_OscConfig+0x470>)
 8002382:	f023 0301 	bic.w	r3, r3, #1
 8002386:	6713      	str	r3, [r2, #112]	@ 0x70
 8002388:	4b55      	ldr	r3, [pc, #340]	@ (80024e0 <HAL_RCC_OscConfig+0x470>)
 800238a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800238c:	4a54      	ldr	r2, [pc, #336]	@ (80024e0 <HAL_RCC_OscConfig+0x470>)
 800238e:	f023 0304 	bic.w	r3, r3, #4
 8002392:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d015      	beq.n	80023c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800239c:	f7fe ff32 	bl	8001204 <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a2:	e00a      	b.n	80023ba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a4:	f7fe ff2e 	bl	8001204 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e0cb      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ba:	4b49      	ldr	r3, [pc, #292]	@ (80024e0 <HAL_RCC_OscConfig+0x470>)
 80023bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0ee      	beq.n	80023a4 <HAL_RCC_OscConfig+0x334>
 80023c6:	e014      	b.n	80023f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c8:	f7fe ff1c 	bl	8001204 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ce:	e00a      	b.n	80023e6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023d0:	f7fe ff18 	bl	8001204 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023de:	4293      	cmp	r3, r2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e0b5      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023e6:	4b3e      	ldr	r3, [pc, #248]	@ (80024e0 <HAL_RCC_OscConfig+0x470>)
 80023e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1ee      	bne.n	80023d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023f2:	7dfb      	ldrb	r3, [r7, #23]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d105      	bne.n	8002404 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023f8:	4b39      	ldr	r3, [pc, #228]	@ (80024e0 <HAL_RCC_OscConfig+0x470>)
 80023fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fc:	4a38      	ldr	r2, [pc, #224]	@ (80024e0 <HAL_RCC_OscConfig+0x470>)
 80023fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002402:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	2b00      	cmp	r3, #0
 800240a:	f000 80a1 	beq.w	8002550 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800240e:	4b34      	ldr	r3, [pc, #208]	@ (80024e0 <HAL_RCC_OscConfig+0x470>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 030c 	and.w	r3, r3, #12
 8002416:	2b08      	cmp	r3, #8
 8002418:	d05c      	beq.n	80024d4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	2b02      	cmp	r3, #2
 8002420:	d141      	bne.n	80024a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002422:	4b31      	ldr	r3, [pc, #196]	@ (80024e8 <HAL_RCC_OscConfig+0x478>)
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002428:	f7fe feec 	bl	8001204 <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002430:	f7fe fee8 	bl	8001204 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e087      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002442:	4b27      	ldr	r3, [pc, #156]	@ (80024e0 <HAL_RCC_OscConfig+0x470>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1f0      	bne.n	8002430 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69da      	ldr	r2, [r3, #28]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	431a      	orrs	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245c:	019b      	lsls	r3, r3, #6
 800245e:	431a      	orrs	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002464:	085b      	lsrs	r3, r3, #1
 8002466:	3b01      	subs	r3, #1
 8002468:	041b      	lsls	r3, r3, #16
 800246a:	431a      	orrs	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002470:	061b      	lsls	r3, r3, #24
 8002472:	491b      	ldr	r1, [pc, #108]	@ (80024e0 <HAL_RCC_OscConfig+0x470>)
 8002474:	4313      	orrs	r3, r2
 8002476:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002478:	4b1b      	ldr	r3, [pc, #108]	@ (80024e8 <HAL_RCC_OscConfig+0x478>)
 800247a:	2201      	movs	r2, #1
 800247c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247e:	f7fe fec1 	bl	8001204 <HAL_GetTick>
 8002482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002484:	e008      	b.n	8002498 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002486:	f7fe febd 	bl	8001204 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e05c      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002498:	4b11      	ldr	r3, [pc, #68]	@ (80024e0 <HAL_RCC_OscConfig+0x470>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d0f0      	beq.n	8002486 <HAL_RCC_OscConfig+0x416>
 80024a4:	e054      	b.n	8002550 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a6:	4b10      	ldr	r3, [pc, #64]	@ (80024e8 <HAL_RCC_OscConfig+0x478>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ac:	f7fe feaa 	bl	8001204 <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b4:	f7fe fea6 	bl	8001204 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e045      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024c6:	4b06      	ldr	r3, [pc, #24]	@ (80024e0 <HAL_RCC_OscConfig+0x470>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f0      	bne.n	80024b4 <HAL_RCC_OscConfig+0x444>
 80024d2:	e03d      	b.n	8002550 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d107      	bne.n	80024ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e038      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
 80024e0:	40023800 	.word	0x40023800
 80024e4:	40007000 	.word	0x40007000
 80024e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024ec:	4b1b      	ldr	r3, [pc, #108]	@ (800255c <HAL_RCC_OscConfig+0x4ec>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d028      	beq.n	800254c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002504:	429a      	cmp	r2, r3
 8002506:	d121      	bne.n	800254c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002512:	429a      	cmp	r2, r3
 8002514:	d11a      	bne.n	800254c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800251c:	4013      	ands	r3, r2
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002522:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002524:	4293      	cmp	r3, r2
 8002526:	d111      	bne.n	800254c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002532:	085b      	lsrs	r3, r3, #1
 8002534:	3b01      	subs	r3, #1
 8002536:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002538:	429a      	cmp	r2, r3
 800253a:	d107      	bne.n	800254c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002546:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002548:	429a      	cmp	r2, r3
 800254a:	d001      	beq.n	8002550 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e000      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40023800 	.word	0x40023800

08002560 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d101      	bne.n	8002574 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e0cc      	b.n	800270e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002574:	4b68      	ldr	r3, [pc, #416]	@ (8002718 <HAL_RCC_ClockConfig+0x1b8>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 030f 	and.w	r3, r3, #15
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	429a      	cmp	r2, r3
 8002580:	d90c      	bls.n	800259c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002582:	4b65      	ldr	r3, [pc, #404]	@ (8002718 <HAL_RCC_ClockConfig+0x1b8>)
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	b2d2      	uxtb	r2, r2
 8002588:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800258a:	4b63      	ldr	r3, [pc, #396]	@ (8002718 <HAL_RCC_ClockConfig+0x1b8>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	429a      	cmp	r2, r3
 8002596:	d001      	beq.n	800259c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e0b8      	b.n	800270e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d020      	beq.n	80025ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0304 	and.w	r3, r3, #4
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d005      	beq.n	80025c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025b4:	4b59      	ldr	r3, [pc, #356]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	4a58      	ldr	r2, [pc, #352]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80025ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80025be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0308 	and.w	r3, r3, #8
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d005      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025cc:	4b53      	ldr	r3, [pc, #332]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	4a52      	ldr	r2, [pc, #328]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80025d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80025d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025d8:	4b50      	ldr	r3, [pc, #320]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	494d      	ldr	r1, [pc, #308]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d044      	beq.n	8002680 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d107      	bne.n	800260e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fe:	4b47      	ldr	r3, [pc, #284]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d119      	bne.n	800263e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e07f      	b.n	800270e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	2b02      	cmp	r3, #2
 8002614:	d003      	beq.n	800261e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800261a:	2b03      	cmp	r3, #3
 800261c:	d107      	bne.n	800262e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800261e:	4b3f      	ldr	r3, [pc, #252]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d109      	bne.n	800263e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e06f      	b.n	800270e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262e:	4b3b      	ldr	r3, [pc, #236]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e067      	b.n	800270e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800263e:	4b37      	ldr	r3, [pc, #220]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f023 0203 	bic.w	r2, r3, #3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	4934      	ldr	r1, [pc, #208]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 800264c:	4313      	orrs	r3, r2
 800264e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002650:	f7fe fdd8 	bl	8001204 <HAL_GetTick>
 8002654:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002656:	e00a      	b.n	800266e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002658:	f7fe fdd4 	bl	8001204 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002666:	4293      	cmp	r3, r2
 8002668:	d901      	bls.n	800266e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e04f      	b.n	800270e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266e:	4b2b      	ldr	r3, [pc, #172]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 020c 	and.w	r2, r3, #12
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	429a      	cmp	r2, r3
 800267e:	d1eb      	bne.n	8002658 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002680:	4b25      	ldr	r3, [pc, #148]	@ (8002718 <HAL_RCC_ClockConfig+0x1b8>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 030f 	and.w	r3, r3, #15
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	429a      	cmp	r2, r3
 800268c:	d20c      	bcs.n	80026a8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268e:	4b22      	ldr	r3, [pc, #136]	@ (8002718 <HAL_RCC_ClockConfig+0x1b8>)
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002696:	4b20      	ldr	r3, [pc, #128]	@ (8002718 <HAL_RCC_ClockConfig+0x1b8>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 030f 	and.w	r3, r3, #15
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d001      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e032      	b.n	800270e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d008      	beq.n	80026c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026b4:	4b19      	ldr	r3, [pc, #100]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	4916      	ldr	r1, [pc, #88]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d009      	beq.n	80026e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026d2:	4b12      	ldr	r3, [pc, #72]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	490e      	ldr	r1, [pc, #56]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026e6:	f000 f821 	bl	800272c <HAL_RCC_GetSysClockFreq>
 80026ea:	4602      	mov	r2, r0
 80026ec:	4b0b      	ldr	r3, [pc, #44]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	091b      	lsrs	r3, r3, #4
 80026f2:	f003 030f 	and.w	r3, r3, #15
 80026f6:	490a      	ldr	r1, [pc, #40]	@ (8002720 <HAL_RCC_ClockConfig+0x1c0>)
 80026f8:	5ccb      	ldrb	r3, [r1, r3]
 80026fa:	fa22 f303 	lsr.w	r3, r2, r3
 80026fe:	4a09      	ldr	r2, [pc, #36]	@ (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 8002700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002702:	4b09      	ldr	r3, [pc, #36]	@ (8002728 <HAL_RCC_ClockConfig+0x1c8>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f7fe fbcc 	bl	8000ea4 <HAL_InitTick>

  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40023c00 	.word	0x40023c00
 800271c:	40023800 	.word	0x40023800
 8002720:	080067a8 	.word	0x080067a8
 8002724:	20000000 	.word	0x20000000
 8002728:	20000004 	.word	0x20000004

0800272c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800272c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002730:	b094      	sub	sp, #80	@ 0x50
 8002732:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002734:	2300      	movs	r3, #0
 8002736:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002738:	2300      	movs	r3, #0
 800273a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800273c:	2300      	movs	r3, #0
 800273e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002740:	2300      	movs	r3, #0
 8002742:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002744:	4b79      	ldr	r3, [pc, #484]	@ (800292c <HAL_RCC_GetSysClockFreq+0x200>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f003 030c 	and.w	r3, r3, #12
 800274c:	2b08      	cmp	r3, #8
 800274e:	d00d      	beq.n	800276c <HAL_RCC_GetSysClockFreq+0x40>
 8002750:	2b08      	cmp	r3, #8
 8002752:	f200 80e1 	bhi.w	8002918 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002756:	2b00      	cmp	r3, #0
 8002758:	d002      	beq.n	8002760 <HAL_RCC_GetSysClockFreq+0x34>
 800275a:	2b04      	cmp	r3, #4
 800275c:	d003      	beq.n	8002766 <HAL_RCC_GetSysClockFreq+0x3a>
 800275e:	e0db      	b.n	8002918 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002760:	4b73      	ldr	r3, [pc, #460]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x204>)
 8002762:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002764:	e0db      	b.n	800291e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002766:	4b73      	ldr	r3, [pc, #460]	@ (8002934 <HAL_RCC_GetSysClockFreq+0x208>)
 8002768:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800276a:	e0d8      	b.n	800291e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800276c:	4b6f      	ldr	r3, [pc, #444]	@ (800292c <HAL_RCC_GetSysClockFreq+0x200>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002774:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002776:	4b6d      	ldr	r3, [pc, #436]	@ (800292c <HAL_RCC_GetSysClockFreq+0x200>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d063      	beq.n	800284a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002782:	4b6a      	ldr	r3, [pc, #424]	@ (800292c <HAL_RCC_GetSysClockFreq+0x200>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	099b      	lsrs	r3, r3, #6
 8002788:	2200      	movs	r2, #0
 800278a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800278c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800278e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002794:	633b      	str	r3, [r7, #48]	@ 0x30
 8002796:	2300      	movs	r3, #0
 8002798:	637b      	str	r3, [r7, #52]	@ 0x34
 800279a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800279e:	4622      	mov	r2, r4
 80027a0:	462b      	mov	r3, r5
 80027a2:	f04f 0000 	mov.w	r0, #0
 80027a6:	f04f 0100 	mov.w	r1, #0
 80027aa:	0159      	lsls	r1, r3, #5
 80027ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027b0:	0150      	lsls	r0, r2, #5
 80027b2:	4602      	mov	r2, r0
 80027b4:	460b      	mov	r3, r1
 80027b6:	4621      	mov	r1, r4
 80027b8:	1a51      	subs	r1, r2, r1
 80027ba:	6139      	str	r1, [r7, #16]
 80027bc:	4629      	mov	r1, r5
 80027be:	eb63 0301 	sbc.w	r3, r3, r1
 80027c2:	617b      	str	r3, [r7, #20]
 80027c4:	f04f 0200 	mov.w	r2, #0
 80027c8:	f04f 0300 	mov.w	r3, #0
 80027cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027d0:	4659      	mov	r1, fp
 80027d2:	018b      	lsls	r3, r1, #6
 80027d4:	4651      	mov	r1, sl
 80027d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027da:	4651      	mov	r1, sl
 80027dc:	018a      	lsls	r2, r1, #6
 80027de:	4651      	mov	r1, sl
 80027e0:	ebb2 0801 	subs.w	r8, r2, r1
 80027e4:	4659      	mov	r1, fp
 80027e6:	eb63 0901 	sbc.w	r9, r3, r1
 80027ea:	f04f 0200 	mov.w	r2, #0
 80027ee:	f04f 0300 	mov.w	r3, #0
 80027f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027fe:	4690      	mov	r8, r2
 8002800:	4699      	mov	r9, r3
 8002802:	4623      	mov	r3, r4
 8002804:	eb18 0303 	adds.w	r3, r8, r3
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	462b      	mov	r3, r5
 800280c:	eb49 0303 	adc.w	r3, r9, r3
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	f04f 0200 	mov.w	r2, #0
 8002816:	f04f 0300 	mov.w	r3, #0
 800281a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800281e:	4629      	mov	r1, r5
 8002820:	024b      	lsls	r3, r1, #9
 8002822:	4621      	mov	r1, r4
 8002824:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002828:	4621      	mov	r1, r4
 800282a:	024a      	lsls	r2, r1, #9
 800282c:	4610      	mov	r0, r2
 800282e:	4619      	mov	r1, r3
 8002830:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002832:	2200      	movs	r2, #0
 8002834:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002836:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002838:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800283c:	f7fd fd30 	bl	80002a0 <__aeabi_uldivmod>
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	4613      	mov	r3, r2
 8002846:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002848:	e058      	b.n	80028fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800284a:	4b38      	ldr	r3, [pc, #224]	@ (800292c <HAL_RCC_GetSysClockFreq+0x200>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	099b      	lsrs	r3, r3, #6
 8002850:	2200      	movs	r2, #0
 8002852:	4618      	mov	r0, r3
 8002854:	4611      	mov	r1, r2
 8002856:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800285a:	623b      	str	r3, [r7, #32]
 800285c:	2300      	movs	r3, #0
 800285e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002860:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002864:	4642      	mov	r2, r8
 8002866:	464b      	mov	r3, r9
 8002868:	f04f 0000 	mov.w	r0, #0
 800286c:	f04f 0100 	mov.w	r1, #0
 8002870:	0159      	lsls	r1, r3, #5
 8002872:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002876:	0150      	lsls	r0, r2, #5
 8002878:	4602      	mov	r2, r0
 800287a:	460b      	mov	r3, r1
 800287c:	4641      	mov	r1, r8
 800287e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002882:	4649      	mov	r1, r9
 8002884:	eb63 0b01 	sbc.w	fp, r3, r1
 8002888:	f04f 0200 	mov.w	r2, #0
 800288c:	f04f 0300 	mov.w	r3, #0
 8002890:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002894:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002898:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800289c:	ebb2 040a 	subs.w	r4, r2, sl
 80028a0:	eb63 050b 	sbc.w	r5, r3, fp
 80028a4:	f04f 0200 	mov.w	r2, #0
 80028a8:	f04f 0300 	mov.w	r3, #0
 80028ac:	00eb      	lsls	r3, r5, #3
 80028ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028b2:	00e2      	lsls	r2, r4, #3
 80028b4:	4614      	mov	r4, r2
 80028b6:	461d      	mov	r5, r3
 80028b8:	4643      	mov	r3, r8
 80028ba:	18e3      	adds	r3, r4, r3
 80028bc:	603b      	str	r3, [r7, #0]
 80028be:	464b      	mov	r3, r9
 80028c0:	eb45 0303 	adc.w	r3, r5, r3
 80028c4:	607b      	str	r3, [r7, #4]
 80028c6:	f04f 0200 	mov.w	r2, #0
 80028ca:	f04f 0300 	mov.w	r3, #0
 80028ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028d2:	4629      	mov	r1, r5
 80028d4:	028b      	lsls	r3, r1, #10
 80028d6:	4621      	mov	r1, r4
 80028d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028dc:	4621      	mov	r1, r4
 80028de:	028a      	lsls	r2, r1, #10
 80028e0:	4610      	mov	r0, r2
 80028e2:	4619      	mov	r1, r3
 80028e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028e6:	2200      	movs	r2, #0
 80028e8:	61bb      	str	r3, [r7, #24]
 80028ea:	61fa      	str	r2, [r7, #28]
 80028ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028f0:	f7fd fcd6 	bl	80002a0 <__aeabi_uldivmod>
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	4613      	mov	r3, r2
 80028fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80028fc:	4b0b      	ldr	r3, [pc, #44]	@ (800292c <HAL_RCC_GetSysClockFreq+0x200>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	0c1b      	lsrs	r3, r3, #16
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	3301      	adds	r3, #1
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800290c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800290e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002910:	fbb2 f3f3 	udiv	r3, r2, r3
 8002914:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002916:	e002      	b.n	800291e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002918:	4b05      	ldr	r3, [pc, #20]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x204>)
 800291a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800291c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800291e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002920:	4618      	mov	r0, r3
 8002922:	3750      	adds	r7, #80	@ 0x50
 8002924:	46bd      	mov	sp, r7
 8002926:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800292a:	bf00      	nop
 800292c:	40023800 	.word	0x40023800
 8002930:	00f42400 	.word	0x00f42400
 8002934:	007a1200 	.word	0x007a1200

08002938 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800293c:	4b03      	ldr	r3, [pc, #12]	@ (800294c <HAL_RCC_GetHCLKFreq+0x14>)
 800293e:	681b      	ldr	r3, [r3, #0]
}
 8002940:	4618      	mov	r0, r3
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	20000000 	.word	0x20000000

08002950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002954:	f7ff fff0 	bl	8002938 <HAL_RCC_GetHCLKFreq>
 8002958:	4602      	mov	r2, r0
 800295a:	4b05      	ldr	r3, [pc, #20]	@ (8002970 <HAL_RCC_GetPCLK1Freq+0x20>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	0a9b      	lsrs	r3, r3, #10
 8002960:	f003 0307 	and.w	r3, r3, #7
 8002964:	4903      	ldr	r1, [pc, #12]	@ (8002974 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002966:	5ccb      	ldrb	r3, [r1, r3]
 8002968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800296c:	4618      	mov	r0, r3
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40023800 	.word	0x40023800
 8002974:	080067b8 	.word	0x080067b8

08002978 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800297c:	f7ff ffdc 	bl	8002938 <HAL_RCC_GetHCLKFreq>
 8002980:	4602      	mov	r2, r0
 8002982:	4b05      	ldr	r3, [pc, #20]	@ (8002998 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	0b5b      	lsrs	r3, r3, #13
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	4903      	ldr	r1, [pc, #12]	@ (800299c <HAL_RCC_GetPCLK2Freq+0x24>)
 800298e:	5ccb      	ldrb	r3, [r1, r3]
 8002990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002994:	4618      	mov	r0, r3
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40023800 	.word	0x40023800
 800299c:	080067b8 	.word	0x080067b8

080029a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	220f      	movs	r2, #15
 80029ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80029b0:	4b12      	ldr	r3, [pc, #72]	@ (80029fc <HAL_RCC_GetClockConfig+0x5c>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f003 0203 	and.w	r2, r3, #3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80029bc:	4b0f      	ldr	r3, [pc, #60]	@ (80029fc <HAL_RCC_GetClockConfig+0x5c>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80029c8:	4b0c      	ldr	r3, [pc, #48]	@ (80029fc <HAL_RCC_GetClockConfig+0x5c>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80029d4:	4b09      	ldr	r3, [pc, #36]	@ (80029fc <HAL_RCC_GetClockConfig+0x5c>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	08db      	lsrs	r3, r3, #3
 80029da:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80029e2:	4b07      	ldr	r3, [pc, #28]	@ (8002a00 <HAL_RCC_GetClockConfig+0x60>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 020f 	and.w	r2, r3, #15
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	601a      	str	r2, [r3, #0]
}
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	40023800 	.word	0x40023800
 8002a00:	40023c00 	.word	0x40023c00

08002a04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e041      	b.n	8002a9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d106      	bne.n	8002a30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f839 	bl	8002aa2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2202      	movs	r2, #2
 8002a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3304      	adds	r3, #4
 8002a40:	4619      	mov	r1, r3
 8002a42:	4610      	mov	r0, r2
 8002a44:	f000 f9c0 	bl	8002dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
	...

08002ab8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d001      	beq.n	8002ad0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e04e      	b.n	8002b6e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68da      	ldr	r2, [r3, #12]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f042 0201 	orr.w	r2, r2, #1
 8002ae6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a23      	ldr	r2, [pc, #140]	@ (8002b7c <HAL_TIM_Base_Start_IT+0xc4>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d022      	beq.n	8002b38 <HAL_TIM_Base_Start_IT+0x80>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002afa:	d01d      	beq.n	8002b38 <HAL_TIM_Base_Start_IT+0x80>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a1f      	ldr	r2, [pc, #124]	@ (8002b80 <HAL_TIM_Base_Start_IT+0xc8>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d018      	beq.n	8002b38 <HAL_TIM_Base_Start_IT+0x80>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a1e      	ldr	r2, [pc, #120]	@ (8002b84 <HAL_TIM_Base_Start_IT+0xcc>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d013      	beq.n	8002b38 <HAL_TIM_Base_Start_IT+0x80>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a1c      	ldr	r2, [pc, #112]	@ (8002b88 <HAL_TIM_Base_Start_IT+0xd0>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d00e      	beq.n	8002b38 <HAL_TIM_Base_Start_IT+0x80>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a1b      	ldr	r2, [pc, #108]	@ (8002b8c <HAL_TIM_Base_Start_IT+0xd4>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d009      	beq.n	8002b38 <HAL_TIM_Base_Start_IT+0x80>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a19      	ldr	r2, [pc, #100]	@ (8002b90 <HAL_TIM_Base_Start_IT+0xd8>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d004      	beq.n	8002b38 <HAL_TIM_Base_Start_IT+0x80>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a18      	ldr	r2, [pc, #96]	@ (8002b94 <HAL_TIM_Base_Start_IT+0xdc>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d111      	bne.n	8002b5c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2b06      	cmp	r3, #6
 8002b48:	d010      	beq.n	8002b6c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f042 0201 	orr.w	r2, r2, #1
 8002b58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b5a:	e007      	b.n	8002b6c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f042 0201 	orr.w	r2, r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	40010000 	.word	0x40010000
 8002b80:	40000400 	.word	0x40000400
 8002b84:	40000800 	.word	0x40000800
 8002b88:	40000c00 	.word	0x40000c00
 8002b8c:	40010400 	.word	0x40010400
 8002b90:	40014000 	.word	0x40014000
 8002b94:	40001800 	.word	0x40001800

08002b98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d020      	beq.n	8002bfc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d01b      	beq.n	8002bfc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f06f 0202 	mvn.w	r2, #2
 8002bcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	f003 0303 	and.w	r3, r3, #3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f8d2 	bl	8002d8c <HAL_TIM_IC_CaptureCallback>
 8002be8:	e005      	b.n	8002bf6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f8c4 	bl	8002d78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 f8d5 	bl	8002da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	f003 0304 	and.w	r3, r3, #4
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d020      	beq.n	8002c48 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d01b      	beq.n	8002c48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f06f 0204 	mvn.w	r2, #4
 8002c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f8ac 	bl	8002d8c <HAL_TIM_IC_CaptureCallback>
 8002c34:	e005      	b.n	8002c42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f89e 	bl	8002d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 f8af 	bl	8002da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d020      	beq.n	8002c94 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f003 0308 	and.w	r3, r3, #8
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d01b      	beq.n	8002c94 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f06f 0208 	mvn.w	r2, #8
 8002c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2204      	movs	r2, #4
 8002c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	f003 0303 	and.w	r3, r3, #3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f886 	bl	8002d8c <HAL_TIM_IC_CaptureCallback>
 8002c80:	e005      	b.n	8002c8e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f878 	bl	8002d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 f889 	bl	8002da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	f003 0310 	and.w	r3, r3, #16
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d020      	beq.n	8002ce0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f003 0310 	and.w	r3, r3, #16
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d01b      	beq.n	8002ce0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f06f 0210 	mvn.w	r2, #16
 8002cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2208      	movs	r2, #8
 8002cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f860 	bl	8002d8c <HAL_TIM_IC_CaptureCallback>
 8002ccc:	e005      	b.n	8002cda <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f852 	bl	8002d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 f863 	bl	8002da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00c      	beq.n	8002d04 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d007      	beq.n	8002d04 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f06f 0201 	mvn.w	r2, #1
 8002cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7fd ff24 	bl	8000b4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00c      	beq.n	8002d28 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d007      	beq.n	8002d28 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 f900 	bl	8002f28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00c      	beq.n	8002d4c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d007      	beq.n	8002d4c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 f834 	bl	8002db4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	f003 0320 	and.w	r3, r3, #32
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00c      	beq.n	8002d70 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f003 0320 	and.w	r3, r3, #32
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d007      	beq.n	8002d70 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f06f 0220 	mvn.w	r2, #32
 8002d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f8d2 	bl	8002f14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d70:	bf00      	nop
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a43      	ldr	r2, [pc, #268]	@ (8002ee8 <TIM_Base_SetConfig+0x120>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d013      	beq.n	8002e08 <TIM_Base_SetConfig+0x40>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002de6:	d00f      	beq.n	8002e08 <TIM_Base_SetConfig+0x40>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a40      	ldr	r2, [pc, #256]	@ (8002eec <TIM_Base_SetConfig+0x124>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d00b      	beq.n	8002e08 <TIM_Base_SetConfig+0x40>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a3f      	ldr	r2, [pc, #252]	@ (8002ef0 <TIM_Base_SetConfig+0x128>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d007      	beq.n	8002e08 <TIM_Base_SetConfig+0x40>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a3e      	ldr	r2, [pc, #248]	@ (8002ef4 <TIM_Base_SetConfig+0x12c>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d003      	beq.n	8002e08 <TIM_Base_SetConfig+0x40>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a3d      	ldr	r2, [pc, #244]	@ (8002ef8 <TIM_Base_SetConfig+0x130>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d108      	bne.n	8002e1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a32      	ldr	r2, [pc, #200]	@ (8002ee8 <TIM_Base_SetConfig+0x120>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d02b      	beq.n	8002e7a <TIM_Base_SetConfig+0xb2>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e28:	d027      	beq.n	8002e7a <TIM_Base_SetConfig+0xb2>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a2f      	ldr	r2, [pc, #188]	@ (8002eec <TIM_Base_SetConfig+0x124>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d023      	beq.n	8002e7a <TIM_Base_SetConfig+0xb2>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a2e      	ldr	r2, [pc, #184]	@ (8002ef0 <TIM_Base_SetConfig+0x128>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d01f      	beq.n	8002e7a <TIM_Base_SetConfig+0xb2>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a2d      	ldr	r2, [pc, #180]	@ (8002ef4 <TIM_Base_SetConfig+0x12c>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d01b      	beq.n	8002e7a <TIM_Base_SetConfig+0xb2>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a2c      	ldr	r2, [pc, #176]	@ (8002ef8 <TIM_Base_SetConfig+0x130>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d017      	beq.n	8002e7a <TIM_Base_SetConfig+0xb2>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a2b      	ldr	r2, [pc, #172]	@ (8002efc <TIM_Base_SetConfig+0x134>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d013      	beq.n	8002e7a <TIM_Base_SetConfig+0xb2>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a2a      	ldr	r2, [pc, #168]	@ (8002f00 <TIM_Base_SetConfig+0x138>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d00f      	beq.n	8002e7a <TIM_Base_SetConfig+0xb2>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a29      	ldr	r2, [pc, #164]	@ (8002f04 <TIM_Base_SetConfig+0x13c>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d00b      	beq.n	8002e7a <TIM_Base_SetConfig+0xb2>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a28      	ldr	r2, [pc, #160]	@ (8002f08 <TIM_Base_SetConfig+0x140>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d007      	beq.n	8002e7a <TIM_Base_SetConfig+0xb2>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a27      	ldr	r2, [pc, #156]	@ (8002f0c <TIM_Base_SetConfig+0x144>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d003      	beq.n	8002e7a <TIM_Base_SetConfig+0xb2>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a26      	ldr	r2, [pc, #152]	@ (8002f10 <TIM_Base_SetConfig+0x148>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d108      	bne.n	8002e8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	689a      	ldr	r2, [r3, #8]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a0e      	ldr	r2, [pc, #56]	@ (8002ee8 <TIM_Base_SetConfig+0x120>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d003      	beq.n	8002eba <TIM_Base_SetConfig+0xf2>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a10      	ldr	r2, [pc, #64]	@ (8002ef8 <TIM_Base_SetConfig+0x130>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d103      	bne.n	8002ec2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	691a      	ldr	r2, [r3, #16]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f043 0204 	orr.w	r2, r3, #4
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	601a      	str	r2, [r3, #0]
}
 8002eda:	bf00      	nop
 8002edc:	3714      	adds	r7, #20
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	40010000 	.word	0x40010000
 8002eec:	40000400 	.word	0x40000400
 8002ef0:	40000800 	.word	0x40000800
 8002ef4:	40000c00 	.word	0x40000c00
 8002ef8:	40010400 	.word	0x40010400
 8002efc:	40014000 	.word	0x40014000
 8002f00:	40014400 	.word	0x40014400
 8002f04:	40014800 	.word	0x40014800
 8002f08:	40001800 	.word	0x40001800
 8002f0c:	40001c00 	.word	0x40001c00
 8002f10:	40002000 	.word	0x40002000

08002f14 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e042      	b.n	8002fd4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d106      	bne.n	8002f68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7fd fefc 	bl	8000d60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2224      	movs	r2, #36	@ 0x24
 8002f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68da      	ldr	r2, [r3, #12]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 f973 	bl	800326c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	691a      	ldr	r2, [r3, #16]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	695a      	ldr	r2, [r3, #20]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002fa4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68da      	ldr	r2, [r3, #12]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002fb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b08a      	sub	sp, #40	@ 0x28
 8002fe0:	af02      	add	r7, sp, #8
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	603b      	str	r3, [r7, #0]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	2b20      	cmp	r3, #32
 8002ffa:	d175      	bne.n	80030e8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d002      	beq.n	8003008 <HAL_UART_Transmit+0x2c>
 8003002:	88fb      	ldrh	r3, [r7, #6]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e06e      	b.n	80030ea <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2221      	movs	r2, #33	@ 0x21
 8003016:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800301a:	f7fe f8f3 	bl	8001204 <HAL_GetTick>
 800301e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	88fa      	ldrh	r2, [r7, #6]
 8003024:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	88fa      	ldrh	r2, [r7, #6]
 800302a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003034:	d108      	bne.n	8003048 <HAL_UART_Transmit+0x6c>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d104      	bne.n	8003048 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800303e:	2300      	movs	r3, #0
 8003040:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	61bb      	str	r3, [r7, #24]
 8003046:	e003      	b.n	8003050 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800304c:	2300      	movs	r3, #0
 800304e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003050:	e02e      	b.n	80030b0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	2200      	movs	r2, #0
 800305a:	2180      	movs	r1, #128	@ 0x80
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f000 f848 	bl	80030f2 <UART_WaitOnFlagUntilTimeout>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d005      	beq.n	8003074 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2220      	movs	r2, #32
 800306c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e03a      	b.n	80030ea <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10b      	bne.n	8003092 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	881b      	ldrh	r3, [r3, #0]
 800307e:	461a      	mov	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003088:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	3302      	adds	r3, #2
 800308e:	61bb      	str	r3, [r7, #24]
 8003090:	e007      	b.n	80030a2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	781a      	ldrb	r2, [r3, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	3301      	adds	r3, #1
 80030a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	3b01      	subs	r3, #1
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1cb      	bne.n	8003052 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	2200      	movs	r2, #0
 80030c2:	2140      	movs	r1, #64	@ 0x40
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f000 f814 	bl	80030f2 <UART_WaitOnFlagUntilTimeout>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d005      	beq.n	80030dc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2220      	movs	r2, #32
 80030d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e006      	b.n	80030ea <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2220      	movs	r2, #32
 80030e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80030e4:	2300      	movs	r3, #0
 80030e6:	e000      	b.n	80030ea <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80030e8:	2302      	movs	r3, #2
  }
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3720      	adds	r7, #32
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b086      	sub	sp, #24
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	60f8      	str	r0, [r7, #12]
 80030fa:	60b9      	str	r1, [r7, #8]
 80030fc:	603b      	str	r3, [r7, #0]
 80030fe:	4613      	mov	r3, r2
 8003100:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003102:	e03b      	b.n	800317c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003104:	6a3b      	ldr	r3, [r7, #32]
 8003106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310a:	d037      	beq.n	800317c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800310c:	f7fe f87a 	bl	8001204 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	6a3a      	ldr	r2, [r7, #32]
 8003118:	429a      	cmp	r2, r3
 800311a:	d302      	bcc.n	8003122 <UART_WaitOnFlagUntilTimeout+0x30>
 800311c:	6a3b      	ldr	r3, [r7, #32]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e03a      	b.n	800319c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b00      	cmp	r3, #0
 8003132:	d023      	beq.n	800317c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	2b80      	cmp	r3, #128	@ 0x80
 8003138:	d020      	beq.n	800317c <UART_WaitOnFlagUntilTimeout+0x8a>
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	2b40      	cmp	r3, #64	@ 0x40
 800313e:	d01d      	beq.n	800317c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0308 	and.w	r3, r3, #8
 800314a:	2b08      	cmp	r3, #8
 800314c:	d116      	bne.n	800317c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800314e:	2300      	movs	r3, #0
 8003150:	617b      	str	r3, [r7, #20]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	617b      	str	r3, [r7, #20]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	617b      	str	r3, [r7, #20]
 8003162:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f000 f81d 	bl	80031a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2208      	movs	r2, #8
 800316e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e00f      	b.n	800319c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	4013      	ands	r3, r2
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	429a      	cmp	r2, r3
 800318a:	bf0c      	ite	eq
 800318c:	2301      	moveq	r3, #1
 800318e:	2300      	movne	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	461a      	mov	r2, r3
 8003194:	79fb      	ldrb	r3, [r7, #7]
 8003196:	429a      	cmp	r2, r3
 8003198:	d0b4      	beq.n	8003104 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3718      	adds	r7, #24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b095      	sub	sp, #84	@ 0x54
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	330c      	adds	r3, #12
 80031b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031b6:	e853 3f00 	ldrex	r3, [r3]
 80031ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80031bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	330c      	adds	r3, #12
 80031ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80031cc:	643a      	str	r2, [r7, #64]	@ 0x40
 80031ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80031d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80031d4:	e841 2300 	strex	r3, r2, [r1]
 80031d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80031da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1e5      	bne.n	80031ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	3314      	adds	r3, #20
 80031e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e8:	6a3b      	ldr	r3, [r7, #32]
 80031ea:	e853 3f00 	ldrex	r3, [r3]
 80031ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	f023 0301 	bic.w	r3, r3, #1
 80031f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	3314      	adds	r3, #20
 80031fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003200:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003202:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003204:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003206:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003208:	e841 2300 	strex	r3, r2, [r1]
 800320c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800320e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1e5      	bne.n	80031e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003218:	2b01      	cmp	r3, #1
 800321a:	d119      	bne.n	8003250 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	330c      	adds	r3, #12
 8003222:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	e853 3f00 	ldrex	r3, [r3]
 800322a:	60bb      	str	r3, [r7, #8]
   return(result);
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	f023 0310 	bic.w	r3, r3, #16
 8003232:	647b      	str	r3, [r7, #68]	@ 0x44
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	330c      	adds	r3, #12
 800323a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800323c:	61ba      	str	r2, [r7, #24]
 800323e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003240:	6979      	ldr	r1, [r7, #20]
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	e841 2300 	strex	r3, r2, [r1]
 8003248:	613b      	str	r3, [r7, #16]
   return(result);
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1e5      	bne.n	800321c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2220      	movs	r2, #32
 8003254:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800325e:	bf00      	nop
 8003260:	3754      	adds	r7, #84	@ 0x54
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
	...

0800326c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800326c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003270:	b0c0      	sub	sp, #256	@ 0x100
 8003272:	af00      	add	r7, sp, #0
 8003274:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003288:	68d9      	ldr	r1, [r3, #12]
 800328a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	ea40 0301 	orr.w	r3, r0, r1
 8003294:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	431a      	orrs	r2, r3
 80032a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	431a      	orrs	r2, r3
 80032ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80032b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80032c4:	f021 010c 	bic.w	r1, r1, #12
 80032c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80032d2:	430b      	orrs	r3, r1
 80032d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80032e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032e6:	6999      	ldr	r1, [r3, #24]
 80032e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	ea40 0301 	orr.w	r3, r0, r1
 80032f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	4b8f      	ldr	r3, [pc, #572]	@ (8003538 <UART_SetConfig+0x2cc>)
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d005      	beq.n	800330c <UART_SetConfig+0xa0>
 8003300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	4b8d      	ldr	r3, [pc, #564]	@ (800353c <UART_SetConfig+0x2d0>)
 8003308:	429a      	cmp	r2, r3
 800330a:	d104      	bne.n	8003316 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800330c:	f7ff fb34 	bl	8002978 <HAL_RCC_GetPCLK2Freq>
 8003310:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003314:	e003      	b.n	800331e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003316:	f7ff fb1b 	bl	8002950 <HAL_RCC_GetPCLK1Freq>
 800331a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800331e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003322:	69db      	ldr	r3, [r3, #28]
 8003324:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003328:	f040 810c 	bne.w	8003544 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800332c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003330:	2200      	movs	r2, #0
 8003332:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003336:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800333a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800333e:	4622      	mov	r2, r4
 8003340:	462b      	mov	r3, r5
 8003342:	1891      	adds	r1, r2, r2
 8003344:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003346:	415b      	adcs	r3, r3
 8003348:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800334a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800334e:	4621      	mov	r1, r4
 8003350:	eb12 0801 	adds.w	r8, r2, r1
 8003354:	4629      	mov	r1, r5
 8003356:	eb43 0901 	adc.w	r9, r3, r1
 800335a:	f04f 0200 	mov.w	r2, #0
 800335e:	f04f 0300 	mov.w	r3, #0
 8003362:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003366:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800336a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800336e:	4690      	mov	r8, r2
 8003370:	4699      	mov	r9, r3
 8003372:	4623      	mov	r3, r4
 8003374:	eb18 0303 	adds.w	r3, r8, r3
 8003378:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800337c:	462b      	mov	r3, r5
 800337e:	eb49 0303 	adc.w	r3, r9, r3
 8003382:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003392:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003396:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800339a:	460b      	mov	r3, r1
 800339c:	18db      	adds	r3, r3, r3
 800339e:	653b      	str	r3, [r7, #80]	@ 0x50
 80033a0:	4613      	mov	r3, r2
 80033a2:	eb42 0303 	adc.w	r3, r2, r3
 80033a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80033a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80033ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80033b0:	f7fc ff76 	bl	80002a0 <__aeabi_uldivmod>
 80033b4:	4602      	mov	r2, r0
 80033b6:	460b      	mov	r3, r1
 80033b8:	4b61      	ldr	r3, [pc, #388]	@ (8003540 <UART_SetConfig+0x2d4>)
 80033ba:	fba3 2302 	umull	r2, r3, r3, r2
 80033be:	095b      	lsrs	r3, r3, #5
 80033c0:	011c      	lsls	r4, r3, #4
 80033c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033c6:	2200      	movs	r2, #0
 80033c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80033cc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80033d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80033d4:	4642      	mov	r2, r8
 80033d6:	464b      	mov	r3, r9
 80033d8:	1891      	adds	r1, r2, r2
 80033da:	64b9      	str	r1, [r7, #72]	@ 0x48
 80033dc:	415b      	adcs	r3, r3
 80033de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80033e4:	4641      	mov	r1, r8
 80033e6:	eb12 0a01 	adds.w	sl, r2, r1
 80033ea:	4649      	mov	r1, r9
 80033ec:	eb43 0b01 	adc.w	fp, r3, r1
 80033f0:	f04f 0200 	mov.w	r2, #0
 80033f4:	f04f 0300 	mov.w	r3, #0
 80033f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80033fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003400:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003404:	4692      	mov	sl, r2
 8003406:	469b      	mov	fp, r3
 8003408:	4643      	mov	r3, r8
 800340a:	eb1a 0303 	adds.w	r3, sl, r3
 800340e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003412:	464b      	mov	r3, r9
 8003414:	eb4b 0303 	adc.w	r3, fp, r3
 8003418:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800341c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003428:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800342c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003430:	460b      	mov	r3, r1
 8003432:	18db      	adds	r3, r3, r3
 8003434:	643b      	str	r3, [r7, #64]	@ 0x40
 8003436:	4613      	mov	r3, r2
 8003438:	eb42 0303 	adc.w	r3, r2, r3
 800343c:	647b      	str	r3, [r7, #68]	@ 0x44
 800343e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003442:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003446:	f7fc ff2b 	bl	80002a0 <__aeabi_uldivmod>
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	4611      	mov	r1, r2
 8003450:	4b3b      	ldr	r3, [pc, #236]	@ (8003540 <UART_SetConfig+0x2d4>)
 8003452:	fba3 2301 	umull	r2, r3, r3, r1
 8003456:	095b      	lsrs	r3, r3, #5
 8003458:	2264      	movs	r2, #100	@ 0x64
 800345a:	fb02 f303 	mul.w	r3, r2, r3
 800345e:	1acb      	subs	r3, r1, r3
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003466:	4b36      	ldr	r3, [pc, #216]	@ (8003540 <UART_SetConfig+0x2d4>)
 8003468:	fba3 2302 	umull	r2, r3, r3, r2
 800346c:	095b      	lsrs	r3, r3, #5
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003474:	441c      	add	r4, r3
 8003476:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800347a:	2200      	movs	r2, #0
 800347c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003480:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003484:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003488:	4642      	mov	r2, r8
 800348a:	464b      	mov	r3, r9
 800348c:	1891      	adds	r1, r2, r2
 800348e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003490:	415b      	adcs	r3, r3
 8003492:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003494:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003498:	4641      	mov	r1, r8
 800349a:	1851      	adds	r1, r2, r1
 800349c:	6339      	str	r1, [r7, #48]	@ 0x30
 800349e:	4649      	mov	r1, r9
 80034a0:	414b      	adcs	r3, r1
 80034a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80034a4:	f04f 0200 	mov.w	r2, #0
 80034a8:	f04f 0300 	mov.w	r3, #0
 80034ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80034b0:	4659      	mov	r1, fp
 80034b2:	00cb      	lsls	r3, r1, #3
 80034b4:	4651      	mov	r1, sl
 80034b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034ba:	4651      	mov	r1, sl
 80034bc:	00ca      	lsls	r2, r1, #3
 80034be:	4610      	mov	r0, r2
 80034c0:	4619      	mov	r1, r3
 80034c2:	4603      	mov	r3, r0
 80034c4:	4642      	mov	r2, r8
 80034c6:	189b      	adds	r3, r3, r2
 80034c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80034cc:	464b      	mov	r3, r9
 80034ce:	460a      	mov	r2, r1
 80034d0:	eb42 0303 	adc.w	r3, r2, r3
 80034d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80034d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80034e4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80034e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80034ec:	460b      	mov	r3, r1
 80034ee:	18db      	adds	r3, r3, r3
 80034f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034f2:	4613      	mov	r3, r2
 80034f4:	eb42 0303 	adc.w	r3, r2, r3
 80034f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80034fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003502:	f7fc fecd 	bl	80002a0 <__aeabi_uldivmod>
 8003506:	4602      	mov	r2, r0
 8003508:	460b      	mov	r3, r1
 800350a:	4b0d      	ldr	r3, [pc, #52]	@ (8003540 <UART_SetConfig+0x2d4>)
 800350c:	fba3 1302 	umull	r1, r3, r3, r2
 8003510:	095b      	lsrs	r3, r3, #5
 8003512:	2164      	movs	r1, #100	@ 0x64
 8003514:	fb01 f303 	mul.w	r3, r1, r3
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	3332      	adds	r3, #50	@ 0x32
 800351e:	4a08      	ldr	r2, [pc, #32]	@ (8003540 <UART_SetConfig+0x2d4>)
 8003520:	fba2 2303 	umull	r2, r3, r2, r3
 8003524:	095b      	lsrs	r3, r3, #5
 8003526:	f003 0207 	and.w	r2, r3, #7
 800352a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4422      	add	r2, r4
 8003532:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003534:	e106      	b.n	8003744 <UART_SetConfig+0x4d8>
 8003536:	bf00      	nop
 8003538:	40011000 	.word	0x40011000
 800353c:	40011400 	.word	0x40011400
 8003540:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003544:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003548:	2200      	movs	r2, #0
 800354a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800354e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003552:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003556:	4642      	mov	r2, r8
 8003558:	464b      	mov	r3, r9
 800355a:	1891      	adds	r1, r2, r2
 800355c:	6239      	str	r1, [r7, #32]
 800355e:	415b      	adcs	r3, r3
 8003560:	627b      	str	r3, [r7, #36]	@ 0x24
 8003562:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003566:	4641      	mov	r1, r8
 8003568:	1854      	adds	r4, r2, r1
 800356a:	4649      	mov	r1, r9
 800356c:	eb43 0501 	adc.w	r5, r3, r1
 8003570:	f04f 0200 	mov.w	r2, #0
 8003574:	f04f 0300 	mov.w	r3, #0
 8003578:	00eb      	lsls	r3, r5, #3
 800357a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800357e:	00e2      	lsls	r2, r4, #3
 8003580:	4614      	mov	r4, r2
 8003582:	461d      	mov	r5, r3
 8003584:	4643      	mov	r3, r8
 8003586:	18e3      	adds	r3, r4, r3
 8003588:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800358c:	464b      	mov	r3, r9
 800358e:	eb45 0303 	adc.w	r3, r5, r3
 8003592:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80035a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80035a6:	f04f 0200 	mov.w	r2, #0
 80035aa:	f04f 0300 	mov.w	r3, #0
 80035ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80035b2:	4629      	mov	r1, r5
 80035b4:	008b      	lsls	r3, r1, #2
 80035b6:	4621      	mov	r1, r4
 80035b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035bc:	4621      	mov	r1, r4
 80035be:	008a      	lsls	r2, r1, #2
 80035c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80035c4:	f7fc fe6c 	bl	80002a0 <__aeabi_uldivmod>
 80035c8:	4602      	mov	r2, r0
 80035ca:	460b      	mov	r3, r1
 80035cc:	4b60      	ldr	r3, [pc, #384]	@ (8003750 <UART_SetConfig+0x4e4>)
 80035ce:	fba3 2302 	umull	r2, r3, r3, r2
 80035d2:	095b      	lsrs	r3, r3, #5
 80035d4:	011c      	lsls	r4, r3, #4
 80035d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035da:	2200      	movs	r2, #0
 80035dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80035e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80035e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80035e8:	4642      	mov	r2, r8
 80035ea:	464b      	mov	r3, r9
 80035ec:	1891      	adds	r1, r2, r2
 80035ee:	61b9      	str	r1, [r7, #24]
 80035f0:	415b      	adcs	r3, r3
 80035f2:	61fb      	str	r3, [r7, #28]
 80035f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035f8:	4641      	mov	r1, r8
 80035fa:	1851      	adds	r1, r2, r1
 80035fc:	6139      	str	r1, [r7, #16]
 80035fe:	4649      	mov	r1, r9
 8003600:	414b      	adcs	r3, r1
 8003602:	617b      	str	r3, [r7, #20]
 8003604:	f04f 0200 	mov.w	r2, #0
 8003608:	f04f 0300 	mov.w	r3, #0
 800360c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003610:	4659      	mov	r1, fp
 8003612:	00cb      	lsls	r3, r1, #3
 8003614:	4651      	mov	r1, sl
 8003616:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800361a:	4651      	mov	r1, sl
 800361c:	00ca      	lsls	r2, r1, #3
 800361e:	4610      	mov	r0, r2
 8003620:	4619      	mov	r1, r3
 8003622:	4603      	mov	r3, r0
 8003624:	4642      	mov	r2, r8
 8003626:	189b      	adds	r3, r3, r2
 8003628:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800362c:	464b      	mov	r3, r9
 800362e:	460a      	mov	r2, r1
 8003630:	eb42 0303 	adc.w	r3, r2, r3
 8003634:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003642:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003644:	f04f 0200 	mov.w	r2, #0
 8003648:	f04f 0300 	mov.w	r3, #0
 800364c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003650:	4649      	mov	r1, r9
 8003652:	008b      	lsls	r3, r1, #2
 8003654:	4641      	mov	r1, r8
 8003656:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800365a:	4641      	mov	r1, r8
 800365c:	008a      	lsls	r2, r1, #2
 800365e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003662:	f7fc fe1d 	bl	80002a0 <__aeabi_uldivmod>
 8003666:	4602      	mov	r2, r0
 8003668:	460b      	mov	r3, r1
 800366a:	4611      	mov	r1, r2
 800366c:	4b38      	ldr	r3, [pc, #224]	@ (8003750 <UART_SetConfig+0x4e4>)
 800366e:	fba3 2301 	umull	r2, r3, r3, r1
 8003672:	095b      	lsrs	r3, r3, #5
 8003674:	2264      	movs	r2, #100	@ 0x64
 8003676:	fb02 f303 	mul.w	r3, r2, r3
 800367a:	1acb      	subs	r3, r1, r3
 800367c:	011b      	lsls	r3, r3, #4
 800367e:	3332      	adds	r3, #50	@ 0x32
 8003680:	4a33      	ldr	r2, [pc, #204]	@ (8003750 <UART_SetConfig+0x4e4>)
 8003682:	fba2 2303 	umull	r2, r3, r2, r3
 8003686:	095b      	lsrs	r3, r3, #5
 8003688:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800368c:	441c      	add	r4, r3
 800368e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003692:	2200      	movs	r2, #0
 8003694:	673b      	str	r3, [r7, #112]	@ 0x70
 8003696:	677a      	str	r2, [r7, #116]	@ 0x74
 8003698:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800369c:	4642      	mov	r2, r8
 800369e:	464b      	mov	r3, r9
 80036a0:	1891      	adds	r1, r2, r2
 80036a2:	60b9      	str	r1, [r7, #8]
 80036a4:	415b      	adcs	r3, r3
 80036a6:	60fb      	str	r3, [r7, #12]
 80036a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036ac:	4641      	mov	r1, r8
 80036ae:	1851      	adds	r1, r2, r1
 80036b0:	6039      	str	r1, [r7, #0]
 80036b2:	4649      	mov	r1, r9
 80036b4:	414b      	adcs	r3, r1
 80036b6:	607b      	str	r3, [r7, #4]
 80036b8:	f04f 0200 	mov.w	r2, #0
 80036bc:	f04f 0300 	mov.w	r3, #0
 80036c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80036c4:	4659      	mov	r1, fp
 80036c6:	00cb      	lsls	r3, r1, #3
 80036c8:	4651      	mov	r1, sl
 80036ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036ce:	4651      	mov	r1, sl
 80036d0:	00ca      	lsls	r2, r1, #3
 80036d2:	4610      	mov	r0, r2
 80036d4:	4619      	mov	r1, r3
 80036d6:	4603      	mov	r3, r0
 80036d8:	4642      	mov	r2, r8
 80036da:	189b      	adds	r3, r3, r2
 80036dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80036de:	464b      	mov	r3, r9
 80036e0:	460a      	mov	r2, r1
 80036e2:	eb42 0303 	adc.w	r3, r2, r3
 80036e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80036e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80036f2:	667a      	str	r2, [r7, #100]	@ 0x64
 80036f4:	f04f 0200 	mov.w	r2, #0
 80036f8:	f04f 0300 	mov.w	r3, #0
 80036fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003700:	4649      	mov	r1, r9
 8003702:	008b      	lsls	r3, r1, #2
 8003704:	4641      	mov	r1, r8
 8003706:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800370a:	4641      	mov	r1, r8
 800370c:	008a      	lsls	r2, r1, #2
 800370e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003712:	f7fc fdc5 	bl	80002a0 <__aeabi_uldivmod>
 8003716:	4602      	mov	r2, r0
 8003718:	460b      	mov	r3, r1
 800371a:	4b0d      	ldr	r3, [pc, #52]	@ (8003750 <UART_SetConfig+0x4e4>)
 800371c:	fba3 1302 	umull	r1, r3, r3, r2
 8003720:	095b      	lsrs	r3, r3, #5
 8003722:	2164      	movs	r1, #100	@ 0x64
 8003724:	fb01 f303 	mul.w	r3, r1, r3
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	011b      	lsls	r3, r3, #4
 800372c:	3332      	adds	r3, #50	@ 0x32
 800372e:	4a08      	ldr	r2, [pc, #32]	@ (8003750 <UART_SetConfig+0x4e4>)
 8003730:	fba2 2303 	umull	r2, r3, r2, r3
 8003734:	095b      	lsrs	r3, r3, #5
 8003736:	f003 020f 	and.w	r2, r3, #15
 800373a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4422      	add	r2, r4
 8003742:	609a      	str	r2, [r3, #8]
}
 8003744:	bf00      	nop
 8003746:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800374a:	46bd      	mov	sp, r7
 800374c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003750:	51eb851f 	.word	0x51eb851f

08003754 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003754:	b084      	sub	sp, #16
 8003756:	b580      	push	{r7, lr}
 8003758:	b084      	sub	sp, #16
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
 800375e:	f107 001c 	add.w	r0, r7, #28
 8003762:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003766:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800376a:	2b01      	cmp	r3, #1
 800376c:	d123      	bne.n	80037b6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003772:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003782:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003796:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800379a:	2b01      	cmp	r3, #1
 800379c:	d105      	bne.n	80037aa <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 faa0 	bl	8003cf0 <USB_CoreReset>
 80037b0:	4603      	mov	r3, r0
 80037b2:	73fb      	strb	r3, [r7, #15]
 80037b4:	e01b      	b.n	80037ee <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 fa94 	bl	8003cf0 <USB_CoreReset>
 80037c8:	4603      	mov	r3, r0
 80037ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80037cc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d106      	bne.n	80037e2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037d8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	639a      	str	r2, [r3, #56]	@ 0x38
 80037e0:	e005      	b.n	80037ee <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037e6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80037ee:	7fbb      	ldrb	r3, [r7, #30]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d10b      	bne.n	800380c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f043 0206 	orr.w	r2, r3, #6
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f043 0220 	orr.w	r2, r3, #32
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800380c:	7bfb      	ldrb	r3, [r7, #15]
}
 800380e:	4618      	mov	r0, r3
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003818:	b004      	add	sp, #16
 800381a:	4770      	bx	lr

0800381c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f023 0201 	bic.w	r2, r3, #1
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr

0800383e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b084      	sub	sp, #16
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
 8003846:	460b      	mov	r3, r1
 8003848:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800384a:	2300      	movs	r3, #0
 800384c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800385a:	78fb      	ldrb	r3, [r7, #3]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d115      	bne.n	800388c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800386c:	200a      	movs	r0, #10
 800386e:	f7fd fcd5 	bl	800121c <HAL_Delay>
      ms += 10U;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	330a      	adds	r3, #10
 8003876:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 fa2b 	bl	8003cd4 <USB_GetMode>
 800387e:	4603      	mov	r3, r0
 8003880:	2b01      	cmp	r3, #1
 8003882:	d01e      	beq.n	80038c2 <USB_SetCurrentMode+0x84>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2bc7      	cmp	r3, #199	@ 0xc7
 8003888:	d9f0      	bls.n	800386c <USB_SetCurrentMode+0x2e>
 800388a:	e01a      	b.n	80038c2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800388c:	78fb      	ldrb	r3, [r7, #3]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d115      	bne.n	80038be <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800389e:	200a      	movs	r0, #10
 80038a0:	f7fd fcbc 	bl	800121c <HAL_Delay>
      ms += 10U;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	330a      	adds	r3, #10
 80038a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 fa12 	bl	8003cd4 <USB_GetMode>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d005      	beq.n	80038c2 <USB_SetCurrentMode+0x84>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2bc7      	cmp	r3, #199	@ 0xc7
 80038ba:	d9f0      	bls.n	800389e <USB_SetCurrentMode+0x60>
 80038bc:	e001      	b.n	80038c2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e005      	b.n	80038ce <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2bc8      	cmp	r3, #200	@ 0xc8
 80038c6:	d101      	bne.n	80038cc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e000      	b.n	80038ce <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
	...

080038d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80038d8:	b084      	sub	sp, #16
 80038da:	b580      	push	{r7, lr}
 80038dc:	b086      	sub	sp, #24
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
 80038e2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80038e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80038ea:	2300      	movs	r3, #0
 80038ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80038f2:	2300      	movs	r3, #0
 80038f4:	613b      	str	r3, [r7, #16]
 80038f6:	e009      	b.n	800390c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	3340      	adds	r3, #64	@ 0x40
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4413      	add	r3, r2
 8003902:	2200      	movs	r2, #0
 8003904:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	3301      	adds	r3, #1
 800390a:	613b      	str	r3, [r7, #16]
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	2b0e      	cmp	r3, #14
 8003910:	d9f2      	bls.n	80038f8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003912:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003916:	2b00      	cmp	r3, #0
 8003918:	d11c      	bne.n	8003954 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003928:	f043 0302 	orr.w	r3, r3, #2
 800392c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003932:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800393e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800394a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	639a      	str	r2, [r3, #56]	@ 0x38
 8003952:	e00b      	b.n	800396c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003958:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003964:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003972:	461a      	mov	r2, r3
 8003974:	2300      	movs	r3, #0
 8003976:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003978:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800397c:	2b01      	cmp	r3, #1
 800397e:	d10d      	bne.n	800399c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003980:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003984:	2b00      	cmp	r3, #0
 8003986:	d104      	bne.n	8003992 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003988:	2100      	movs	r1, #0
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 f968 	bl	8003c60 <USB_SetDevSpeed>
 8003990:	e008      	b.n	80039a4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003992:	2101      	movs	r1, #1
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 f963 	bl	8003c60 <USB_SetDevSpeed>
 800399a:	e003      	b.n	80039a4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800399c:	2103      	movs	r1, #3
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 f95e 	bl	8003c60 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80039a4:	2110      	movs	r1, #16
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f8fa 	bl	8003ba0 <USB_FlushTxFifo>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f924 	bl	8003c04 <USB_FlushRxFifo>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039cc:	461a      	mov	r2, r3
 80039ce:	2300      	movs	r3, #0
 80039d0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039d8:	461a      	mov	r2, r3
 80039da:	2300      	movs	r3, #0
 80039dc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039e4:	461a      	mov	r2, r3
 80039e6:	2300      	movs	r3, #0
 80039e8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039ea:	2300      	movs	r3, #0
 80039ec:	613b      	str	r3, [r7, #16]
 80039ee:	e043      	b.n	8003a78 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	015a      	lsls	r2, r3, #5
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4413      	add	r3, r2
 80039f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a06:	d118      	bne.n	8003a3a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10a      	bne.n	8003a24 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	015a      	lsls	r2, r3, #5
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	4413      	add	r3, r2
 8003a16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003a20:	6013      	str	r3, [r2, #0]
 8003a22:	e013      	b.n	8003a4c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a30:	461a      	mov	r2, r3
 8003a32:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003a36:	6013      	str	r3, [r2, #0]
 8003a38:	e008      	b.n	8003a4c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	015a      	lsls	r2, r3, #5
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	4413      	add	r3, r2
 8003a42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a46:	461a      	mov	r2, r3
 8003a48:	2300      	movs	r3, #0
 8003a4a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	015a      	lsls	r2, r3, #5
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	4413      	add	r3, r2
 8003a54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a58:	461a      	mov	r2, r3
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	015a      	lsls	r2, r3, #5
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	4413      	add	r3, r2
 8003a66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003a70:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	3301      	adds	r3, #1
 8003a76:	613b      	str	r3, [r7, #16]
 8003a78:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d3b5      	bcc.n	80039f0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a84:	2300      	movs	r3, #0
 8003a86:	613b      	str	r3, [r7, #16]
 8003a88:	e043      	b.n	8003b12 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	015a      	lsls	r2, r3, #5
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	4413      	add	r3, r2
 8003a92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003aa0:	d118      	bne.n	8003ad4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d10a      	bne.n	8003abe <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	015a      	lsls	r2, r3, #5
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	4413      	add	r3, r2
 8003ab0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003aba:	6013      	str	r3, [r2, #0]
 8003abc:	e013      	b.n	8003ae6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	015a      	lsls	r2, r3, #5
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003aca:	461a      	mov	r2, r3
 8003acc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003ad0:	6013      	str	r3, [r2, #0]
 8003ad2:	e008      	b.n	8003ae6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	015a      	lsls	r2, r3, #5
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4413      	add	r3, r2
 8003adc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	015a      	lsls	r2, r3, #5
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	4413      	add	r3, r2
 8003aee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003af2:	461a      	mov	r2, r3
 8003af4:	2300      	movs	r3, #0
 8003af6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	015a      	lsls	r2, r3, #5
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	4413      	add	r3, r2
 8003b00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b04:	461a      	mov	r2, r3
 8003b06:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003b0a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	613b      	str	r3, [r7, #16]
 8003b12:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003b16:	461a      	mov	r2, r3
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d3b5      	bcc.n	8003a8a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b30:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003b3e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003b40:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d105      	bne.n	8003b54 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	f043 0210 	orr.w	r2, r3, #16
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	699a      	ldr	r2, [r3, #24]
 8003b58:	4b10      	ldr	r3, [pc, #64]	@ (8003b9c <USB_DevInit+0x2c4>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003b60:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d005      	beq.n	8003b74 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	f043 0208 	orr.w	r2, r3, #8
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003b74:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d107      	bne.n	8003b8c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003b84:	f043 0304 	orr.w	r3, r3, #4
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003b8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3718      	adds	r7, #24
 8003b92:	46bd      	mov	sp, r7
 8003b94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b98:	b004      	add	sp, #16
 8003b9a:	4770      	bx	lr
 8003b9c:	803c3800 	.word	0x803c3800

08003ba0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003baa:	2300      	movs	r3, #0
 8003bac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003bba:	d901      	bls.n	8003bc0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e01b      	b.n	8003bf8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	daf2      	bge.n	8003bae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	019b      	lsls	r3, r3, #6
 8003bd0:	f043 0220 	orr.w	r2, r3, #32
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003be4:	d901      	bls.n	8003bea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e006      	b.n	8003bf8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	f003 0320 	and.w	r3, r3, #32
 8003bf2:	2b20      	cmp	r3, #32
 8003bf4:	d0f0      	beq.n	8003bd8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3714      	adds	r7, #20
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	3301      	adds	r3, #1
 8003c14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003c1c:	d901      	bls.n	8003c22 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e018      	b.n	8003c54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	daf2      	bge.n	8003c10 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2210      	movs	r2, #16
 8003c32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	3301      	adds	r3, #1
 8003c38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003c40:	d901      	bls.n	8003c46 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e006      	b.n	8003c54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	f003 0310 	and.w	r3, r3, #16
 8003c4e:	2b10      	cmp	r3, #16
 8003c50:	d0f0      	beq.n	8003c34 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3714      	adds	r7, #20
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	460b      	mov	r3, r1
 8003c6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	78fb      	ldrb	r3, [r7, #3]
 8003c7a:	68f9      	ldr	r1, [r7, #12]
 8003c7c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003c80:	4313      	orrs	r3, r2
 8003c82:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3714      	adds	r7, #20
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b085      	sub	sp, #20
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003cac:	f023 0303 	bic.w	r3, r3, #3
 8003cb0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cc0:	f043 0302 	orr.w	r3, r3, #2
 8003cc4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3714      	adds	r7, #20
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	f003 0301 	and.w	r3, r3, #1
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	3301      	adds	r3, #1
 8003d00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003d08:	d901      	bls.n	8003d0e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e022      	b.n	8003d54 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	daf2      	bge.n	8003cfc <USB_CoreReset+0xc>

  count = 10U;
 8003d16:	230a      	movs	r3, #10
 8003d18:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8003d1a:	e002      	b.n	8003d22 <USB_CoreReset+0x32>
  {
    count--;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1f9      	bne.n	8003d1c <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	f043 0201 	orr.w	r2, r3, #1
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	3301      	adds	r3, #1
 8003d38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003d40:	d901      	bls.n	8003d46 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e006      	b.n	8003d54 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d0f0      	beq.n	8003d34 <USB_CoreReset+0x44>

  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3714      	adds	r7, #20
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	4603      	mov	r3, r0
 8003d68:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003d6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d72:	2b84      	cmp	r3, #132	@ 0x84
 8003d74:	d005      	beq.n	8003d82 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003d76:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	3303      	adds	r3, #3
 8003d80:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003d82:	68fb      	ldr	r3, [r7, #12]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3714      	adds	r7, #20
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d96:	f3ef 8305 	mrs	r3, IPSR
 8003d9a:	607b      	str	r3, [r7, #4]
  return(result);
 8003d9c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	bf14      	ite	ne
 8003da2:	2301      	movne	r3, #1
 8003da4:	2300      	moveq	r3, #0
 8003da6:	b2db      	uxtb	r3, r3
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003db8:	f000 fcaa 	bl	8004710 <vTaskStartScheduler>
  
  return osOK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003dc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dc4:	b089      	sub	sp, #36	@ 0x24
 8003dc6:	af04      	add	r7, sp, #16
 8003dc8:	6078      	str	r0, [r7, #4]
 8003dca:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d020      	beq.n	8003e16 <osThreadCreate+0x54>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d01c      	beq.n	8003e16 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685c      	ldr	r4, [r3, #4]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	691e      	ldr	r6, [r3, #16]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7ff ffb6 	bl	8003d60 <makeFreeRtosPriority>
 8003df4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003dfe:	9202      	str	r2, [sp, #8]
 8003e00:	9301      	str	r3, [sp, #4]
 8003e02:	9100      	str	r1, [sp, #0]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	4632      	mov	r2, r6
 8003e08:	4629      	mov	r1, r5
 8003e0a:	4620      	mov	r0, r4
 8003e0c:	f000 f91c 	bl	8004048 <xTaskCreateStatic>
 8003e10:	4603      	mov	r3, r0
 8003e12:	60fb      	str	r3, [r7, #12]
 8003e14:	e01c      	b.n	8003e50 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685c      	ldr	r4, [r3, #4]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e22:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff ff98 	bl	8003d60 <makeFreeRtosPriority>
 8003e30:	4602      	mov	r2, r0
 8003e32:	f107 030c 	add.w	r3, r7, #12
 8003e36:	9301      	str	r3, [sp, #4]
 8003e38:	9200      	str	r2, [sp, #0]
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	4632      	mov	r2, r6
 8003e3e:	4629      	mov	r1, r5
 8003e40:	4620      	mov	r0, r4
 8003e42:	f000 f961 	bl	8004108 <xTaskCreate>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d001      	beq.n	8003e50 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	e000      	b.n	8003e52 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003e50:	68fb      	ldr	r3, [r7, #12]
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3714      	adds	r7, #20
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e5a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b084      	sub	sp, #16
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <osDelay+0x16>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	e000      	b.n	8003e72 <osDelay+0x18>
 8003e70:	2301      	movs	r3, #1
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 fa80 	bl	8004378 <vTaskDelay>
  
  return osOK;
 8003e78:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b082      	sub	sp, #8
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 faaa 	bl	80043e4 <vTaskSuspend>
  
  return osOK;
 8003e90:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
	...

08003e9c <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8003ea4:	f7ff ff74 	bl	8003d90 <inHandlerMode>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00e      	beq.n	8003ecc <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 fbbc 	bl	800462c <xTaskResumeFromISR>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d10b      	bne.n	8003ed2 <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 8003eba:	4b08      	ldr	r3, [pc, #32]	@ (8003edc <osThreadResume+0x40>)
 8003ebc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ec0:	601a      	str	r2, [r3, #0]
 8003ec2:	f3bf 8f4f 	dsb	sy
 8003ec6:	f3bf 8f6f 	isb	sy
 8003eca:	e002      	b.n	8003ed2 <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 fb4f 	bl	8004570 <vTaskResume>
  }
  return osOK;
 8003ed2:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3708      	adds	r7, #8
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	e000ed04 	.word	0xe000ed04

08003ee0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f103 0208 	add.w	r2, r3, #8
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ef8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f103 0208 	add.w	r2, r3, #8
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f103 0208 	add.w	r2, r3, #8
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f2e:	bf00      	nop
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr

08003f3a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	b085      	sub	sp, #20
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
 8003f42:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	689a      	ldr	r2, [r3, #8]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	1c5a      	adds	r2, r3, #1
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	601a      	str	r2, [r3, #0]
}
 8003f76:	bf00      	nop
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f82:	b480      	push	{r7}
 8003f84:	b085      	sub	sp, #20
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
 8003f8a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f98:	d103      	bne.n	8003fa2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	e00c      	b.n	8003fbc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	3308      	adds	r3, #8
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	e002      	b.n	8003fb0 <vListInsert+0x2e>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	60fb      	str	r3, [r7, #12]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68ba      	ldr	r2, [r7, #8]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d2f6      	bcs.n	8003faa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	1c5a      	adds	r2, r3, #1
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	601a      	str	r2, [r3, #0]
}
 8003fe8:	bf00      	nop
 8003fea:	3714      	adds	r7, #20
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	6892      	ldr	r2, [r2, #8]
 800400a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	6852      	ldr	r2, [r2, #4]
 8004014:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	429a      	cmp	r2, r3
 800401e:	d103      	bne.n	8004028 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689a      	ldr	r2, [r3, #8]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	1e5a      	subs	r2, r3, #1
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
}
 800403c:	4618      	mov	r0, r3
 800403e:	3714      	adds	r7, #20
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004048:	b580      	push	{r7, lr}
 800404a:	b08e      	sub	sp, #56	@ 0x38
 800404c:	af04      	add	r7, sp, #16
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
 8004054:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004056:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10b      	bne.n	8004074 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800405c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004060:	f383 8811 	msr	BASEPRI, r3
 8004064:	f3bf 8f6f 	isb	sy
 8004068:	f3bf 8f4f 	dsb	sy
 800406c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800406e:	bf00      	nop
 8004070:	bf00      	nop
 8004072:	e7fd      	b.n	8004070 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10b      	bne.n	8004092 <xTaskCreateStatic+0x4a>
	__asm volatile
 800407a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800407e:	f383 8811 	msr	BASEPRI, r3
 8004082:	f3bf 8f6f 	isb	sy
 8004086:	f3bf 8f4f 	dsb	sy
 800408a:	61fb      	str	r3, [r7, #28]
}
 800408c:	bf00      	nop
 800408e:	bf00      	nop
 8004090:	e7fd      	b.n	800408e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004092:	2354      	movs	r3, #84	@ 0x54
 8004094:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	2b54      	cmp	r3, #84	@ 0x54
 800409a:	d00b      	beq.n	80040b4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800409c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040a0:	f383 8811 	msr	BASEPRI, r3
 80040a4:	f3bf 8f6f 	isb	sy
 80040a8:	f3bf 8f4f 	dsb	sy
 80040ac:	61bb      	str	r3, [r7, #24]
}
 80040ae:	bf00      	nop
 80040b0:	bf00      	nop
 80040b2:	e7fd      	b.n	80040b0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80040b4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80040b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d01e      	beq.n	80040fa <xTaskCreateStatic+0xb2>
 80040bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d01b      	beq.n	80040fa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80040c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040c4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80040c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80040ca:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80040cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ce:	2202      	movs	r2, #2
 80040d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80040d4:	2300      	movs	r3, #0
 80040d6:	9303      	str	r3, [sp, #12]
 80040d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040da:	9302      	str	r3, [sp, #8]
 80040dc:	f107 0314 	add.w	r3, r7, #20
 80040e0:	9301      	str	r3, [sp, #4]
 80040e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040e4:	9300      	str	r3, [sp, #0]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	68b9      	ldr	r1, [r7, #8]
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f000 f850 	bl	8004192 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80040f4:	f000 f8d6 	bl	80042a4 <prvAddNewTaskToReadyList>
 80040f8:	e001      	b.n	80040fe <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80040fa:	2300      	movs	r3, #0
 80040fc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80040fe:	697b      	ldr	r3, [r7, #20]
	}
 8004100:	4618      	mov	r0, r3
 8004102:	3728      	adds	r7, #40	@ 0x28
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004108:	b580      	push	{r7, lr}
 800410a:	b08c      	sub	sp, #48	@ 0x30
 800410c:	af04      	add	r7, sp, #16
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	603b      	str	r3, [r7, #0]
 8004114:	4613      	mov	r3, r2
 8004116:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004118:	88fb      	ldrh	r3, [r7, #6]
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4618      	mov	r0, r3
 800411e:	f001 f8ad 	bl	800527c <pvPortMalloc>
 8004122:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00e      	beq.n	8004148 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800412a:	2054      	movs	r0, #84	@ 0x54
 800412c:	f001 f8a6 	bl	800527c <pvPortMalloc>
 8004130:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d003      	beq.n	8004140 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	631a      	str	r2, [r3, #48]	@ 0x30
 800413e:	e005      	b.n	800414c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004140:	6978      	ldr	r0, [r7, #20]
 8004142:	f001 f969 	bl	8005418 <vPortFree>
 8004146:	e001      	b.n	800414c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004148:	2300      	movs	r3, #0
 800414a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d017      	beq.n	8004182 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800415a:	88fa      	ldrh	r2, [r7, #6]
 800415c:	2300      	movs	r3, #0
 800415e:	9303      	str	r3, [sp, #12]
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	9302      	str	r3, [sp, #8]
 8004164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004166:	9301      	str	r3, [sp, #4]
 8004168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	68b9      	ldr	r1, [r7, #8]
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f000 f80e 	bl	8004192 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004176:	69f8      	ldr	r0, [r7, #28]
 8004178:	f000 f894 	bl	80042a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800417c:	2301      	movs	r3, #1
 800417e:	61bb      	str	r3, [r7, #24]
 8004180:	e002      	b.n	8004188 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004182:	f04f 33ff 	mov.w	r3, #4294967295
 8004186:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004188:	69bb      	ldr	r3, [r7, #24]
	}
 800418a:	4618      	mov	r0, r3
 800418c:	3720      	adds	r7, #32
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b088      	sub	sp, #32
 8004196:	af00      	add	r7, sp, #0
 8004198:	60f8      	str	r0, [r7, #12]
 800419a:	60b9      	str	r1, [r7, #8]
 800419c:	607a      	str	r2, [r7, #4]
 800419e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80041a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80041aa:	3b01      	subs	r3, #1
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	4413      	add	r3, r2
 80041b0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	f023 0307 	bic.w	r3, r3, #7
 80041b8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	f003 0307 	and.w	r3, r3, #7
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00b      	beq.n	80041dc <prvInitialiseNewTask+0x4a>
	__asm volatile
 80041c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c8:	f383 8811 	msr	BASEPRI, r3
 80041cc:	f3bf 8f6f 	isb	sy
 80041d0:	f3bf 8f4f 	dsb	sy
 80041d4:	617b      	str	r3, [r7, #20]
}
 80041d6:	bf00      	nop
 80041d8:	bf00      	nop
 80041da:	e7fd      	b.n	80041d8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d01f      	beq.n	8004222 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041e2:	2300      	movs	r3, #0
 80041e4:	61fb      	str	r3, [r7, #28]
 80041e6:	e012      	b.n	800420e <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	4413      	add	r3, r2
 80041ee:	7819      	ldrb	r1, [r3, #0]
 80041f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	4413      	add	r3, r2
 80041f6:	3334      	adds	r3, #52	@ 0x34
 80041f8:	460a      	mov	r2, r1
 80041fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80041fc:	68ba      	ldr	r2, [r7, #8]
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	4413      	add	r3, r2
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d006      	beq.n	8004216 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	3301      	adds	r3, #1
 800420c:	61fb      	str	r3, [r7, #28]
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	2b0f      	cmp	r3, #15
 8004212:	d9e9      	bls.n	80041e8 <prvInitialiseNewTask+0x56>
 8004214:	e000      	b.n	8004218 <prvInitialiseNewTask+0x86>
			{
				break;
 8004216:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800421a:	2200      	movs	r2, #0
 800421c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004220:	e003      	b.n	800422a <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004224:	2200      	movs	r2, #0
 8004226:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800422a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800422c:	2b06      	cmp	r3, #6
 800422e:	d901      	bls.n	8004234 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004230:	2306      	movs	r3, #6
 8004232:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004236:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004238:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800423a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800423c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800423e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004242:	2200      	movs	r2, #0
 8004244:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004248:	3304      	adds	r3, #4
 800424a:	4618      	mov	r0, r3
 800424c:	f7ff fe68 	bl	8003f20 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004252:	3318      	adds	r3, #24
 8004254:	4618      	mov	r0, r3
 8004256:	f7ff fe63 	bl	8003f20 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800425a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800425c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800425e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004262:	f1c3 0207 	rsb	r2, r3, #7
 8004266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004268:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800426a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800426c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800426e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004272:	2200      	movs	r2, #0
 8004274:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004278:	2200      	movs	r2, #0
 800427a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	68f9      	ldr	r1, [r7, #12]
 8004282:	69b8      	ldr	r0, [r7, #24]
 8004284:	f000 fda4 	bl	8004dd0 <pxPortInitialiseStack>
 8004288:	4602      	mov	r2, r0
 800428a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800428c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800428e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004290:	2b00      	cmp	r3, #0
 8004292:	d002      	beq.n	800429a <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004296:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004298:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800429a:	bf00      	nop
 800429c:	3720      	adds	r7, #32
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
	...

080042a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80042ac:	f000 fec4 	bl	8005038 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80042b0:	4b2a      	ldr	r3, [pc, #168]	@ (800435c <prvAddNewTaskToReadyList+0xb8>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	3301      	adds	r3, #1
 80042b6:	4a29      	ldr	r2, [pc, #164]	@ (800435c <prvAddNewTaskToReadyList+0xb8>)
 80042b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80042ba:	4b29      	ldr	r3, [pc, #164]	@ (8004360 <prvAddNewTaskToReadyList+0xbc>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d109      	bne.n	80042d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80042c2:	4a27      	ldr	r2, [pc, #156]	@ (8004360 <prvAddNewTaskToReadyList+0xbc>)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80042c8:	4b24      	ldr	r3, [pc, #144]	@ (800435c <prvAddNewTaskToReadyList+0xb8>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d110      	bne.n	80042f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80042d0:	f000 fc5a 	bl	8004b88 <prvInitialiseTaskLists>
 80042d4:	e00d      	b.n	80042f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80042d6:	4b23      	ldr	r3, [pc, #140]	@ (8004364 <prvAddNewTaskToReadyList+0xc0>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d109      	bne.n	80042f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80042de:	4b20      	ldr	r3, [pc, #128]	@ (8004360 <prvAddNewTaskToReadyList+0xbc>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d802      	bhi.n	80042f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80042ec:	4a1c      	ldr	r2, [pc, #112]	@ (8004360 <prvAddNewTaskToReadyList+0xbc>)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80042f2:	4b1d      	ldr	r3, [pc, #116]	@ (8004368 <prvAddNewTaskToReadyList+0xc4>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	3301      	adds	r3, #1
 80042f8:	4a1b      	ldr	r2, [pc, #108]	@ (8004368 <prvAddNewTaskToReadyList+0xc4>)
 80042fa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004300:	2201      	movs	r2, #1
 8004302:	409a      	lsls	r2, r3
 8004304:	4b19      	ldr	r3, [pc, #100]	@ (800436c <prvAddNewTaskToReadyList+0xc8>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4313      	orrs	r3, r2
 800430a:	4a18      	ldr	r2, [pc, #96]	@ (800436c <prvAddNewTaskToReadyList+0xc8>)
 800430c:	6013      	str	r3, [r2, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004312:	4613      	mov	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	4413      	add	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	4a15      	ldr	r2, [pc, #84]	@ (8004370 <prvAddNewTaskToReadyList+0xcc>)
 800431c:	441a      	add	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	3304      	adds	r3, #4
 8004322:	4619      	mov	r1, r3
 8004324:	4610      	mov	r0, r2
 8004326:	f7ff fe08 	bl	8003f3a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800432a:	f000 feb7 	bl	800509c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800432e:	4b0d      	ldr	r3, [pc, #52]	@ (8004364 <prvAddNewTaskToReadyList+0xc0>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00e      	beq.n	8004354 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004336:	4b0a      	ldr	r3, [pc, #40]	@ (8004360 <prvAddNewTaskToReadyList+0xbc>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004340:	429a      	cmp	r2, r3
 8004342:	d207      	bcs.n	8004354 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004344:	4b0b      	ldr	r3, [pc, #44]	@ (8004374 <prvAddNewTaskToReadyList+0xd0>)
 8004346:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800434a:	601a      	str	r2, [r3, #0]
 800434c:	f3bf 8f4f 	dsb	sy
 8004350:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004354:	bf00      	nop
 8004356:	3708      	adds	r7, #8
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	20000b98 	.word	0x20000b98
 8004360:	20000a98 	.word	0x20000a98
 8004364:	20000ba4 	.word	0x20000ba4
 8004368:	20000bb4 	.word	0x20000bb4
 800436c:	20000ba0 	.word	0x20000ba0
 8004370:	20000a9c 	.word	0x20000a9c
 8004374:	e000ed04 	.word	0xe000ed04

08004378 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004380:	2300      	movs	r3, #0
 8004382:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d018      	beq.n	80043bc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800438a:	4b14      	ldr	r3, [pc, #80]	@ (80043dc <vTaskDelay+0x64>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00b      	beq.n	80043aa <vTaskDelay+0x32>
	__asm volatile
 8004392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004396:	f383 8811 	msr	BASEPRI, r3
 800439a:	f3bf 8f6f 	isb	sy
 800439e:	f3bf 8f4f 	dsb	sy
 80043a2:	60bb      	str	r3, [r7, #8]
}
 80043a4:	bf00      	nop
 80043a6:	bf00      	nop
 80043a8:	e7fd      	b.n	80043a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80043aa:	f000 fa13 	bl	80047d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80043ae:	2100      	movs	r1, #0
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 fca7 	bl	8004d04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80043b6:	f000 fa1b 	bl	80047f0 <xTaskResumeAll>
 80043ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d107      	bne.n	80043d2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80043c2:	4b07      	ldr	r3, [pc, #28]	@ (80043e0 <vTaskDelay+0x68>)
 80043c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	f3bf 8f4f 	dsb	sy
 80043ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80043d2:	bf00      	nop
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	20000bc0 	.word	0x20000bc0
 80043e0:	e000ed04 	.word	0xe000ed04

080043e4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80043ec:	f000 fe24 	bl	8005038 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d102      	bne.n	80043fc <vTaskSuspend+0x18>
 80043f6:	4b3d      	ldr	r3, [pc, #244]	@ (80044ec <vTaskSuspend+0x108>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	e000      	b.n	80043fe <vTaskSuspend+0x1a>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	3304      	adds	r3, #4
 8004404:	4618      	mov	r0, r3
 8004406:	f7ff fdf5 	bl	8003ff4 <uxListRemove>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d115      	bne.n	800443c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004414:	4936      	ldr	r1, [pc, #216]	@ (80044f0 <vTaskSuspend+0x10c>)
 8004416:	4613      	mov	r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4413      	add	r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	440b      	add	r3, r1
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10a      	bne.n	800443c <vTaskSuspend+0x58>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800442a:	2201      	movs	r2, #1
 800442c:	fa02 f303 	lsl.w	r3, r2, r3
 8004430:	43da      	mvns	r2, r3
 8004432:	4b30      	ldr	r3, [pc, #192]	@ (80044f4 <vTaskSuspend+0x110>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4013      	ands	r3, r2
 8004438:	4a2e      	ldr	r2, [pc, #184]	@ (80044f4 <vTaskSuspend+0x110>)
 800443a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004440:	2b00      	cmp	r3, #0
 8004442:	d004      	beq.n	800444e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	3318      	adds	r3, #24
 8004448:	4618      	mov	r0, r3
 800444a:	f7ff fdd3 	bl	8003ff4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	3304      	adds	r3, #4
 8004452:	4619      	mov	r1, r3
 8004454:	4828      	ldr	r0, [pc, #160]	@ (80044f8 <vTaskSuspend+0x114>)
 8004456:	f7ff fd70 	bl	8003f3a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2b01      	cmp	r3, #1
 8004464:	d103      	bne.n	800446e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800446e:	f000 fe15 	bl	800509c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8004472:	4b22      	ldr	r3, [pc, #136]	@ (80044fc <vTaskSuspend+0x118>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d005      	beq.n	8004486 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800447a:	f000 fddd 	bl	8005038 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800447e:	f000 fc21 	bl	8004cc4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8004482:	f000 fe0b 	bl	800509c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8004486:	4b19      	ldr	r3, [pc, #100]	@ (80044ec <vTaskSuspend+0x108>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	429a      	cmp	r2, r3
 800448e:	d128      	bne.n	80044e2 <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 8004490:	4b1a      	ldr	r3, [pc, #104]	@ (80044fc <vTaskSuspend+0x118>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d018      	beq.n	80044ca <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8004498:	4b19      	ldr	r3, [pc, #100]	@ (8004500 <vTaskSuspend+0x11c>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00b      	beq.n	80044b8 <vTaskSuspend+0xd4>
	__asm volatile
 80044a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044a4:	f383 8811 	msr	BASEPRI, r3
 80044a8:	f3bf 8f6f 	isb	sy
 80044ac:	f3bf 8f4f 	dsb	sy
 80044b0:	60bb      	str	r3, [r7, #8]
}
 80044b2:	bf00      	nop
 80044b4:	bf00      	nop
 80044b6:	e7fd      	b.n	80044b4 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 80044b8:	4b12      	ldr	r3, [pc, #72]	@ (8004504 <vTaskSuspend+0x120>)
 80044ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044be:	601a      	str	r2, [r3, #0]
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80044c8:	e00b      	b.n	80044e2 <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80044ca:	4b0b      	ldr	r3, [pc, #44]	@ (80044f8 <vTaskSuspend+0x114>)
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	4b0e      	ldr	r3, [pc, #56]	@ (8004508 <vTaskSuspend+0x124>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d103      	bne.n	80044de <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 80044d6:	4b05      	ldr	r3, [pc, #20]	@ (80044ec <vTaskSuspend+0x108>)
 80044d8:	2200      	movs	r2, #0
 80044da:	601a      	str	r2, [r3, #0]
	}
 80044dc:	e001      	b.n	80044e2 <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 80044de:	f000 fadf 	bl	8004aa0 <vTaskSwitchContext>
	}
 80044e2:	bf00      	nop
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	20000a98 	.word	0x20000a98
 80044f0:	20000a9c 	.word	0x20000a9c
 80044f4:	20000ba0 	.word	0x20000ba0
 80044f8:	20000b84 	.word	0x20000b84
 80044fc:	20000ba4 	.word	0x20000ba4
 8004500:	20000bc0 	.word	0x20000bc0
 8004504:	e000ed04 	.word	0xe000ed04
 8004508:	20000b98 	.word	0x20000b98

0800450c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800450c:	b480      	push	{r7}
 800450e:	b087      	sub	sp, #28
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8004514:	2300      	movs	r3, #0
 8004516:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10b      	bne.n	800453a <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 8004522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004526:	f383 8811 	msr	BASEPRI, r3
 800452a:	f3bf 8f6f 	isb	sy
 800452e:	f3bf 8f4f 	dsb	sy
 8004532:	60fb      	str	r3, [r7, #12]
}
 8004534:	bf00      	nop
 8004536:	bf00      	nop
 8004538:	e7fd      	b.n	8004536 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	4a0a      	ldr	r2, [pc, #40]	@ (8004568 <prvTaskIsTaskSuspended+0x5c>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d10a      	bne.n	800455a <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004548:	4a08      	ldr	r2, [pc, #32]	@ (800456c <prvTaskIsTaskSuspended+0x60>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d005      	beq.n	800455a <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 8004556:	2301      	movs	r3, #1
 8004558:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800455a:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800455c:	4618      	mov	r0, r3
 800455e:	371c      	adds	r7, #28
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr
 8004568:	20000b84 	.word	0x20000b84
 800456c:	20000b58 	.word	0x20000b58

08004570 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10b      	bne.n	800459a <vTaskResume+0x2a>
	__asm volatile
 8004582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004586:	f383 8811 	msr	BASEPRI, r3
 800458a:	f3bf 8f6f 	isb	sy
 800458e:	f3bf 8f4f 	dsb	sy
 8004592:	60bb      	str	r3, [r7, #8]
}
 8004594:	bf00      	nop
 8004596:	bf00      	nop
 8004598:	e7fd      	b.n	8004596 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800459a:	4b20      	ldr	r3, [pc, #128]	@ (800461c <vTaskResume+0xac>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d037      	beq.n	8004614 <vTaskResume+0xa4>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d034      	beq.n	8004614 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 80045aa:	f000 fd45 	bl	8005038 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f7ff ffac 	bl	800450c <prvTaskIsTaskSuspended>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d02a      	beq.n	8004610 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	3304      	adds	r3, #4
 80045be:	4618      	mov	r0, r3
 80045c0:	f7ff fd18 	bl	8003ff4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c8:	2201      	movs	r2, #1
 80045ca:	409a      	lsls	r2, r3
 80045cc:	4b14      	ldr	r3, [pc, #80]	@ (8004620 <vTaskResume+0xb0>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	4a13      	ldr	r2, [pc, #76]	@ (8004620 <vTaskResume+0xb0>)
 80045d4:	6013      	str	r3, [r2, #0]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045da:	4613      	mov	r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	4413      	add	r3, r2
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	4a10      	ldr	r2, [pc, #64]	@ (8004624 <vTaskResume+0xb4>)
 80045e4:	441a      	add	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	3304      	adds	r3, #4
 80045ea:	4619      	mov	r1, r3
 80045ec:	4610      	mov	r0, r2
 80045ee:	f7ff fca4 	bl	8003f3a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045f6:	4b09      	ldr	r3, [pc, #36]	@ (800461c <vTaskResume+0xac>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d307      	bcc.n	8004610 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8004600:	4b09      	ldr	r3, [pc, #36]	@ (8004628 <vTaskResume+0xb8>)
 8004602:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004606:	601a      	str	r2, [r3, #0]
 8004608:	f3bf 8f4f 	dsb	sy
 800460c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8004610:	f000 fd44 	bl	800509c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004614:	bf00      	nop
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	20000a98 	.word	0x20000a98
 8004620:	20000ba0 	.word	0x20000ba0
 8004624:	20000a9c 	.word	0x20000a9c
 8004628:	e000ed04 	.word	0xe000ed04

0800462c <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 800462c:	b580      	push	{r7, lr}
 800462e:	b08a      	sub	sp, #40	@ 0x28
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8004634:	2300      	movs	r3, #0
 8004636:	627b      	str	r3, [r7, #36]	@ 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d10b      	bne.n	800465a <xTaskResumeFromISR+0x2e>
	__asm volatile
 8004642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004646:	f383 8811 	msr	BASEPRI, r3
 800464a:	f3bf 8f6f 	isb	sy
 800464e:	f3bf 8f4f 	dsb	sy
 8004652:	61bb      	str	r3, [r7, #24]
}
 8004654:	bf00      	nop
 8004656:	bf00      	nop
 8004658:	e7fd      	b.n	8004656 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800465a:	f000 fdcd 	bl	80051f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800465e:	f3ef 8211 	mrs	r2, BASEPRI
 8004662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004666:	f383 8811 	msr	BASEPRI, r3
 800466a:	f3bf 8f6f 	isb	sy
 800466e:	f3bf 8f4f 	dsb	sy
 8004672:	617a      	str	r2, [r7, #20]
 8004674:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004676:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004678:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800467a:	6a38      	ldr	r0, [r7, #32]
 800467c:	f7ff ff46 	bl	800450c <prvTaskIsTaskSuspended>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d02f      	beq.n	80046e6 <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004686:	4b1d      	ldr	r3, [pc, #116]	@ (80046fc <xTaskResumeFromISR+0xd0>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d125      	bne.n	80046da <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800468e:	6a3b      	ldr	r3, [r7, #32]
 8004690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004692:	4b1b      	ldr	r3, [pc, #108]	@ (8004700 <xTaskResumeFromISR+0xd4>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004698:	429a      	cmp	r2, r3
 800469a:	d301      	bcc.n	80046a0 <xTaskResumeFromISR+0x74>
					{
						xYieldRequired = pdTRUE;
 800469c:	2301      	movs	r3, #1
 800469e:	627b      	str	r3, [r7, #36]	@ 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046a0:	6a3b      	ldr	r3, [r7, #32]
 80046a2:	3304      	adds	r3, #4
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7ff fca5 	bl	8003ff4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80046aa:	6a3b      	ldr	r3, [r7, #32]
 80046ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ae:	2201      	movs	r2, #1
 80046b0:	409a      	lsls	r2, r3
 80046b2:	4b14      	ldr	r3, [pc, #80]	@ (8004704 <xTaskResumeFromISR+0xd8>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	4a12      	ldr	r2, [pc, #72]	@ (8004704 <xTaskResumeFromISR+0xd8>)
 80046ba:	6013      	str	r3, [r2, #0]
 80046bc:	6a3b      	ldr	r3, [r7, #32]
 80046be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046c0:	4613      	mov	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4413      	add	r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	4a0f      	ldr	r2, [pc, #60]	@ (8004708 <xTaskResumeFromISR+0xdc>)
 80046ca:	441a      	add	r2, r3
 80046cc:	6a3b      	ldr	r3, [r7, #32]
 80046ce:	3304      	adds	r3, #4
 80046d0:	4619      	mov	r1, r3
 80046d2:	4610      	mov	r0, r2
 80046d4:	f7ff fc31 	bl	8003f3a <vListInsertEnd>
 80046d8:	e005      	b.n	80046e6 <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80046da:	6a3b      	ldr	r3, [r7, #32]
 80046dc:	3318      	adds	r3, #24
 80046de:	4619      	mov	r1, r3
 80046e0:	480a      	ldr	r0, [pc, #40]	@ (800470c <xTaskResumeFromISR+0xe0>)
 80046e2:	f7ff fc2a 	bl	8003f3a <vListInsertEnd>
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80046f0:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 80046f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3728      	adds	r7, #40	@ 0x28
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	20000bc0 	.word	0x20000bc0
 8004700:	20000a98 	.word	0x20000a98
 8004704:	20000ba0 	.word	0x20000ba0
 8004708:	20000a9c 	.word	0x20000a9c
 800470c:	20000b58 	.word	0x20000b58

08004710 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b08a      	sub	sp, #40	@ 0x28
 8004714:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004716:	2300      	movs	r3, #0
 8004718:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800471a:	2300      	movs	r3, #0
 800471c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800471e:	463a      	mov	r2, r7
 8004720:	1d39      	adds	r1, r7, #4
 8004722:	f107 0308 	add.w	r3, r7, #8
 8004726:	4618      	mov	r0, r3
 8004728:	f7fb ff50 	bl	80005cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800472c:	6839      	ldr	r1, [r7, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	9202      	str	r2, [sp, #8]
 8004734:	9301      	str	r3, [sp, #4]
 8004736:	2300      	movs	r3, #0
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	2300      	movs	r3, #0
 800473c:	460a      	mov	r2, r1
 800473e:	491f      	ldr	r1, [pc, #124]	@ (80047bc <vTaskStartScheduler+0xac>)
 8004740:	481f      	ldr	r0, [pc, #124]	@ (80047c0 <vTaskStartScheduler+0xb0>)
 8004742:	f7ff fc81 	bl	8004048 <xTaskCreateStatic>
 8004746:	4603      	mov	r3, r0
 8004748:	4a1e      	ldr	r2, [pc, #120]	@ (80047c4 <vTaskStartScheduler+0xb4>)
 800474a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800474c:	4b1d      	ldr	r3, [pc, #116]	@ (80047c4 <vTaskStartScheduler+0xb4>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d002      	beq.n	800475a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004754:	2301      	movs	r3, #1
 8004756:	617b      	str	r3, [r7, #20]
 8004758:	e001      	b.n	800475e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800475a:	2300      	movs	r3, #0
 800475c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d116      	bne.n	8004792 <vTaskStartScheduler+0x82>
	__asm volatile
 8004764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004768:	f383 8811 	msr	BASEPRI, r3
 800476c:	f3bf 8f6f 	isb	sy
 8004770:	f3bf 8f4f 	dsb	sy
 8004774:	613b      	str	r3, [r7, #16]
}
 8004776:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004778:	4b13      	ldr	r3, [pc, #76]	@ (80047c8 <vTaskStartScheduler+0xb8>)
 800477a:	f04f 32ff 	mov.w	r2, #4294967295
 800477e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004780:	4b12      	ldr	r3, [pc, #72]	@ (80047cc <vTaskStartScheduler+0xbc>)
 8004782:	2201      	movs	r2, #1
 8004784:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004786:	4b12      	ldr	r3, [pc, #72]	@ (80047d0 <vTaskStartScheduler+0xc0>)
 8004788:	2200      	movs	r2, #0
 800478a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800478c:	f000 fbb0 	bl	8004ef0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004790:	e00f      	b.n	80047b2 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004798:	d10b      	bne.n	80047b2 <vTaskStartScheduler+0xa2>
	__asm volatile
 800479a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800479e:	f383 8811 	msr	BASEPRI, r3
 80047a2:	f3bf 8f6f 	isb	sy
 80047a6:	f3bf 8f4f 	dsb	sy
 80047aa:	60fb      	str	r3, [r7, #12]
}
 80047ac:	bf00      	nop
 80047ae:	bf00      	nop
 80047b0:	e7fd      	b.n	80047ae <vTaskStartScheduler+0x9e>
}
 80047b2:	bf00      	nop
 80047b4:	3718      	adds	r7, #24
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	080067a0 	.word	0x080067a0
 80047c0:	08004b59 	.word	0x08004b59
 80047c4:	20000bbc 	.word	0x20000bbc
 80047c8:	20000bb8 	.word	0x20000bb8
 80047cc:	20000ba4 	.word	0x20000ba4
 80047d0:	20000b9c 	.word	0x20000b9c

080047d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80047d4:	b480      	push	{r7}
 80047d6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80047d8:	4b04      	ldr	r3, [pc, #16]	@ (80047ec <vTaskSuspendAll+0x18>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	3301      	adds	r3, #1
 80047de:	4a03      	ldr	r2, [pc, #12]	@ (80047ec <vTaskSuspendAll+0x18>)
 80047e0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80047e2:	bf00      	nop
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr
 80047ec:	20000bc0 	.word	0x20000bc0

080047f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80047f6:	2300      	movs	r3, #0
 80047f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80047fa:	2300      	movs	r3, #0
 80047fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80047fe:	4b42      	ldr	r3, [pc, #264]	@ (8004908 <xTaskResumeAll+0x118>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10b      	bne.n	800481e <xTaskResumeAll+0x2e>
	__asm volatile
 8004806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800480a:	f383 8811 	msr	BASEPRI, r3
 800480e:	f3bf 8f6f 	isb	sy
 8004812:	f3bf 8f4f 	dsb	sy
 8004816:	603b      	str	r3, [r7, #0]
}
 8004818:	bf00      	nop
 800481a:	bf00      	nop
 800481c:	e7fd      	b.n	800481a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800481e:	f000 fc0b 	bl	8005038 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004822:	4b39      	ldr	r3, [pc, #228]	@ (8004908 <xTaskResumeAll+0x118>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	3b01      	subs	r3, #1
 8004828:	4a37      	ldr	r2, [pc, #220]	@ (8004908 <xTaskResumeAll+0x118>)
 800482a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800482c:	4b36      	ldr	r3, [pc, #216]	@ (8004908 <xTaskResumeAll+0x118>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d161      	bne.n	80048f8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004834:	4b35      	ldr	r3, [pc, #212]	@ (800490c <xTaskResumeAll+0x11c>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d05d      	beq.n	80048f8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800483c:	e02e      	b.n	800489c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800483e:	4b34      	ldr	r3, [pc, #208]	@ (8004910 <xTaskResumeAll+0x120>)
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	3318      	adds	r3, #24
 800484a:	4618      	mov	r0, r3
 800484c:	f7ff fbd2 	bl	8003ff4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	3304      	adds	r3, #4
 8004854:	4618      	mov	r0, r3
 8004856:	f7ff fbcd 	bl	8003ff4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800485e:	2201      	movs	r2, #1
 8004860:	409a      	lsls	r2, r3
 8004862:	4b2c      	ldr	r3, [pc, #176]	@ (8004914 <xTaskResumeAll+0x124>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4313      	orrs	r3, r2
 8004868:	4a2a      	ldr	r2, [pc, #168]	@ (8004914 <xTaskResumeAll+0x124>)
 800486a:	6013      	str	r3, [r2, #0]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004870:	4613      	mov	r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	4413      	add	r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4a27      	ldr	r2, [pc, #156]	@ (8004918 <xTaskResumeAll+0x128>)
 800487a:	441a      	add	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	3304      	adds	r3, #4
 8004880:	4619      	mov	r1, r3
 8004882:	4610      	mov	r0, r2
 8004884:	f7ff fb59 	bl	8003f3a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800488c:	4b23      	ldr	r3, [pc, #140]	@ (800491c <xTaskResumeAll+0x12c>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004892:	429a      	cmp	r2, r3
 8004894:	d302      	bcc.n	800489c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004896:	4b22      	ldr	r3, [pc, #136]	@ (8004920 <xTaskResumeAll+0x130>)
 8004898:	2201      	movs	r2, #1
 800489a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800489c:	4b1c      	ldr	r3, [pc, #112]	@ (8004910 <xTaskResumeAll+0x120>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1cc      	bne.n	800483e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80048aa:	f000 fa0b 	bl	8004cc4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80048ae:	4b1d      	ldr	r3, [pc, #116]	@ (8004924 <xTaskResumeAll+0x134>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d010      	beq.n	80048dc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80048ba:	f000 f837 	bl	800492c <xTaskIncrementTick>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d002      	beq.n	80048ca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80048c4:	4b16      	ldr	r3, [pc, #88]	@ (8004920 <xTaskResumeAll+0x130>)
 80048c6:	2201      	movs	r2, #1
 80048c8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	3b01      	subs	r3, #1
 80048ce:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1f1      	bne.n	80048ba <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80048d6:	4b13      	ldr	r3, [pc, #76]	@ (8004924 <xTaskResumeAll+0x134>)
 80048d8:	2200      	movs	r2, #0
 80048da:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80048dc:	4b10      	ldr	r3, [pc, #64]	@ (8004920 <xTaskResumeAll+0x130>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d009      	beq.n	80048f8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80048e4:	2301      	movs	r3, #1
 80048e6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80048e8:	4b0f      	ldr	r3, [pc, #60]	@ (8004928 <xTaskResumeAll+0x138>)
 80048ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048ee:	601a      	str	r2, [r3, #0]
 80048f0:	f3bf 8f4f 	dsb	sy
 80048f4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80048f8:	f000 fbd0 	bl	800509c <vPortExitCritical>

	return xAlreadyYielded;
 80048fc:	68bb      	ldr	r3, [r7, #8]
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3710      	adds	r7, #16
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	20000bc0 	.word	0x20000bc0
 800490c:	20000b98 	.word	0x20000b98
 8004910:	20000b58 	.word	0x20000b58
 8004914:	20000ba0 	.word	0x20000ba0
 8004918:	20000a9c 	.word	0x20000a9c
 800491c:	20000a98 	.word	0x20000a98
 8004920:	20000bac 	.word	0x20000bac
 8004924:	20000ba8 	.word	0x20000ba8
 8004928:	e000ed04 	.word	0xe000ed04

0800492c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b086      	sub	sp, #24
 8004930:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004932:	2300      	movs	r3, #0
 8004934:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004936:	4b4f      	ldr	r3, [pc, #316]	@ (8004a74 <xTaskIncrementTick+0x148>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	f040 808f 	bne.w	8004a5e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004940:	4b4d      	ldr	r3, [pc, #308]	@ (8004a78 <xTaskIncrementTick+0x14c>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	3301      	adds	r3, #1
 8004946:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004948:	4a4b      	ldr	r2, [pc, #300]	@ (8004a78 <xTaskIncrementTick+0x14c>)
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d121      	bne.n	8004998 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004954:	4b49      	ldr	r3, [pc, #292]	@ (8004a7c <xTaskIncrementTick+0x150>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00b      	beq.n	8004976 <xTaskIncrementTick+0x4a>
	__asm volatile
 800495e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004962:	f383 8811 	msr	BASEPRI, r3
 8004966:	f3bf 8f6f 	isb	sy
 800496a:	f3bf 8f4f 	dsb	sy
 800496e:	603b      	str	r3, [r7, #0]
}
 8004970:	bf00      	nop
 8004972:	bf00      	nop
 8004974:	e7fd      	b.n	8004972 <xTaskIncrementTick+0x46>
 8004976:	4b41      	ldr	r3, [pc, #260]	@ (8004a7c <xTaskIncrementTick+0x150>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	60fb      	str	r3, [r7, #12]
 800497c:	4b40      	ldr	r3, [pc, #256]	@ (8004a80 <xTaskIncrementTick+0x154>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a3e      	ldr	r2, [pc, #248]	@ (8004a7c <xTaskIncrementTick+0x150>)
 8004982:	6013      	str	r3, [r2, #0]
 8004984:	4a3e      	ldr	r2, [pc, #248]	@ (8004a80 <xTaskIncrementTick+0x154>)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6013      	str	r3, [r2, #0]
 800498a:	4b3e      	ldr	r3, [pc, #248]	@ (8004a84 <xTaskIncrementTick+0x158>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	3301      	adds	r3, #1
 8004990:	4a3c      	ldr	r2, [pc, #240]	@ (8004a84 <xTaskIncrementTick+0x158>)
 8004992:	6013      	str	r3, [r2, #0]
 8004994:	f000 f996 	bl	8004cc4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004998:	4b3b      	ldr	r3, [pc, #236]	@ (8004a88 <xTaskIncrementTick+0x15c>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d348      	bcc.n	8004a34 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049a2:	4b36      	ldr	r3, [pc, #216]	@ (8004a7c <xTaskIncrementTick+0x150>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d104      	bne.n	80049b6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049ac:	4b36      	ldr	r3, [pc, #216]	@ (8004a88 <xTaskIncrementTick+0x15c>)
 80049ae:	f04f 32ff 	mov.w	r2, #4294967295
 80049b2:	601a      	str	r2, [r3, #0]
					break;
 80049b4:	e03e      	b.n	8004a34 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049b6:	4b31      	ldr	r3, [pc, #196]	@ (8004a7c <xTaskIncrementTick+0x150>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d203      	bcs.n	80049d6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80049ce:	4a2e      	ldr	r2, [pc, #184]	@ (8004a88 <xTaskIncrementTick+0x15c>)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80049d4:	e02e      	b.n	8004a34 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	3304      	adds	r3, #4
 80049da:	4618      	mov	r0, r3
 80049dc:	f7ff fb0a 	bl	8003ff4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d004      	beq.n	80049f2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	3318      	adds	r3, #24
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7ff fb01 	bl	8003ff4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f6:	2201      	movs	r2, #1
 80049f8:	409a      	lsls	r2, r3
 80049fa:	4b24      	ldr	r3, [pc, #144]	@ (8004a8c <xTaskIncrementTick+0x160>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	4a22      	ldr	r2, [pc, #136]	@ (8004a8c <xTaskIncrementTick+0x160>)
 8004a02:	6013      	str	r3, [r2, #0]
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a08:	4613      	mov	r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	4413      	add	r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	4a1f      	ldr	r2, [pc, #124]	@ (8004a90 <xTaskIncrementTick+0x164>)
 8004a12:	441a      	add	r2, r3
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	3304      	adds	r3, #4
 8004a18:	4619      	mov	r1, r3
 8004a1a:	4610      	mov	r0, r2
 8004a1c:	f7ff fa8d 	bl	8003f3a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a24:	4b1b      	ldr	r3, [pc, #108]	@ (8004a94 <xTaskIncrementTick+0x168>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d3b9      	bcc.n	80049a2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a32:	e7b6      	b.n	80049a2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a34:	4b17      	ldr	r3, [pc, #92]	@ (8004a94 <xTaskIncrementTick+0x168>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a3a:	4915      	ldr	r1, [pc, #84]	@ (8004a90 <xTaskIncrementTick+0x164>)
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4413      	add	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	440b      	add	r3, r1
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d901      	bls.n	8004a50 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004a50:	4b11      	ldr	r3, [pc, #68]	@ (8004a98 <xTaskIncrementTick+0x16c>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d007      	beq.n	8004a68 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	617b      	str	r3, [r7, #20]
 8004a5c:	e004      	b.n	8004a68 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8004a9c <xTaskIncrementTick+0x170>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	3301      	adds	r3, #1
 8004a64:	4a0d      	ldr	r2, [pc, #52]	@ (8004a9c <xTaskIncrementTick+0x170>)
 8004a66:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004a68:	697b      	ldr	r3, [r7, #20]
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3718      	adds	r7, #24
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	20000bc0 	.word	0x20000bc0
 8004a78:	20000b9c 	.word	0x20000b9c
 8004a7c:	20000b50 	.word	0x20000b50
 8004a80:	20000b54 	.word	0x20000b54
 8004a84:	20000bb0 	.word	0x20000bb0
 8004a88:	20000bb8 	.word	0x20000bb8
 8004a8c:	20000ba0 	.word	0x20000ba0
 8004a90:	20000a9c 	.word	0x20000a9c
 8004a94:	20000a98 	.word	0x20000a98
 8004a98:	20000bac 	.word	0x20000bac
 8004a9c:	20000ba8 	.word	0x20000ba8

08004aa0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b087      	sub	sp, #28
 8004aa4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004aa6:	4b27      	ldr	r3, [pc, #156]	@ (8004b44 <vTaskSwitchContext+0xa4>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004aae:	4b26      	ldr	r3, [pc, #152]	@ (8004b48 <vTaskSwitchContext+0xa8>)
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004ab4:	e040      	b.n	8004b38 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004ab6:	4b24      	ldr	r3, [pc, #144]	@ (8004b48 <vTaskSwitchContext+0xa8>)
 8004ab8:	2200      	movs	r2, #0
 8004aba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004abc:	4b23      	ldr	r3, [pc, #140]	@ (8004b4c <vTaskSwitchContext+0xac>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	fab3 f383 	clz	r3, r3
 8004ac8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004aca:	7afb      	ldrb	r3, [r7, #11]
 8004acc:	f1c3 031f 	rsb	r3, r3, #31
 8004ad0:	617b      	str	r3, [r7, #20]
 8004ad2:	491f      	ldr	r1, [pc, #124]	@ (8004b50 <vTaskSwitchContext+0xb0>)
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	4413      	add	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	440b      	add	r3, r1
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10b      	bne.n	8004afe <vTaskSwitchContext+0x5e>
	__asm volatile
 8004ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aea:	f383 8811 	msr	BASEPRI, r3
 8004aee:	f3bf 8f6f 	isb	sy
 8004af2:	f3bf 8f4f 	dsb	sy
 8004af6:	607b      	str	r3, [r7, #4]
}
 8004af8:	bf00      	nop
 8004afa:	bf00      	nop
 8004afc:	e7fd      	b.n	8004afa <vTaskSwitchContext+0x5a>
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	4613      	mov	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4413      	add	r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	4a11      	ldr	r2, [pc, #68]	@ (8004b50 <vTaskSwitchContext+0xb0>)
 8004b0a:	4413      	add	r3, r2
 8004b0c:	613b      	str	r3, [r7, #16]
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	685a      	ldr	r2, [r3, #4]
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	605a      	str	r2, [r3, #4]
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	3308      	adds	r3, #8
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d104      	bne.n	8004b2e <vTaskSwitchContext+0x8e>
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	685a      	ldr	r2, [r3, #4]
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	605a      	str	r2, [r3, #4]
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	4a07      	ldr	r2, [pc, #28]	@ (8004b54 <vTaskSwitchContext+0xb4>)
 8004b36:	6013      	str	r3, [r2, #0]
}
 8004b38:	bf00      	nop
 8004b3a:	371c      	adds	r7, #28
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr
 8004b44:	20000bc0 	.word	0x20000bc0
 8004b48:	20000bac 	.word	0x20000bac
 8004b4c:	20000ba0 	.word	0x20000ba0
 8004b50:	20000a9c 	.word	0x20000a9c
 8004b54:	20000a98 	.word	0x20000a98

08004b58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004b60:	f000 f852 	bl	8004c08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b64:	4b06      	ldr	r3, [pc, #24]	@ (8004b80 <prvIdleTask+0x28>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d9f9      	bls.n	8004b60 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004b6c:	4b05      	ldr	r3, [pc, #20]	@ (8004b84 <prvIdleTask+0x2c>)
 8004b6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b72:	601a      	str	r2, [r3, #0]
 8004b74:	f3bf 8f4f 	dsb	sy
 8004b78:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004b7c:	e7f0      	b.n	8004b60 <prvIdleTask+0x8>
 8004b7e:	bf00      	nop
 8004b80:	20000a9c 	.word	0x20000a9c
 8004b84:	e000ed04 	.word	0xe000ed04

08004b88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b8e:	2300      	movs	r3, #0
 8004b90:	607b      	str	r3, [r7, #4]
 8004b92:	e00c      	b.n	8004bae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	4613      	mov	r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	4413      	add	r3, r2
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	4a12      	ldr	r2, [pc, #72]	@ (8004be8 <prvInitialiseTaskLists+0x60>)
 8004ba0:	4413      	add	r3, r2
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7ff f99c 	bl	8003ee0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	3301      	adds	r3, #1
 8004bac:	607b      	str	r3, [r7, #4]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2b06      	cmp	r3, #6
 8004bb2:	d9ef      	bls.n	8004b94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004bb4:	480d      	ldr	r0, [pc, #52]	@ (8004bec <prvInitialiseTaskLists+0x64>)
 8004bb6:	f7ff f993 	bl	8003ee0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004bba:	480d      	ldr	r0, [pc, #52]	@ (8004bf0 <prvInitialiseTaskLists+0x68>)
 8004bbc:	f7ff f990 	bl	8003ee0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004bc0:	480c      	ldr	r0, [pc, #48]	@ (8004bf4 <prvInitialiseTaskLists+0x6c>)
 8004bc2:	f7ff f98d 	bl	8003ee0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004bc6:	480c      	ldr	r0, [pc, #48]	@ (8004bf8 <prvInitialiseTaskLists+0x70>)
 8004bc8:	f7ff f98a 	bl	8003ee0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004bcc:	480b      	ldr	r0, [pc, #44]	@ (8004bfc <prvInitialiseTaskLists+0x74>)
 8004bce:	f7ff f987 	bl	8003ee0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8004c00 <prvInitialiseTaskLists+0x78>)
 8004bd4:	4a05      	ldr	r2, [pc, #20]	@ (8004bec <prvInitialiseTaskLists+0x64>)
 8004bd6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8004c04 <prvInitialiseTaskLists+0x7c>)
 8004bda:	4a05      	ldr	r2, [pc, #20]	@ (8004bf0 <prvInitialiseTaskLists+0x68>)
 8004bdc:	601a      	str	r2, [r3, #0]
}
 8004bde:	bf00      	nop
 8004be0:	3708      	adds	r7, #8
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	20000a9c 	.word	0x20000a9c
 8004bec:	20000b28 	.word	0x20000b28
 8004bf0:	20000b3c 	.word	0x20000b3c
 8004bf4:	20000b58 	.word	0x20000b58
 8004bf8:	20000b6c 	.word	0x20000b6c
 8004bfc:	20000b84 	.word	0x20000b84
 8004c00:	20000b50 	.word	0x20000b50
 8004c04:	20000b54 	.word	0x20000b54

08004c08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c0e:	e019      	b.n	8004c44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004c10:	f000 fa12 	bl	8005038 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c14:	4b10      	ldr	r3, [pc, #64]	@ (8004c58 <prvCheckTasksWaitingTermination+0x50>)
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	3304      	adds	r3, #4
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7ff f9e7 	bl	8003ff4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004c26:	4b0d      	ldr	r3, [pc, #52]	@ (8004c5c <prvCheckTasksWaitingTermination+0x54>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	4a0b      	ldr	r2, [pc, #44]	@ (8004c5c <prvCheckTasksWaitingTermination+0x54>)
 8004c2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c30:	4b0b      	ldr	r3, [pc, #44]	@ (8004c60 <prvCheckTasksWaitingTermination+0x58>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	3b01      	subs	r3, #1
 8004c36:	4a0a      	ldr	r2, [pc, #40]	@ (8004c60 <prvCheckTasksWaitingTermination+0x58>)
 8004c38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c3a:	f000 fa2f 	bl	800509c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f810 	bl	8004c64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c44:	4b06      	ldr	r3, [pc, #24]	@ (8004c60 <prvCheckTasksWaitingTermination+0x58>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1e1      	bne.n	8004c10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004c4c:	bf00      	nop
 8004c4e:	bf00      	nop
 8004c50:	3708      	adds	r7, #8
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	20000b6c 	.word	0x20000b6c
 8004c5c:	20000b98 	.word	0x20000b98
 8004c60:	20000b80 	.word	0x20000b80

08004c64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d108      	bne.n	8004c88 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 fbcc 	bl	8005418 <vPortFree>
				vPortFree( pxTCB );
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 fbc9 	bl	8005418 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004c86:	e019      	b.n	8004cbc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d103      	bne.n	8004c9a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 fbc0 	bl	8005418 <vPortFree>
	}
 8004c98:	e010      	b.n	8004cbc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d00b      	beq.n	8004cbc <prvDeleteTCB+0x58>
	__asm volatile
 8004ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ca8:	f383 8811 	msr	BASEPRI, r3
 8004cac:	f3bf 8f6f 	isb	sy
 8004cb0:	f3bf 8f4f 	dsb	sy
 8004cb4:	60fb      	str	r3, [r7, #12]
}
 8004cb6:	bf00      	nop
 8004cb8:	bf00      	nop
 8004cba:	e7fd      	b.n	8004cb8 <prvDeleteTCB+0x54>
	}
 8004cbc:	bf00      	nop
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cca:	4b0c      	ldr	r3, [pc, #48]	@ (8004cfc <prvResetNextTaskUnblockTime+0x38>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d104      	bne.n	8004cde <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8004d00 <prvResetNextTaskUnblockTime+0x3c>)
 8004cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8004cda:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004cdc:	e008      	b.n	8004cf0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cde:	4b07      	ldr	r3, [pc, #28]	@ (8004cfc <prvResetNextTaskUnblockTime+0x38>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	4a04      	ldr	r2, [pc, #16]	@ (8004d00 <prvResetNextTaskUnblockTime+0x3c>)
 8004cee:	6013      	str	r3, [r2, #0]
}
 8004cf0:	bf00      	nop
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr
 8004cfc:	20000b50 	.word	0x20000b50
 8004d00:	20000bb8 	.word	0x20000bb8

08004d04 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004d0e:	4b29      	ldr	r3, [pc, #164]	@ (8004db4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d14:	4b28      	ldr	r3, [pc, #160]	@ (8004db8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	3304      	adds	r3, #4
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7ff f96a 	bl	8003ff4 <uxListRemove>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10b      	bne.n	8004d3e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004d26:	4b24      	ldr	r3, [pc, #144]	@ (8004db8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d32:	43da      	mvns	r2, r3
 8004d34:	4b21      	ldr	r3, [pc, #132]	@ (8004dbc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4013      	ands	r3, r2
 8004d3a:	4a20      	ldr	r2, [pc, #128]	@ (8004dbc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004d3c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d44:	d10a      	bne.n	8004d5c <prvAddCurrentTaskToDelayedList+0x58>
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d007      	beq.n	8004d5c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8004db8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	3304      	adds	r3, #4
 8004d52:	4619      	mov	r1, r3
 8004d54:	481a      	ldr	r0, [pc, #104]	@ (8004dc0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004d56:	f7ff f8f0 	bl	8003f3a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004d5a:	e026      	b.n	8004daa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4413      	add	r3, r2
 8004d62:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d64:	4b14      	ldr	r3, [pc, #80]	@ (8004db8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68ba      	ldr	r2, [r7, #8]
 8004d6a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004d6c:	68ba      	ldr	r2, [r7, #8]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d209      	bcs.n	8004d88 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d74:	4b13      	ldr	r3, [pc, #76]	@ (8004dc4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	4b0f      	ldr	r3, [pc, #60]	@ (8004db8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	3304      	adds	r3, #4
 8004d7e:	4619      	mov	r1, r3
 8004d80:	4610      	mov	r0, r2
 8004d82:	f7ff f8fe 	bl	8003f82 <vListInsert>
}
 8004d86:	e010      	b.n	8004daa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d88:	4b0f      	ldr	r3, [pc, #60]	@ (8004dc8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8004db8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	3304      	adds	r3, #4
 8004d92:	4619      	mov	r1, r3
 8004d94:	4610      	mov	r0, r2
 8004d96:	f7ff f8f4 	bl	8003f82 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8004dcc <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d202      	bcs.n	8004daa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004da4:	4a09      	ldr	r2, [pc, #36]	@ (8004dcc <prvAddCurrentTaskToDelayedList+0xc8>)
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	6013      	str	r3, [r2, #0]
}
 8004daa:	bf00      	nop
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	20000b9c 	.word	0x20000b9c
 8004db8:	20000a98 	.word	0x20000a98
 8004dbc:	20000ba0 	.word	0x20000ba0
 8004dc0:	20000b84 	.word	0x20000b84
 8004dc4:	20000b54 	.word	0x20000b54
 8004dc8:	20000b50 	.word	0x20000b50
 8004dcc:	20000bb8 	.word	0x20000bb8

08004dd0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	3b04      	subs	r3, #4
 8004de0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004de8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	3b04      	subs	r3, #4
 8004dee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	f023 0201 	bic.w	r2, r3, #1
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	3b04      	subs	r3, #4
 8004dfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004e00:	4a0c      	ldr	r2, [pc, #48]	@ (8004e34 <pxPortInitialiseStack+0x64>)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	3b14      	subs	r3, #20
 8004e0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	3b04      	subs	r3, #4
 8004e16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f06f 0202 	mvn.w	r2, #2
 8004e1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	3b20      	subs	r3, #32
 8004e24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004e26:	68fb      	ldr	r3, [r7, #12]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3714      	adds	r7, #20
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr
 8004e34:	08004e39 	.word	0x08004e39

08004e38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004e42:	4b13      	ldr	r3, [pc, #76]	@ (8004e90 <prvTaskExitError+0x58>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e4a:	d00b      	beq.n	8004e64 <prvTaskExitError+0x2c>
	__asm volatile
 8004e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e50:	f383 8811 	msr	BASEPRI, r3
 8004e54:	f3bf 8f6f 	isb	sy
 8004e58:	f3bf 8f4f 	dsb	sy
 8004e5c:	60fb      	str	r3, [r7, #12]
}
 8004e5e:	bf00      	nop
 8004e60:	bf00      	nop
 8004e62:	e7fd      	b.n	8004e60 <prvTaskExitError+0x28>
	__asm volatile
 8004e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e68:	f383 8811 	msr	BASEPRI, r3
 8004e6c:	f3bf 8f6f 	isb	sy
 8004e70:	f3bf 8f4f 	dsb	sy
 8004e74:	60bb      	str	r3, [r7, #8]
}
 8004e76:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004e78:	bf00      	nop
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d0fc      	beq.n	8004e7a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004e80:	bf00      	nop
 8004e82:	bf00      	nop
 8004e84:	3714      	adds	r7, #20
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	2000000c 	.word	0x2000000c
	...

08004ea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ea0:	4b07      	ldr	r3, [pc, #28]	@ (8004ec0 <pxCurrentTCBConst2>)
 8004ea2:	6819      	ldr	r1, [r3, #0]
 8004ea4:	6808      	ldr	r0, [r1, #0]
 8004ea6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eaa:	f380 8809 	msr	PSP, r0
 8004eae:	f3bf 8f6f 	isb	sy
 8004eb2:	f04f 0000 	mov.w	r0, #0
 8004eb6:	f380 8811 	msr	BASEPRI, r0
 8004eba:	4770      	bx	lr
 8004ebc:	f3af 8000 	nop.w

08004ec0 <pxCurrentTCBConst2>:
 8004ec0:	20000a98 	.word	0x20000a98
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ec4:	bf00      	nop
 8004ec6:	bf00      	nop

08004ec8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004ec8:	4808      	ldr	r0, [pc, #32]	@ (8004eec <prvPortStartFirstTask+0x24>)
 8004eca:	6800      	ldr	r0, [r0, #0]
 8004ecc:	6800      	ldr	r0, [r0, #0]
 8004ece:	f380 8808 	msr	MSP, r0
 8004ed2:	f04f 0000 	mov.w	r0, #0
 8004ed6:	f380 8814 	msr	CONTROL, r0
 8004eda:	b662      	cpsie	i
 8004edc:	b661      	cpsie	f
 8004ede:	f3bf 8f4f 	dsb	sy
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	df00      	svc	0
 8004ee8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004eea:	bf00      	nop
 8004eec:	e000ed08 	.word	0xe000ed08

08004ef0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b086      	sub	sp, #24
 8004ef4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004ef6:	4b47      	ldr	r3, [pc, #284]	@ (8005014 <xPortStartScheduler+0x124>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a47      	ldr	r2, [pc, #284]	@ (8005018 <xPortStartScheduler+0x128>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d10b      	bne.n	8004f18 <xPortStartScheduler+0x28>
	__asm volatile
 8004f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f04:	f383 8811 	msr	BASEPRI, r3
 8004f08:	f3bf 8f6f 	isb	sy
 8004f0c:	f3bf 8f4f 	dsb	sy
 8004f10:	60fb      	str	r3, [r7, #12]
}
 8004f12:	bf00      	nop
 8004f14:	bf00      	nop
 8004f16:	e7fd      	b.n	8004f14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004f18:	4b3e      	ldr	r3, [pc, #248]	@ (8005014 <xPortStartScheduler+0x124>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a3f      	ldr	r2, [pc, #252]	@ (800501c <xPortStartScheduler+0x12c>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d10b      	bne.n	8004f3a <xPortStartScheduler+0x4a>
	__asm volatile
 8004f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f26:	f383 8811 	msr	BASEPRI, r3
 8004f2a:	f3bf 8f6f 	isb	sy
 8004f2e:	f3bf 8f4f 	dsb	sy
 8004f32:	613b      	str	r3, [r7, #16]
}
 8004f34:	bf00      	nop
 8004f36:	bf00      	nop
 8004f38:	e7fd      	b.n	8004f36 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004f3a:	4b39      	ldr	r3, [pc, #228]	@ (8005020 <xPortStartScheduler+0x130>)
 8004f3c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	22ff      	movs	r2, #255	@ 0xff
 8004f4a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004f54:	78fb      	ldrb	r3, [r7, #3]
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004f5c:	b2da      	uxtb	r2, r3
 8004f5e:	4b31      	ldr	r3, [pc, #196]	@ (8005024 <xPortStartScheduler+0x134>)
 8004f60:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004f62:	4b31      	ldr	r3, [pc, #196]	@ (8005028 <xPortStartScheduler+0x138>)
 8004f64:	2207      	movs	r2, #7
 8004f66:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f68:	e009      	b.n	8004f7e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004f6a:	4b2f      	ldr	r3, [pc, #188]	@ (8005028 <xPortStartScheduler+0x138>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	4a2d      	ldr	r2, [pc, #180]	@ (8005028 <xPortStartScheduler+0x138>)
 8004f72:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004f74:	78fb      	ldrb	r3, [r7, #3]
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f7e:	78fb      	ldrb	r3, [r7, #3]
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f86:	2b80      	cmp	r3, #128	@ 0x80
 8004f88:	d0ef      	beq.n	8004f6a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004f8a:	4b27      	ldr	r3, [pc, #156]	@ (8005028 <xPortStartScheduler+0x138>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f1c3 0307 	rsb	r3, r3, #7
 8004f92:	2b04      	cmp	r3, #4
 8004f94:	d00b      	beq.n	8004fae <xPortStartScheduler+0xbe>
	__asm volatile
 8004f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f9a:	f383 8811 	msr	BASEPRI, r3
 8004f9e:	f3bf 8f6f 	isb	sy
 8004fa2:	f3bf 8f4f 	dsb	sy
 8004fa6:	60bb      	str	r3, [r7, #8]
}
 8004fa8:	bf00      	nop
 8004faa:	bf00      	nop
 8004fac:	e7fd      	b.n	8004faa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004fae:	4b1e      	ldr	r3, [pc, #120]	@ (8005028 <xPortStartScheduler+0x138>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	021b      	lsls	r3, r3, #8
 8004fb4:	4a1c      	ldr	r2, [pc, #112]	@ (8005028 <xPortStartScheduler+0x138>)
 8004fb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8005028 <xPortStartScheduler+0x138>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004fc0:	4a19      	ldr	r2, [pc, #100]	@ (8005028 <xPortStartScheduler+0x138>)
 8004fc2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	b2da      	uxtb	r2, r3
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004fcc:	4b17      	ldr	r3, [pc, #92]	@ (800502c <xPortStartScheduler+0x13c>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a16      	ldr	r2, [pc, #88]	@ (800502c <xPortStartScheduler+0x13c>)
 8004fd2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004fd6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004fd8:	4b14      	ldr	r3, [pc, #80]	@ (800502c <xPortStartScheduler+0x13c>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a13      	ldr	r2, [pc, #76]	@ (800502c <xPortStartScheduler+0x13c>)
 8004fde:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004fe2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004fe4:	f000 f8da 	bl	800519c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004fe8:	4b11      	ldr	r3, [pc, #68]	@ (8005030 <xPortStartScheduler+0x140>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004fee:	f000 f8f9 	bl	80051e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004ff2:	4b10      	ldr	r3, [pc, #64]	@ (8005034 <xPortStartScheduler+0x144>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a0f      	ldr	r2, [pc, #60]	@ (8005034 <xPortStartScheduler+0x144>)
 8004ff8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004ffc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004ffe:	f7ff ff63 	bl	8004ec8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005002:	f7ff fd4d 	bl	8004aa0 <vTaskSwitchContext>
	prvTaskExitError();
 8005006:	f7ff ff17 	bl	8004e38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3718      	adds	r7, #24
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	e000ed00 	.word	0xe000ed00
 8005018:	410fc271 	.word	0x410fc271
 800501c:	410fc270 	.word	0x410fc270
 8005020:	e000e400 	.word	0xe000e400
 8005024:	20000bc4 	.word	0x20000bc4
 8005028:	20000bc8 	.word	0x20000bc8
 800502c:	e000ed20 	.word	0xe000ed20
 8005030:	2000000c 	.word	0x2000000c
 8005034:	e000ef34 	.word	0xe000ef34

08005038 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
	__asm volatile
 800503e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005042:	f383 8811 	msr	BASEPRI, r3
 8005046:	f3bf 8f6f 	isb	sy
 800504a:	f3bf 8f4f 	dsb	sy
 800504e:	607b      	str	r3, [r7, #4]
}
 8005050:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005052:	4b10      	ldr	r3, [pc, #64]	@ (8005094 <vPortEnterCritical+0x5c>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	3301      	adds	r3, #1
 8005058:	4a0e      	ldr	r2, [pc, #56]	@ (8005094 <vPortEnterCritical+0x5c>)
 800505a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800505c:	4b0d      	ldr	r3, [pc, #52]	@ (8005094 <vPortEnterCritical+0x5c>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d110      	bne.n	8005086 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005064:	4b0c      	ldr	r3, [pc, #48]	@ (8005098 <vPortEnterCritical+0x60>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00b      	beq.n	8005086 <vPortEnterCritical+0x4e>
	__asm volatile
 800506e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005072:	f383 8811 	msr	BASEPRI, r3
 8005076:	f3bf 8f6f 	isb	sy
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	603b      	str	r3, [r7, #0]
}
 8005080:	bf00      	nop
 8005082:	bf00      	nop
 8005084:	e7fd      	b.n	8005082 <vPortEnterCritical+0x4a>
	}
}
 8005086:	bf00      	nop
 8005088:	370c      	adds	r7, #12
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	2000000c 	.word	0x2000000c
 8005098:	e000ed04 	.word	0xe000ed04

0800509c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80050a2:	4b12      	ldr	r3, [pc, #72]	@ (80050ec <vPortExitCritical+0x50>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10b      	bne.n	80050c2 <vPortExitCritical+0x26>
	__asm volatile
 80050aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ae:	f383 8811 	msr	BASEPRI, r3
 80050b2:	f3bf 8f6f 	isb	sy
 80050b6:	f3bf 8f4f 	dsb	sy
 80050ba:	607b      	str	r3, [r7, #4]
}
 80050bc:	bf00      	nop
 80050be:	bf00      	nop
 80050c0:	e7fd      	b.n	80050be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80050c2:	4b0a      	ldr	r3, [pc, #40]	@ (80050ec <vPortExitCritical+0x50>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	3b01      	subs	r3, #1
 80050c8:	4a08      	ldr	r2, [pc, #32]	@ (80050ec <vPortExitCritical+0x50>)
 80050ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80050cc:	4b07      	ldr	r3, [pc, #28]	@ (80050ec <vPortExitCritical+0x50>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d105      	bne.n	80050e0 <vPortExitCritical+0x44>
 80050d4:	2300      	movs	r3, #0
 80050d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	f383 8811 	msr	BASEPRI, r3
}
 80050de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	2000000c 	.word	0x2000000c

080050f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80050f0:	f3ef 8009 	mrs	r0, PSP
 80050f4:	f3bf 8f6f 	isb	sy
 80050f8:	4b15      	ldr	r3, [pc, #84]	@ (8005150 <pxCurrentTCBConst>)
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	f01e 0f10 	tst.w	lr, #16
 8005100:	bf08      	it	eq
 8005102:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005106:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800510a:	6010      	str	r0, [r2, #0]
 800510c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005110:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005114:	f380 8811 	msr	BASEPRI, r0
 8005118:	f3bf 8f4f 	dsb	sy
 800511c:	f3bf 8f6f 	isb	sy
 8005120:	f7ff fcbe 	bl	8004aa0 <vTaskSwitchContext>
 8005124:	f04f 0000 	mov.w	r0, #0
 8005128:	f380 8811 	msr	BASEPRI, r0
 800512c:	bc09      	pop	{r0, r3}
 800512e:	6819      	ldr	r1, [r3, #0]
 8005130:	6808      	ldr	r0, [r1, #0]
 8005132:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005136:	f01e 0f10 	tst.w	lr, #16
 800513a:	bf08      	it	eq
 800513c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005140:	f380 8809 	msr	PSP, r0
 8005144:	f3bf 8f6f 	isb	sy
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	f3af 8000 	nop.w

08005150 <pxCurrentTCBConst>:
 8005150:	20000a98 	.word	0x20000a98
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005154:	bf00      	nop
 8005156:	bf00      	nop

08005158 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
	__asm volatile
 800515e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005162:	f383 8811 	msr	BASEPRI, r3
 8005166:	f3bf 8f6f 	isb	sy
 800516a:	f3bf 8f4f 	dsb	sy
 800516e:	607b      	str	r3, [r7, #4]
}
 8005170:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005172:	f7ff fbdb 	bl	800492c <xTaskIncrementTick>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d003      	beq.n	8005184 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800517c:	4b06      	ldr	r3, [pc, #24]	@ (8005198 <SysTick_Handler+0x40>)
 800517e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005182:	601a      	str	r2, [r3, #0]
 8005184:	2300      	movs	r3, #0
 8005186:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	f383 8811 	msr	BASEPRI, r3
}
 800518e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005190:	bf00      	nop
 8005192:	3708      	adds	r7, #8
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	e000ed04 	.word	0xe000ed04

0800519c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800519c:	b480      	push	{r7}
 800519e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80051a0:	4b0b      	ldr	r3, [pc, #44]	@ (80051d0 <vPortSetupTimerInterrupt+0x34>)
 80051a2:	2200      	movs	r2, #0
 80051a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80051a6:	4b0b      	ldr	r3, [pc, #44]	@ (80051d4 <vPortSetupTimerInterrupt+0x38>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80051ac:	4b0a      	ldr	r3, [pc, #40]	@ (80051d8 <vPortSetupTimerInterrupt+0x3c>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a0a      	ldr	r2, [pc, #40]	@ (80051dc <vPortSetupTimerInterrupt+0x40>)
 80051b2:	fba2 2303 	umull	r2, r3, r2, r3
 80051b6:	099b      	lsrs	r3, r3, #6
 80051b8:	4a09      	ldr	r2, [pc, #36]	@ (80051e0 <vPortSetupTimerInterrupt+0x44>)
 80051ba:	3b01      	subs	r3, #1
 80051bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80051be:	4b04      	ldr	r3, [pc, #16]	@ (80051d0 <vPortSetupTimerInterrupt+0x34>)
 80051c0:	2207      	movs	r2, #7
 80051c2:	601a      	str	r2, [r3, #0]
}
 80051c4:	bf00      	nop
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	e000e010 	.word	0xe000e010
 80051d4:	e000e018 	.word	0xe000e018
 80051d8:	20000000 	.word	0x20000000
 80051dc:	10624dd3 	.word	0x10624dd3
 80051e0:	e000e014 	.word	0xe000e014

080051e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80051e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80051f4 <vPortEnableVFP+0x10>
 80051e8:	6801      	ldr	r1, [r0, #0]
 80051ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80051ee:	6001      	str	r1, [r0, #0]
 80051f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80051f2:	bf00      	nop
 80051f4:	e000ed88 	.word	0xe000ed88

080051f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80051fe:	f3ef 8305 	mrs	r3, IPSR
 8005202:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2b0f      	cmp	r3, #15
 8005208:	d915      	bls.n	8005236 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800520a:	4a18      	ldr	r2, [pc, #96]	@ (800526c <vPortValidateInterruptPriority+0x74>)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4413      	add	r3, r2
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005214:	4b16      	ldr	r3, [pc, #88]	@ (8005270 <vPortValidateInterruptPriority+0x78>)
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	7afa      	ldrb	r2, [r7, #11]
 800521a:	429a      	cmp	r2, r3
 800521c:	d20b      	bcs.n	8005236 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800521e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005222:	f383 8811 	msr	BASEPRI, r3
 8005226:	f3bf 8f6f 	isb	sy
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	607b      	str	r3, [r7, #4]
}
 8005230:	bf00      	nop
 8005232:	bf00      	nop
 8005234:	e7fd      	b.n	8005232 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005236:	4b0f      	ldr	r3, [pc, #60]	@ (8005274 <vPortValidateInterruptPriority+0x7c>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800523e:	4b0e      	ldr	r3, [pc, #56]	@ (8005278 <vPortValidateInterruptPriority+0x80>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	429a      	cmp	r2, r3
 8005244:	d90b      	bls.n	800525e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800524a:	f383 8811 	msr	BASEPRI, r3
 800524e:	f3bf 8f6f 	isb	sy
 8005252:	f3bf 8f4f 	dsb	sy
 8005256:	603b      	str	r3, [r7, #0]
}
 8005258:	bf00      	nop
 800525a:	bf00      	nop
 800525c:	e7fd      	b.n	800525a <vPortValidateInterruptPriority+0x62>
	}
 800525e:	bf00      	nop
 8005260:	3714      	adds	r7, #20
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	e000e3f0 	.word	0xe000e3f0
 8005270:	20000bc4 	.word	0x20000bc4
 8005274:	e000ed0c 	.word	0xe000ed0c
 8005278:	20000bc8 	.word	0x20000bc8

0800527c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b08a      	sub	sp, #40	@ 0x28
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005284:	2300      	movs	r3, #0
 8005286:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005288:	f7ff faa4 	bl	80047d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800528c:	4b5c      	ldr	r3, [pc, #368]	@ (8005400 <pvPortMalloc+0x184>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d101      	bne.n	8005298 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005294:	f000 f924 	bl	80054e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005298:	4b5a      	ldr	r3, [pc, #360]	@ (8005404 <pvPortMalloc+0x188>)
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4013      	ands	r3, r2
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f040 8095 	bne.w	80053d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d01e      	beq.n	80052ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80052ac:	2208      	movs	r2, #8
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4413      	add	r3, r2
 80052b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f003 0307 	and.w	r3, r3, #7
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d015      	beq.n	80052ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f023 0307 	bic.w	r3, r3, #7
 80052c4:	3308      	adds	r3, #8
 80052c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f003 0307 	and.w	r3, r3, #7
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00b      	beq.n	80052ea <pvPortMalloc+0x6e>
	__asm volatile
 80052d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052d6:	f383 8811 	msr	BASEPRI, r3
 80052da:	f3bf 8f6f 	isb	sy
 80052de:	f3bf 8f4f 	dsb	sy
 80052e2:	617b      	str	r3, [r7, #20]
}
 80052e4:	bf00      	nop
 80052e6:	bf00      	nop
 80052e8:	e7fd      	b.n	80052e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d06f      	beq.n	80053d0 <pvPortMalloc+0x154>
 80052f0:	4b45      	ldr	r3, [pc, #276]	@ (8005408 <pvPortMalloc+0x18c>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d86a      	bhi.n	80053d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80052fa:	4b44      	ldr	r3, [pc, #272]	@ (800540c <pvPortMalloc+0x190>)
 80052fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80052fe:	4b43      	ldr	r3, [pc, #268]	@ (800540c <pvPortMalloc+0x190>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005304:	e004      	b.n	8005310 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005308:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800530a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	429a      	cmp	r2, r3
 8005318:	d903      	bls.n	8005322 <pvPortMalloc+0xa6>
 800531a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1f1      	bne.n	8005306 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005322:	4b37      	ldr	r3, [pc, #220]	@ (8005400 <pvPortMalloc+0x184>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005328:	429a      	cmp	r2, r3
 800532a:	d051      	beq.n	80053d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800532c:	6a3b      	ldr	r3, [r7, #32]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2208      	movs	r2, #8
 8005332:	4413      	add	r3, r2
 8005334:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	6a3b      	ldr	r3, [r7, #32]
 800533c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800533e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	1ad2      	subs	r2, r2, r3
 8005346:	2308      	movs	r3, #8
 8005348:	005b      	lsls	r3, r3, #1
 800534a:	429a      	cmp	r2, r3
 800534c:	d920      	bls.n	8005390 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800534e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4413      	add	r3, r2
 8005354:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	f003 0307 	and.w	r3, r3, #7
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00b      	beq.n	8005378 <pvPortMalloc+0xfc>
	__asm volatile
 8005360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005364:	f383 8811 	msr	BASEPRI, r3
 8005368:	f3bf 8f6f 	isb	sy
 800536c:	f3bf 8f4f 	dsb	sy
 8005370:	613b      	str	r3, [r7, #16]
}
 8005372:	bf00      	nop
 8005374:	bf00      	nop
 8005376:	e7fd      	b.n	8005374 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	1ad2      	subs	r2, r2, r3
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800538a:	69b8      	ldr	r0, [r7, #24]
 800538c:	f000 f90a 	bl	80055a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005390:	4b1d      	ldr	r3, [pc, #116]	@ (8005408 <pvPortMalloc+0x18c>)
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	4a1b      	ldr	r2, [pc, #108]	@ (8005408 <pvPortMalloc+0x18c>)
 800539c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800539e:	4b1a      	ldr	r3, [pc, #104]	@ (8005408 <pvPortMalloc+0x18c>)
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	4b1b      	ldr	r3, [pc, #108]	@ (8005410 <pvPortMalloc+0x194>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d203      	bcs.n	80053b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80053aa:	4b17      	ldr	r3, [pc, #92]	@ (8005408 <pvPortMalloc+0x18c>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a18      	ldr	r2, [pc, #96]	@ (8005410 <pvPortMalloc+0x194>)
 80053b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80053b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b4:	685a      	ldr	r2, [r3, #4]
 80053b6:	4b13      	ldr	r3, [pc, #76]	@ (8005404 <pvPortMalloc+0x188>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	431a      	orrs	r2, r3
 80053bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80053c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c2:	2200      	movs	r2, #0
 80053c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80053c6:	4b13      	ldr	r3, [pc, #76]	@ (8005414 <pvPortMalloc+0x198>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	3301      	adds	r3, #1
 80053cc:	4a11      	ldr	r2, [pc, #68]	@ (8005414 <pvPortMalloc+0x198>)
 80053ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80053d0:	f7ff fa0e 	bl	80047f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	f003 0307 	and.w	r3, r3, #7
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00b      	beq.n	80053f6 <pvPortMalloc+0x17a>
	__asm volatile
 80053de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e2:	f383 8811 	msr	BASEPRI, r3
 80053e6:	f3bf 8f6f 	isb	sy
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	60fb      	str	r3, [r7, #12]
}
 80053f0:	bf00      	nop
 80053f2:	bf00      	nop
 80053f4:	e7fd      	b.n	80053f2 <pvPortMalloc+0x176>
	return pvReturn;
 80053f6:	69fb      	ldr	r3, [r7, #28]
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3728      	adds	r7, #40	@ 0x28
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	200047d4 	.word	0x200047d4
 8005404:	200047e8 	.word	0x200047e8
 8005408:	200047d8 	.word	0x200047d8
 800540c:	200047cc 	.word	0x200047cc
 8005410:	200047dc 	.word	0x200047dc
 8005414:	200047e0 	.word	0x200047e0

08005418 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d04f      	beq.n	80054ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800542a:	2308      	movs	r3, #8
 800542c:	425b      	negs	r3, r3
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	4413      	add	r3, r2
 8005432:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	685a      	ldr	r2, [r3, #4]
 800543c:	4b25      	ldr	r3, [pc, #148]	@ (80054d4 <vPortFree+0xbc>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4013      	ands	r3, r2
 8005442:	2b00      	cmp	r3, #0
 8005444:	d10b      	bne.n	800545e <vPortFree+0x46>
	__asm volatile
 8005446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800544a:	f383 8811 	msr	BASEPRI, r3
 800544e:	f3bf 8f6f 	isb	sy
 8005452:	f3bf 8f4f 	dsb	sy
 8005456:	60fb      	str	r3, [r7, #12]
}
 8005458:	bf00      	nop
 800545a:	bf00      	nop
 800545c:	e7fd      	b.n	800545a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00b      	beq.n	800547e <vPortFree+0x66>
	__asm volatile
 8005466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800546a:	f383 8811 	msr	BASEPRI, r3
 800546e:	f3bf 8f6f 	isb	sy
 8005472:	f3bf 8f4f 	dsb	sy
 8005476:	60bb      	str	r3, [r7, #8]
}
 8005478:	bf00      	nop
 800547a:	bf00      	nop
 800547c:	e7fd      	b.n	800547a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	685a      	ldr	r2, [r3, #4]
 8005482:	4b14      	ldr	r3, [pc, #80]	@ (80054d4 <vPortFree+0xbc>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4013      	ands	r3, r2
 8005488:	2b00      	cmp	r3, #0
 800548a:	d01e      	beq.n	80054ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d11a      	bne.n	80054ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	685a      	ldr	r2, [r3, #4]
 8005498:	4b0e      	ldr	r3, [pc, #56]	@ (80054d4 <vPortFree+0xbc>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	43db      	mvns	r3, r3
 800549e:	401a      	ands	r2, r3
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80054a4:	f7ff f996 	bl	80047d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	685a      	ldr	r2, [r3, #4]
 80054ac:	4b0a      	ldr	r3, [pc, #40]	@ (80054d8 <vPortFree+0xc0>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4413      	add	r3, r2
 80054b2:	4a09      	ldr	r2, [pc, #36]	@ (80054d8 <vPortFree+0xc0>)
 80054b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80054b6:	6938      	ldr	r0, [r7, #16]
 80054b8:	f000 f874 	bl	80055a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80054bc:	4b07      	ldr	r3, [pc, #28]	@ (80054dc <vPortFree+0xc4>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	3301      	adds	r3, #1
 80054c2:	4a06      	ldr	r2, [pc, #24]	@ (80054dc <vPortFree+0xc4>)
 80054c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80054c6:	f7ff f993 	bl	80047f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80054ca:	bf00      	nop
 80054cc:	3718      	adds	r7, #24
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	200047e8 	.word	0x200047e8
 80054d8:	200047d8 	.word	0x200047d8
 80054dc:	200047e4 	.word	0x200047e4

080054e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80054e6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80054ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80054ec:	4b27      	ldr	r3, [pc, #156]	@ (800558c <prvHeapInit+0xac>)
 80054ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f003 0307 	and.w	r3, r3, #7
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00c      	beq.n	8005514 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	3307      	adds	r3, #7
 80054fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f023 0307 	bic.w	r3, r3, #7
 8005506:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005508:	68ba      	ldr	r2, [r7, #8]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	4a1f      	ldr	r2, [pc, #124]	@ (800558c <prvHeapInit+0xac>)
 8005510:	4413      	add	r3, r2
 8005512:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005518:	4a1d      	ldr	r2, [pc, #116]	@ (8005590 <prvHeapInit+0xb0>)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800551e:	4b1c      	ldr	r3, [pc, #112]	@ (8005590 <prvHeapInit+0xb0>)
 8005520:	2200      	movs	r2, #0
 8005522:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	68ba      	ldr	r2, [r7, #8]
 8005528:	4413      	add	r3, r2
 800552a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800552c:	2208      	movs	r2, #8
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	1a9b      	subs	r3, r3, r2
 8005532:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f023 0307 	bic.w	r3, r3, #7
 800553a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	4a15      	ldr	r2, [pc, #84]	@ (8005594 <prvHeapInit+0xb4>)
 8005540:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005542:	4b14      	ldr	r3, [pc, #80]	@ (8005594 <prvHeapInit+0xb4>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2200      	movs	r2, #0
 8005548:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800554a:	4b12      	ldr	r3, [pc, #72]	@ (8005594 <prvHeapInit+0xb4>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2200      	movs	r2, #0
 8005550:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	1ad2      	subs	r2, r2, r3
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005560:	4b0c      	ldr	r3, [pc, #48]	@ (8005594 <prvHeapInit+0xb4>)
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	4a0a      	ldr	r2, [pc, #40]	@ (8005598 <prvHeapInit+0xb8>)
 800556e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	4a09      	ldr	r2, [pc, #36]	@ (800559c <prvHeapInit+0xbc>)
 8005576:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005578:	4b09      	ldr	r3, [pc, #36]	@ (80055a0 <prvHeapInit+0xc0>)
 800557a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800557e:	601a      	str	r2, [r3, #0]
}
 8005580:	bf00      	nop
 8005582:	3714      	adds	r7, #20
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr
 800558c:	20000bcc 	.word	0x20000bcc
 8005590:	200047cc 	.word	0x200047cc
 8005594:	200047d4 	.word	0x200047d4
 8005598:	200047dc 	.word	0x200047dc
 800559c:	200047d8 	.word	0x200047d8
 80055a0:	200047e8 	.word	0x200047e8

080055a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80055ac:	4b28      	ldr	r3, [pc, #160]	@ (8005650 <prvInsertBlockIntoFreeList+0xac>)
 80055ae:	60fb      	str	r3, [r7, #12]
 80055b0:	e002      	b.n	80055b8 <prvInsertBlockIntoFreeList+0x14>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	60fb      	str	r3, [r7, #12]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d8f7      	bhi.n	80055b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	4413      	add	r3, r2
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d108      	bne.n	80055e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	441a      	add	r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	441a      	add	r2, r3
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d118      	bne.n	800562c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	4b15      	ldr	r3, [pc, #84]	@ (8005654 <prvInsertBlockIntoFreeList+0xb0>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	429a      	cmp	r2, r3
 8005604:	d00d      	beq.n	8005622 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685a      	ldr	r2, [r3, #4]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	441a      	add	r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	601a      	str	r2, [r3, #0]
 8005620:	e008      	b.n	8005634 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005622:	4b0c      	ldr	r3, [pc, #48]	@ (8005654 <prvInsertBlockIntoFreeList+0xb0>)
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	601a      	str	r2, [r3, #0]
 800562a:	e003      	b.n	8005634 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	429a      	cmp	r2, r3
 800563a:	d002      	beq.n	8005642 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005642:	bf00      	nop
 8005644:	3714      	adds	r7, #20
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	200047cc 	.word	0x200047cc
 8005654:	200047d4 	.word	0x200047d4

08005658 <std>:
 8005658:	2300      	movs	r3, #0
 800565a:	b510      	push	{r4, lr}
 800565c:	4604      	mov	r4, r0
 800565e:	e9c0 3300 	strd	r3, r3, [r0]
 8005662:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005666:	6083      	str	r3, [r0, #8]
 8005668:	8181      	strh	r1, [r0, #12]
 800566a:	6643      	str	r3, [r0, #100]	@ 0x64
 800566c:	81c2      	strh	r2, [r0, #14]
 800566e:	6183      	str	r3, [r0, #24]
 8005670:	4619      	mov	r1, r3
 8005672:	2208      	movs	r2, #8
 8005674:	305c      	adds	r0, #92	@ 0x5c
 8005676:	f000 fa1d 	bl	8005ab4 <memset>
 800567a:	4b0d      	ldr	r3, [pc, #52]	@ (80056b0 <std+0x58>)
 800567c:	6263      	str	r3, [r4, #36]	@ 0x24
 800567e:	4b0d      	ldr	r3, [pc, #52]	@ (80056b4 <std+0x5c>)
 8005680:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005682:	4b0d      	ldr	r3, [pc, #52]	@ (80056b8 <std+0x60>)
 8005684:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005686:	4b0d      	ldr	r3, [pc, #52]	@ (80056bc <std+0x64>)
 8005688:	6323      	str	r3, [r4, #48]	@ 0x30
 800568a:	4b0d      	ldr	r3, [pc, #52]	@ (80056c0 <std+0x68>)
 800568c:	6224      	str	r4, [r4, #32]
 800568e:	429c      	cmp	r4, r3
 8005690:	d006      	beq.n	80056a0 <std+0x48>
 8005692:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005696:	4294      	cmp	r4, r2
 8005698:	d002      	beq.n	80056a0 <std+0x48>
 800569a:	33d0      	adds	r3, #208	@ 0xd0
 800569c:	429c      	cmp	r4, r3
 800569e:	d105      	bne.n	80056ac <std+0x54>
 80056a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80056a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056a8:	f000 ba7c 	b.w	8005ba4 <__retarget_lock_init_recursive>
 80056ac:	bd10      	pop	{r4, pc}
 80056ae:	bf00      	nop
 80056b0:	08005905 	.word	0x08005905
 80056b4:	08005927 	.word	0x08005927
 80056b8:	0800595f 	.word	0x0800595f
 80056bc:	08005983 	.word	0x08005983
 80056c0:	200047ec 	.word	0x200047ec

080056c4 <stdio_exit_handler>:
 80056c4:	4a02      	ldr	r2, [pc, #8]	@ (80056d0 <stdio_exit_handler+0xc>)
 80056c6:	4903      	ldr	r1, [pc, #12]	@ (80056d4 <stdio_exit_handler+0x10>)
 80056c8:	4803      	ldr	r0, [pc, #12]	@ (80056d8 <stdio_exit_handler+0x14>)
 80056ca:	f000 b869 	b.w	80057a0 <_fwalk_sglue>
 80056ce:	bf00      	nop
 80056d0:	20000010 	.word	0x20000010
 80056d4:	08006489 	.word	0x08006489
 80056d8:	20000020 	.word	0x20000020

080056dc <cleanup_stdio>:
 80056dc:	6841      	ldr	r1, [r0, #4]
 80056de:	4b0c      	ldr	r3, [pc, #48]	@ (8005710 <cleanup_stdio+0x34>)
 80056e0:	4299      	cmp	r1, r3
 80056e2:	b510      	push	{r4, lr}
 80056e4:	4604      	mov	r4, r0
 80056e6:	d001      	beq.n	80056ec <cleanup_stdio+0x10>
 80056e8:	f000 fece 	bl	8006488 <_fflush_r>
 80056ec:	68a1      	ldr	r1, [r4, #8]
 80056ee:	4b09      	ldr	r3, [pc, #36]	@ (8005714 <cleanup_stdio+0x38>)
 80056f0:	4299      	cmp	r1, r3
 80056f2:	d002      	beq.n	80056fa <cleanup_stdio+0x1e>
 80056f4:	4620      	mov	r0, r4
 80056f6:	f000 fec7 	bl	8006488 <_fflush_r>
 80056fa:	68e1      	ldr	r1, [r4, #12]
 80056fc:	4b06      	ldr	r3, [pc, #24]	@ (8005718 <cleanup_stdio+0x3c>)
 80056fe:	4299      	cmp	r1, r3
 8005700:	d004      	beq.n	800570c <cleanup_stdio+0x30>
 8005702:	4620      	mov	r0, r4
 8005704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005708:	f000 bebe 	b.w	8006488 <_fflush_r>
 800570c:	bd10      	pop	{r4, pc}
 800570e:	bf00      	nop
 8005710:	200047ec 	.word	0x200047ec
 8005714:	20004854 	.word	0x20004854
 8005718:	200048bc 	.word	0x200048bc

0800571c <global_stdio_init.part.0>:
 800571c:	b510      	push	{r4, lr}
 800571e:	4b0b      	ldr	r3, [pc, #44]	@ (800574c <global_stdio_init.part.0+0x30>)
 8005720:	4c0b      	ldr	r4, [pc, #44]	@ (8005750 <global_stdio_init.part.0+0x34>)
 8005722:	4a0c      	ldr	r2, [pc, #48]	@ (8005754 <global_stdio_init.part.0+0x38>)
 8005724:	601a      	str	r2, [r3, #0]
 8005726:	4620      	mov	r0, r4
 8005728:	2200      	movs	r2, #0
 800572a:	2104      	movs	r1, #4
 800572c:	f7ff ff94 	bl	8005658 <std>
 8005730:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005734:	2201      	movs	r2, #1
 8005736:	2109      	movs	r1, #9
 8005738:	f7ff ff8e 	bl	8005658 <std>
 800573c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005740:	2202      	movs	r2, #2
 8005742:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005746:	2112      	movs	r1, #18
 8005748:	f7ff bf86 	b.w	8005658 <std>
 800574c:	20004924 	.word	0x20004924
 8005750:	200047ec 	.word	0x200047ec
 8005754:	080056c5 	.word	0x080056c5

08005758 <__sfp_lock_acquire>:
 8005758:	4801      	ldr	r0, [pc, #4]	@ (8005760 <__sfp_lock_acquire+0x8>)
 800575a:	f000 ba24 	b.w	8005ba6 <__retarget_lock_acquire_recursive>
 800575e:	bf00      	nop
 8005760:	2000492d 	.word	0x2000492d

08005764 <__sfp_lock_release>:
 8005764:	4801      	ldr	r0, [pc, #4]	@ (800576c <__sfp_lock_release+0x8>)
 8005766:	f000 ba1f 	b.w	8005ba8 <__retarget_lock_release_recursive>
 800576a:	bf00      	nop
 800576c:	2000492d 	.word	0x2000492d

08005770 <__sinit>:
 8005770:	b510      	push	{r4, lr}
 8005772:	4604      	mov	r4, r0
 8005774:	f7ff fff0 	bl	8005758 <__sfp_lock_acquire>
 8005778:	6a23      	ldr	r3, [r4, #32]
 800577a:	b11b      	cbz	r3, 8005784 <__sinit+0x14>
 800577c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005780:	f7ff bff0 	b.w	8005764 <__sfp_lock_release>
 8005784:	4b04      	ldr	r3, [pc, #16]	@ (8005798 <__sinit+0x28>)
 8005786:	6223      	str	r3, [r4, #32]
 8005788:	4b04      	ldr	r3, [pc, #16]	@ (800579c <__sinit+0x2c>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d1f5      	bne.n	800577c <__sinit+0xc>
 8005790:	f7ff ffc4 	bl	800571c <global_stdio_init.part.0>
 8005794:	e7f2      	b.n	800577c <__sinit+0xc>
 8005796:	bf00      	nop
 8005798:	080056dd 	.word	0x080056dd
 800579c:	20004924 	.word	0x20004924

080057a0 <_fwalk_sglue>:
 80057a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057a4:	4607      	mov	r7, r0
 80057a6:	4688      	mov	r8, r1
 80057a8:	4614      	mov	r4, r2
 80057aa:	2600      	movs	r6, #0
 80057ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057b0:	f1b9 0901 	subs.w	r9, r9, #1
 80057b4:	d505      	bpl.n	80057c2 <_fwalk_sglue+0x22>
 80057b6:	6824      	ldr	r4, [r4, #0]
 80057b8:	2c00      	cmp	r4, #0
 80057ba:	d1f7      	bne.n	80057ac <_fwalk_sglue+0xc>
 80057bc:	4630      	mov	r0, r6
 80057be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057c2:	89ab      	ldrh	r3, [r5, #12]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d907      	bls.n	80057d8 <_fwalk_sglue+0x38>
 80057c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057cc:	3301      	adds	r3, #1
 80057ce:	d003      	beq.n	80057d8 <_fwalk_sglue+0x38>
 80057d0:	4629      	mov	r1, r5
 80057d2:	4638      	mov	r0, r7
 80057d4:	47c0      	blx	r8
 80057d6:	4306      	orrs	r6, r0
 80057d8:	3568      	adds	r5, #104	@ 0x68
 80057da:	e7e9      	b.n	80057b0 <_fwalk_sglue+0x10>

080057dc <_puts_r>:
 80057dc:	6a03      	ldr	r3, [r0, #32]
 80057de:	b570      	push	{r4, r5, r6, lr}
 80057e0:	6884      	ldr	r4, [r0, #8]
 80057e2:	4605      	mov	r5, r0
 80057e4:	460e      	mov	r6, r1
 80057e6:	b90b      	cbnz	r3, 80057ec <_puts_r+0x10>
 80057e8:	f7ff ffc2 	bl	8005770 <__sinit>
 80057ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80057ee:	07db      	lsls	r3, r3, #31
 80057f0:	d405      	bmi.n	80057fe <_puts_r+0x22>
 80057f2:	89a3      	ldrh	r3, [r4, #12]
 80057f4:	0598      	lsls	r0, r3, #22
 80057f6:	d402      	bmi.n	80057fe <_puts_r+0x22>
 80057f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057fa:	f000 f9d4 	bl	8005ba6 <__retarget_lock_acquire_recursive>
 80057fe:	89a3      	ldrh	r3, [r4, #12]
 8005800:	0719      	lsls	r1, r3, #28
 8005802:	d502      	bpl.n	800580a <_puts_r+0x2e>
 8005804:	6923      	ldr	r3, [r4, #16]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d135      	bne.n	8005876 <_puts_r+0x9a>
 800580a:	4621      	mov	r1, r4
 800580c:	4628      	mov	r0, r5
 800580e:	f000 f8fb 	bl	8005a08 <__swsetup_r>
 8005812:	b380      	cbz	r0, 8005876 <_puts_r+0x9a>
 8005814:	f04f 35ff 	mov.w	r5, #4294967295
 8005818:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800581a:	07da      	lsls	r2, r3, #31
 800581c:	d405      	bmi.n	800582a <_puts_r+0x4e>
 800581e:	89a3      	ldrh	r3, [r4, #12]
 8005820:	059b      	lsls	r3, r3, #22
 8005822:	d402      	bmi.n	800582a <_puts_r+0x4e>
 8005824:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005826:	f000 f9bf 	bl	8005ba8 <__retarget_lock_release_recursive>
 800582a:	4628      	mov	r0, r5
 800582c:	bd70      	pop	{r4, r5, r6, pc}
 800582e:	2b00      	cmp	r3, #0
 8005830:	da04      	bge.n	800583c <_puts_r+0x60>
 8005832:	69a2      	ldr	r2, [r4, #24]
 8005834:	429a      	cmp	r2, r3
 8005836:	dc17      	bgt.n	8005868 <_puts_r+0x8c>
 8005838:	290a      	cmp	r1, #10
 800583a:	d015      	beq.n	8005868 <_puts_r+0x8c>
 800583c:	6823      	ldr	r3, [r4, #0]
 800583e:	1c5a      	adds	r2, r3, #1
 8005840:	6022      	str	r2, [r4, #0]
 8005842:	7019      	strb	r1, [r3, #0]
 8005844:	68a3      	ldr	r3, [r4, #8]
 8005846:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800584a:	3b01      	subs	r3, #1
 800584c:	60a3      	str	r3, [r4, #8]
 800584e:	2900      	cmp	r1, #0
 8005850:	d1ed      	bne.n	800582e <_puts_r+0x52>
 8005852:	2b00      	cmp	r3, #0
 8005854:	da11      	bge.n	800587a <_puts_r+0x9e>
 8005856:	4622      	mov	r2, r4
 8005858:	210a      	movs	r1, #10
 800585a:	4628      	mov	r0, r5
 800585c:	f000 f895 	bl	800598a <__swbuf_r>
 8005860:	3001      	adds	r0, #1
 8005862:	d0d7      	beq.n	8005814 <_puts_r+0x38>
 8005864:	250a      	movs	r5, #10
 8005866:	e7d7      	b.n	8005818 <_puts_r+0x3c>
 8005868:	4622      	mov	r2, r4
 800586a:	4628      	mov	r0, r5
 800586c:	f000 f88d 	bl	800598a <__swbuf_r>
 8005870:	3001      	adds	r0, #1
 8005872:	d1e7      	bne.n	8005844 <_puts_r+0x68>
 8005874:	e7ce      	b.n	8005814 <_puts_r+0x38>
 8005876:	3e01      	subs	r6, #1
 8005878:	e7e4      	b.n	8005844 <_puts_r+0x68>
 800587a:	6823      	ldr	r3, [r4, #0]
 800587c:	1c5a      	adds	r2, r3, #1
 800587e:	6022      	str	r2, [r4, #0]
 8005880:	220a      	movs	r2, #10
 8005882:	701a      	strb	r2, [r3, #0]
 8005884:	e7ee      	b.n	8005864 <_puts_r+0x88>
	...

08005888 <puts>:
 8005888:	4b02      	ldr	r3, [pc, #8]	@ (8005894 <puts+0xc>)
 800588a:	4601      	mov	r1, r0
 800588c:	6818      	ldr	r0, [r3, #0]
 800588e:	f7ff bfa5 	b.w	80057dc <_puts_r>
 8005892:	bf00      	nop
 8005894:	2000001c 	.word	0x2000001c

08005898 <sniprintf>:
 8005898:	b40c      	push	{r2, r3}
 800589a:	b530      	push	{r4, r5, lr}
 800589c:	4b18      	ldr	r3, [pc, #96]	@ (8005900 <sniprintf+0x68>)
 800589e:	1e0c      	subs	r4, r1, #0
 80058a0:	681d      	ldr	r5, [r3, #0]
 80058a2:	b09d      	sub	sp, #116	@ 0x74
 80058a4:	da08      	bge.n	80058b8 <sniprintf+0x20>
 80058a6:	238b      	movs	r3, #139	@ 0x8b
 80058a8:	602b      	str	r3, [r5, #0]
 80058aa:	f04f 30ff 	mov.w	r0, #4294967295
 80058ae:	b01d      	add	sp, #116	@ 0x74
 80058b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80058b4:	b002      	add	sp, #8
 80058b6:	4770      	bx	lr
 80058b8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80058bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80058c0:	f04f 0300 	mov.w	r3, #0
 80058c4:	931b      	str	r3, [sp, #108]	@ 0x6c
 80058c6:	bf14      	ite	ne
 80058c8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80058cc:	4623      	moveq	r3, r4
 80058ce:	9304      	str	r3, [sp, #16]
 80058d0:	9307      	str	r3, [sp, #28]
 80058d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80058d6:	9002      	str	r0, [sp, #8]
 80058d8:	9006      	str	r0, [sp, #24]
 80058da:	f8ad 3016 	strh.w	r3, [sp, #22]
 80058de:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80058e0:	ab21      	add	r3, sp, #132	@ 0x84
 80058e2:	a902      	add	r1, sp, #8
 80058e4:	4628      	mov	r0, r5
 80058e6:	9301      	str	r3, [sp, #4]
 80058e8:	f000 fac2 	bl	8005e70 <_svfiprintf_r>
 80058ec:	1c43      	adds	r3, r0, #1
 80058ee:	bfbc      	itt	lt
 80058f0:	238b      	movlt	r3, #139	@ 0x8b
 80058f2:	602b      	strlt	r3, [r5, #0]
 80058f4:	2c00      	cmp	r4, #0
 80058f6:	d0da      	beq.n	80058ae <sniprintf+0x16>
 80058f8:	9b02      	ldr	r3, [sp, #8]
 80058fa:	2200      	movs	r2, #0
 80058fc:	701a      	strb	r2, [r3, #0]
 80058fe:	e7d6      	b.n	80058ae <sniprintf+0x16>
 8005900:	2000001c 	.word	0x2000001c

08005904 <__sread>:
 8005904:	b510      	push	{r4, lr}
 8005906:	460c      	mov	r4, r1
 8005908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800590c:	f000 f8fc 	bl	8005b08 <_read_r>
 8005910:	2800      	cmp	r0, #0
 8005912:	bfab      	itete	ge
 8005914:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005916:	89a3      	ldrhlt	r3, [r4, #12]
 8005918:	181b      	addge	r3, r3, r0
 800591a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800591e:	bfac      	ite	ge
 8005920:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005922:	81a3      	strhlt	r3, [r4, #12]
 8005924:	bd10      	pop	{r4, pc}

08005926 <__swrite>:
 8005926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800592a:	461f      	mov	r7, r3
 800592c:	898b      	ldrh	r3, [r1, #12]
 800592e:	05db      	lsls	r3, r3, #23
 8005930:	4605      	mov	r5, r0
 8005932:	460c      	mov	r4, r1
 8005934:	4616      	mov	r6, r2
 8005936:	d505      	bpl.n	8005944 <__swrite+0x1e>
 8005938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800593c:	2302      	movs	r3, #2
 800593e:	2200      	movs	r2, #0
 8005940:	f000 f8d0 	bl	8005ae4 <_lseek_r>
 8005944:	89a3      	ldrh	r3, [r4, #12]
 8005946:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800594a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800594e:	81a3      	strh	r3, [r4, #12]
 8005950:	4632      	mov	r2, r6
 8005952:	463b      	mov	r3, r7
 8005954:	4628      	mov	r0, r5
 8005956:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800595a:	f000 b8e7 	b.w	8005b2c <_write_r>

0800595e <__sseek>:
 800595e:	b510      	push	{r4, lr}
 8005960:	460c      	mov	r4, r1
 8005962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005966:	f000 f8bd 	bl	8005ae4 <_lseek_r>
 800596a:	1c43      	adds	r3, r0, #1
 800596c:	89a3      	ldrh	r3, [r4, #12]
 800596e:	bf15      	itete	ne
 8005970:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005972:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005976:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800597a:	81a3      	strheq	r3, [r4, #12]
 800597c:	bf18      	it	ne
 800597e:	81a3      	strhne	r3, [r4, #12]
 8005980:	bd10      	pop	{r4, pc}

08005982 <__sclose>:
 8005982:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005986:	f000 b89d 	b.w	8005ac4 <_close_r>

0800598a <__swbuf_r>:
 800598a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800598c:	460e      	mov	r6, r1
 800598e:	4614      	mov	r4, r2
 8005990:	4605      	mov	r5, r0
 8005992:	b118      	cbz	r0, 800599c <__swbuf_r+0x12>
 8005994:	6a03      	ldr	r3, [r0, #32]
 8005996:	b90b      	cbnz	r3, 800599c <__swbuf_r+0x12>
 8005998:	f7ff feea 	bl	8005770 <__sinit>
 800599c:	69a3      	ldr	r3, [r4, #24]
 800599e:	60a3      	str	r3, [r4, #8]
 80059a0:	89a3      	ldrh	r3, [r4, #12]
 80059a2:	071a      	lsls	r2, r3, #28
 80059a4:	d501      	bpl.n	80059aa <__swbuf_r+0x20>
 80059a6:	6923      	ldr	r3, [r4, #16]
 80059a8:	b943      	cbnz	r3, 80059bc <__swbuf_r+0x32>
 80059aa:	4621      	mov	r1, r4
 80059ac:	4628      	mov	r0, r5
 80059ae:	f000 f82b 	bl	8005a08 <__swsetup_r>
 80059b2:	b118      	cbz	r0, 80059bc <__swbuf_r+0x32>
 80059b4:	f04f 37ff 	mov.w	r7, #4294967295
 80059b8:	4638      	mov	r0, r7
 80059ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059bc:	6823      	ldr	r3, [r4, #0]
 80059be:	6922      	ldr	r2, [r4, #16]
 80059c0:	1a98      	subs	r0, r3, r2
 80059c2:	6963      	ldr	r3, [r4, #20]
 80059c4:	b2f6      	uxtb	r6, r6
 80059c6:	4283      	cmp	r3, r0
 80059c8:	4637      	mov	r7, r6
 80059ca:	dc05      	bgt.n	80059d8 <__swbuf_r+0x4e>
 80059cc:	4621      	mov	r1, r4
 80059ce:	4628      	mov	r0, r5
 80059d0:	f000 fd5a 	bl	8006488 <_fflush_r>
 80059d4:	2800      	cmp	r0, #0
 80059d6:	d1ed      	bne.n	80059b4 <__swbuf_r+0x2a>
 80059d8:	68a3      	ldr	r3, [r4, #8]
 80059da:	3b01      	subs	r3, #1
 80059dc:	60a3      	str	r3, [r4, #8]
 80059de:	6823      	ldr	r3, [r4, #0]
 80059e0:	1c5a      	adds	r2, r3, #1
 80059e2:	6022      	str	r2, [r4, #0]
 80059e4:	701e      	strb	r6, [r3, #0]
 80059e6:	6962      	ldr	r2, [r4, #20]
 80059e8:	1c43      	adds	r3, r0, #1
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d004      	beq.n	80059f8 <__swbuf_r+0x6e>
 80059ee:	89a3      	ldrh	r3, [r4, #12]
 80059f0:	07db      	lsls	r3, r3, #31
 80059f2:	d5e1      	bpl.n	80059b8 <__swbuf_r+0x2e>
 80059f4:	2e0a      	cmp	r6, #10
 80059f6:	d1df      	bne.n	80059b8 <__swbuf_r+0x2e>
 80059f8:	4621      	mov	r1, r4
 80059fa:	4628      	mov	r0, r5
 80059fc:	f000 fd44 	bl	8006488 <_fflush_r>
 8005a00:	2800      	cmp	r0, #0
 8005a02:	d0d9      	beq.n	80059b8 <__swbuf_r+0x2e>
 8005a04:	e7d6      	b.n	80059b4 <__swbuf_r+0x2a>
	...

08005a08 <__swsetup_r>:
 8005a08:	b538      	push	{r3, r4, r5, lr}
 8005a0a:	4b29      	ldr	r3, [pc, #164]	@ (8005ab0 <__swsetup_r+0xa8>)
 8005a0c:	4605      	mov	r5, r0
 8005a0e:	6818      	ldr	r0, [r3, #0]
 8005a10:	460c      	mov	r4, r1
 8005a12:	b118      	cbz	r0, 8005a1c <__swsetup_r+0x14>
 8005a14:	6a03      	ldr	r3, [r0, #32]
 8005a16:	b90b      	cbnz	r3, 8005a1c <__swsetup_r+0x14>
 8005a18:	f7ff feaa 	bl	8005770 <__sinit>
 8005a1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a20:	0719      	lsls	r1, r3, #28
 8005a22:	d422      	bmi.n	8005a6a <__swsetup_r+0x62>
 8005a24:	06da      	lsls	r2, r3, #27
 8005a26:	d407      	bmi.n	8005a38 <__swsetup_r+0x30>
 8005a28:	2209      	movs	r2, #9
 8005a2a:	602a      	str	r2, [r5, #0]
 8005a2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a30:	81a3      	strh	r3, [r4, #12]
 8005a32:	f04f 30ff 	mov.w	r0, #4294967295
 8005a36:	e033      	b.n	8005aa0 <__swsetup_r+0x98>
 8005a38:	0758      	lsls	r0, r3, #29
 8005a3a:	d512      	bpl.n	8005a62 <__swsetup_r+0x5a>
 8005a3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005a3e:	b141      	cbz	r1, 8005a52 <__swsetup_r+0x4a>
 8005a40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005a44:	4299      	cmp	r1, r3
 8005a46:	d002      	beq.n	8005a4e <__swsetup_r+0x46>
 8005a48:	4628      	mov	r0, r5
 8005a4a:	f000 f8bd 	bl	8005bc8 <_free_r>
 8005a4e:	2300      	movs	r3, #0
 8005a50:	6363      	str	r3, [r4, #52]	@ 0x34
 8005a52:	89a3      	ldrh	r3, [r4, #12]
 8005a54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005a58:	81a3      	strh	r3, [r4, #12]
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	6063      	str	r3, [r4, #4]
 8005a5e:	6923      	ldr	r3, [r4, #16]
 8005a60:	6023      	str	r3, [r4, #0]
 8005a62:	89a3      	ldrh	r3, [r4, #12]
 8005a64:	f043 0308 	orr.w	r3, r3, #8
 8005a68:	81a3      	strh	r3, [r4, #12]
 8005a6a:	6923      	ldr	r3, [r4, #16]
 8005a6c:	b94b      	cbnz	r3, 8005a82 <__swsetup_r+0x7a>
 8005a6e:	89a3      	ldrh	r3, [r4, #12]
 8005a70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005a74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a78:	d003      	beq.n	8005a82 <__swsetup_r+0x7a>
 8005a7a:	4621      	mov	r1, r4
 8005a7c:	4628      	mov	r0, r5
 8005a7e:	f000 fd51 	bl	8006524 <__smakebuf_r>
 8005a82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a86:	f013 0201 	ands.w	r2, r3, #1
 8005a8a:	d00a      	beq.n	8005aa2 <__swsetup_r+0x9a>
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	60a2      	str	r2, [r4, #8]
 8005a90:	6962      	ldr	r2, [r4, #20]
 8005a92:	4252      	negs	r2, r2
 8005a94:	61a2      	str	r2, [r4, #24]
 8005a96:	6922      	ldr	r2, [r4, #16]
 8005a98:	b942      	cbnz	r2, 8005aac <__swsetup_r+0xa4>
 8005a9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005a9e:	d1c5      	bne.n	8005a2c <__swsetup_r+0x24>
 8005aa0:	bd38      	pop	{r3, r4, r5, pc}
 8005aa2:	0799      	lsls	r1, r3, #30
 8005aa4:	bf58      	it	pl
 8005aa6:	6962      	ldrpl	r2, [r4, #20]
 8005aa8:	60a2      	str	r2, [r4, #8]
 8005aaa:	e7f4      	b.n	8005a96 <__swsetup_r+0x8e>
 8005aac:	2000      	movs	r0, #0
 8005aae:	e7f7      	b.n	8005aa0 <__swsetup_r+0x98>
 8005ab0:	2000001c 	.word	0x2000001c

08005ab4 <memset>:
 8005ab4:	4402      	add	r2, r0
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d100      	bne.n	8005abe <memset+0xa>
 8005abc:	4770      	bx	lr
 8005abe:	f803 1b01 	strb.w	r1, [r3], #1
 8005ac2:	e7f9      	b.n	8005ab8 <memset+0x4>

08005ac4 <_close_r>:
 8005ac4:	b538      	push	{r3, r4, r5, lr}
 8005ac6:	4d06      	ldr	r5, [pc, #24]	@ (8005ae0 <_close_r+0x1c>)
 8005ac8:	2300      	movs	r3, #0
 8005aca:	4604      	mov	r4, r0
 8005acc:	4608      	mov	r0, r1
 8005ace:	602b      	str	r3, [r5, #0]
 8005ad0:	f7fb fabb 	bl	800104a <_close>
 8005ad4:	1c43      	adds	r3, r0, #1
 8005ad6:	d102      	bne.n	8005ade <_close_r+0x1a>
 8005ad8:	682b      	ldr	r3, [r5, #0]
 8005ada:	b103      	cbz	r3, 8005ade <_close_r+0x1a>
 8005adc:	6023      	str	r3, [r4, #0]
 8005ade:	bd38      	pop	{r3, r4, r5, pc}
 8005ae0:	20004928 	.word	0x20004928

08005ae4 <_lseek_r>:
 8005ae4:	b538      	push	{r3, r4, r5, lr}
 8005ae6:	4d07      	ldr	r5, [pc, #28]	@ (8005b04 <_lseek_r+0x20>)
 8005ae8:	4604      	mov	r4, r0
 8005aea:	4608      	mov	r0, r1
 8005aec:	4611      	mov	r1, r2
 8005aee:	2200      	movs	r2, #0
 8005af0:	602a      	str	r2, [r5, #0]
 8005af2:	461a      	mov	r2, r3
 8005af4:	f7fb fad0 	bl	8001098 <_lseek>
 8005af8:	1c43      	adds	r3, r0, #1
 8005afa:	d102      	bne.n	8005b02 <_lseek_r+0x1e>
 8005afc:	682b      	ldr	r3, [r5, #0]
 8005afe:	b103      	cbz	r3, 8005b02 <_lseek_r+0x1e>
 8005b00:	6023      	str	r3, [r4, #0]
 8005b02:	bd38      	pop	{r3, r4, r5, pc}
 8005b04:	20004928 	.word	0x20004928

08005b08 <_read_r>:
 8005b08:	b538      	push	{r3, r4, r5, lr}
 8005b0a:	4d07      	ldr	r5, [pc, #28]	@ (8005b28 <_read_r+0x20>)
 8005b0c:	4604      	mov	r4, r0
 8005b0e:	4608      	mov	r0, r1
 8005b10:	4611      	mov	r1, r2
 8005b12:	2200      	movs	r2, #0
 8005b14:	602a      	str	r2, [r5, #0]
 8005b16:	461a      	mov	r2, r3
 8005b18:	f7fb fa5e 	bl	8000fd8 <_read>
 8005b1c:	1c43      	adds	r3, r0, #1
 8005b1e:	d102      	bne.n	8005b26 <_read_r+0x1e>
 8005b20:	682b      	ldr	r3, [r5, #0]
 8005b22:	b103      	cbz	r3, 8005b26 <_read_r+0x1e>
 8005b24:	6023      	str	r3, [r4, #0]
 8005b26:	bd38      	pop	{r3, r4, r5, pc}
 8005b28:	20004928 	.word	0x20004928

08005b2c <_write_r>:
 8005b2c:	b538      	push	{r3, r4, r5, lr}
 8005b2e:	4d07      	ldr	r5, [pc, #28]	@ (8005b4c <_write_r+0x20>)
 8005b30:	4604      	mov	r4, r0
 8005b32:	4608      	mov	r0, r1
 8005b34:	4611      	mov	r1, r2
 8005b36:	2200      	movs	r2, #0
 8005b38:	602a      	str	r2, [r5, #0]
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	f7fb fa69 	bl	8001012 <_write>
 8005b40:	1c43      	adds	r3, r0, #1
 8005b42:	d102      	bne.n	8005b4a <_write_r+0x1e>
 8005b44:	682b      	ldr	r3, [r5, #0]
 8005b46:	b103      	cbz	r3, 8005b4a <_write_r+0x1e>
 8005b48:	6023      	str	r3, [r4, #0]
 8005b4a:	bd38      	pop	{r3, r4, r5, pc}
 8005b4c:	20004928 	.word	0x20004928

08005b50 <__errno>:
 8005b50:	4b01      	ldr	r3, [pc, #4]	@ (8005b58 <__errno+0x8>)
 8005b52:	6818      	ldr	r0, [r3, #0]
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	2000001c 	.word	0x2000001c

08005b5c <__libc_init_array>:
 8005b5c:	b570      	push	{r4, r5, r6, lr}
 8005b5e:	4d0d      	ldr	r5, [pc, #52]	@ (8005b94 <__libc_init_array+0x38>)
 8005b60:	4c0d      	ldr	r4, [pc, #52]	@ (8005b98 <__libc_init_array+0x3c>)
 8005b62:	1b64      	subs	r4, r4, r5
 8005b64:	10a4      	asrs	r4, r4, #2
 8005b66:	2600      	movs	r6, #0
 8005b68:	42a6      	cmp	r6, r4
 8005b6a:	d109      	bne.n	8005b80 <__libc_init_array+0x24>
 8005b6c:	4d0b      	ldr	r5, [pc, #44]	@ (8005b9c <__libc_init_array+0x40>)
 8005b6e:	4c0c      	ldr	r4, [pc, #48]	@ (8005ba0 <__libc_init_array+0x44>)
 8005b70:	f000 fd96 	bl	80066a0 <_init>
 8005b74:	1b64      	subs	r4, r4, r5
 8005b76:	10a4      	asrs	r4, r4, #2
 8005b78:	2600      	movs	r6, #0
 8005b7a:	42a6      	cmp	r6, r4
 8005b7c:	d105      	bne.n	8005b8a <__libc_init_array+0x2e>
 8005b7e:	bd70      	pop	{r4, r5, r6, pc}
 8005b80:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b84:	4798      	blx	r3
 8005b86:	3601      	adds	r6, #1
 8005b88:	e7ee      	b.n	8005b68 <__libc_init_array+0xc>
 8005b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b8e:	4798      	blx	r3
 8005b90:	3601      	adds	r6, #1
 8005b92:	e7f2      	b.n	8005b7a <__libc_init_array+0x1e>
 8005b94:	080067fc 	.word	0x080067fc
 8005b98:	080067fc 	.word	0x080067fc
 8005b9c:	080067fc 	.word	0x080067fc
 8005ba0:	08006800 	.word	0x08006800

08005ba4 <__retarget_lock_init_recursive>:
 8005ba4:	4770      	bx	lr

08005ba6 <__retarget_lock_acquire_recursive>:
 8005ba6:	4770      	bx	lr

08005ba8 <__retarget_lock_release_recursive>:
 8005ba8:	4770      	bx	lr

08005baa <memcpy>:
 8005baa:	440a      	add	r2, r1
 8005bac:	4291      	cmp	r1, r2
 8005bae:	f100 33ff 	add.w	r3, r0, #4294967295
 8005bb2:	d100      	bne.n	8005bb6 <memcpy+0xc>
 8005bb4:	4770      	bx	lr
 8005bb6:	b510      	push	{r4, lr}
 8005bb8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bbc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bc0:	4291      	cmp	r1, r2
 8005bc2:	d1f9      	bne.n	8005bb8 <memcpy+0xe>
 8005bc4:	bd10      	pop	{r4, pc}
	...

08005bc8 <_free_r>:
 8005bc8:	b538      	push	{r3, r4, r5, lr}
 8005bca:	4605      	mov	r5, r0
 8005bcc:	2900      	cmp	r1, #0
 8005bce:	d041      	beq.n	8005c54 <_free_r+0x8c>
 8005bd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bd4:	1f0c      	subs	r4, r1, #4
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	bfb8      	it	lt
 8005bda:	18e4      	addlt	r4, r4, r3
 8005bdc:	f000 f8e0 	bl	8005da0 <__malloc_lock>
 8005be0:	4a1d      	ldr	r2, [pc, #116]	@ (8005c58 <_free_r+0x90>)
 8005be2:	6813      	ldr	r3, [r2, #0]
 8005be4:	b933      	cbnz	r3, 8005bf4 <_free_r+0x2c>
 8005be6:	6063      	str	r3, [r4, #4]
 8005be8:	6014      	str	r4, [r2, #0]
 8005bea:	4628      	mov	r0, r5
 8005bec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bf0:	f000 b8dc 	b.w	8005dac <__malloc_unlock>
 8005bf4:	42a3      	cmp	r3, r4
 8005bf6:	d908      	bls.n	8005c0a <_free_r+0x42>
 8005bf8:	6820      	ldr	r0, [r4, #0]
 8005bfa:	1821      	adds	r1, r4, r0
 8005bfc:	428b      	cmp	r3, r1
 8005bfe:	bf01      	itttt	eq
 8005c00:	6819      	ldreq	r1, [r3, #0]
 8005c02:	685b      	ldreq	r3, [r3, #4]
 8005c04:	1809      	addeq	r1, r1, r0
 8005c06:	6021      	streq	r1, [r4, #0]
 8005c08:	e7ed      	b.n	8005be6 <_free_r+0x1e>
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	b10b      	cbz	r3, 8005c14 <_free_r+0x4c>
 8005c10:	42a3      	cmp	r3, r4
 8005c12:	d9fa      	bls.n	8005c0a <_free_r+0x42>
 8005c14:	6811      	ldr	r1, [r2, #0]
 8005c16:	1850      	adds	r0, r2, r1
 8005c18:	42a0      	cmp	r0, r4
 8005c1a:	d10b      	bne.n	8005c34 <_free_r+0x6c>
 8005c1c:	6820      	ldr	r0, [r4, #0]
 8005c1e:	4401      	add	r1, r0
 8005c20:	1850      	adds	r0, r2, r1
 8005c22:	4283      	cmp	r3, r0
 8005c24:	6011      	str	r1, [r2, #0]
 8005c26:	d1e0      	bne.n	8005bea <_free_r+0x22>
 8005c28:	6818      	ldr	r0, [r3, #0]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	6053      	str	r3, [r2, #4]
 8005c2e:	4408      	add	r0, r1
 8005c30:	6010      	str	r0, [r2, #0]
 8005c32:	e7da      	b.n	8005bea <_free_r+0x22>
 8005c34:	d902      	bls.n	8005c3c <_free_r+0x74>
 8005c36:	230c      	movs	r3, #12
 8005c38:	602b      	str	r3, [r5, #0]
 8005c3a:	e7d6      	b.n	8005bea <_free_r+0x22>
 8005c3c:	6820      	ldr	r0, [r4, #0]
 8005c3e:	1821      	adds	r1, r4, r0
 8005c40:	428b      	cmp	r3, r1
 8005c42:	bf04      	itt	eq
 8005c44:	6819      	ldreq	r1, [r3, #0]
 8005c46:	685b      	ldreq	r3, [r3, #4]
 8005c48:	6063      	str	r3, [r4, #4]
 8005c4a:	bf04      	itt	eq
 8005c4c:	1809      	addeq	r1, r1, r0
 8005c4e:	6021      	streq	r1, [r4, #0]
 8005c50:	6054      	str	r4, [r2, #4]
 8005c52:	e7ca      	b.n	8005bea <_free_r+0x22>
 8005c54:	bd38      	pop	{r3, r4, r5, pc}
 8005c56:	bf00      	nop
 8005c58:	20004934 	.word	0x20004934

08005c5c <sbrk_aligned>:
 8005c5c:	b570      	push	{r4, r5, r6, lr}
 8005c5e:	4e0f      	ldr	r6, [pc, #60]	@ (8005c9c <sbrk_aligned+0x40>)
 8005c60:	460c      	mov	r4, r1
 8005c62:	6831      	ldr	r1, [r6, #0]
 8005c64:	4605      	mov	r5, r0
 8005c66:	b911      	cbnz	r1, 8005c6e <sbrk_aligned+0x12>
 8005c68:	f000 fcd4 	bl	8006614 <_sbrk_r>
 8005c6c:	6030      	str	r0, [r6, #0]
 8005c6e:	4621      	mov	r1, r4
 8005c70:	4628      	mov	r0, r5
 8005c72:	f000 fccf 	bl	8006614 <_sbrk_r>
 8005c76:	1c43      	adds	r3, r0, #1
 8005c78:	d103      	bne.n	8005c82 <sbrk_aligned+0x26>
 8005c7a:	f04f 34ff 	mov.w	r4, #4294967295
 8005c7e:	4620      	mov	r0, r4
 8005c80:	bd70      	pop	{r4, r5, r6, pc}
 8005c82:	1cc4      	adds	r4, r0, #3
 8005c84:	f024 0403 	bic.w	r4, r4, #3
 8005c88:	42a0      	cmp	r0, r4
 8005c8a:	d0f8      	beq.n	8005c7e <sbrk_aligned+0x22>
 8005c8c:	1a21      	subs	r1, r4, r0
 8005c8e:	4628      	mov	r0, r5
 8005c90:	f000 fcc0 	bl	8006614 <_sbrk_r>
 8005c94:	3001      	adds	r0, #1
 8005c96:	d1f2      	bne.n	8005c7e <sbrk_aligned+0x22>
 8005c98:	e7ef      	b.n	8005c7a <sbrk_aligned+0x1e>
 8005c9a:	bf00      	nop
 8005c9c:	20004930 	.word	0x20004930

08005ca0 <_malloc_r>:
 8005ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ca4:	1ccd      	adds	r5, r1, #3
 8005ca6:	f025 0503 	bic.w	r5, r5, #3
 8005caa:	3508      	adds	r5, #8
 8005cac:	2d0c      	cmp	r5, #12
 8005cae:	bf38      	it	cc
 8005cb0:	250c      	movcc	r5, #12
 8005cb2:	2d00      	cmp	r5, #0
 8005cb4:	4606      	mov	r6, r0
 8005cb6:	db01      	blt.n	8005cbc <_malloc_r+0x1c>
 8005cb8:	42a9      	cmp	r1, r5
 8005cba:	d904      	bls.n	8005cc6 <_malloc_r+0x26>
 8005cbc:	230c      	movs	r3, #12
 8005cbe:	6033      	str	r3, [r6, #0]
 8005cc0:	2000      	movs	r0, #0
 8005cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cc6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d9c <_malloc_r+0xfc>
 8005cca:	f000 f869 	bl	8005da0 <__malloc_lock>
 8005cce:	f8d8 3000 	ldr.w	r3, [r8]
 8005cd2:	461c      	mov	r4, r3
 8005cd4:	bb44      	cbnz	r4, 8005d28 <_malloc_r+0x88>
 8005cd6:	4629      	mov	r1, r5
 8005cd8:	4630      	mov	r0, r6
 8005cda:	f7ff ffbf 	bl	8005c5c <sbrk_aligned>
 8005cde:	1c43      	adds	r3, r0, #1
 8005ce0:	4604      	mov	r4, r0
 8005ce2:	d158      	bne.n	8005d96 <_malloc_r+0xf6>
 8005ce4:	f8d8 4000 	ldr.w	r4, [r8]
 8005ce8:	4627      	mov	r7, r4
 8005cea:	2f00      	cmp	r7, #0
 8005cec:	d143      	bne.n	8005d76 <_malloc_r+0xd6>
 8005cee:	2c00      	cmp	r4, #0
 8005cf0:	d04b      	beq.n	8005d8a <_malloc_r+0xea>
 8005cf2:	6823      	ldr	r3, [r4, #0]
 8005cf4:	4639      	mov	r1, r7
 8005cf6:	4630      	mov	r0, r6
 8005cf8:	eb04 0903 	add.w	r9, r4, r3
 8005cfc:	f000 fc8a 	bl	8006614 <_sbrk_r>
 8005d00:	4581      	cmp	r9, r0
 8005d02:	d142      	bne.n	8005d8a <_malloc_r+0xea>
 8005d04:	6821      	ldr	r1, [r4, #0]
 8005d06:	1a6d      	subs	r5, r5, r1
 8005d08:	4629      	mov	r1, r5
 8005d0a:	4630      	mov	r0, r6
 8005d0c:	f7ff ffa6 	bl	8005c5c <sbrk_aligned>
 8005d10:	3001      	adds	r0, #1
 8005d12:	d03a      	beq.n	8005d8a <_malloc_r+0xea>
 8005d14:	6823      	ldr	r3, [r4, #0]
 8005d16:	442b      	add	r3, r5
 8005d18:	6023      	str	r3, [r4, #0]
 8005d1a:	f8d8 3000 	ldr.w	r3, [r8]
 8005d1e:	685a      	ldr	r2, [r3, #4]
 8005d20:	bb62      	cbnz	r2, 8005d7c <_malloc_r+0xdc>
 8005d22:	f8c8 7000 	str.w	r7, [r8]
 8005d26:	e00f      	b.n	8005d48 <_malloc_r+0xa8>
 8005d28:	6822      	ldr	r2, [r4, #0]
 8005d2a:	1b52      	subs	r2, r2, r5
 8005d2c:	d420      	bmi.n	8005d70 <_malloc_r+0xd0>
 8005d2e:	2a0b      	cmp	r2, #11
 8005d30:	d917      	bls.n	8005d62 <_malloc_r+0xc2>
 8005d32:	1961      	adds	r1, r4, r5
 8005d34:	42a3      	cmp	r3, r4
 8005d36:	6025      	str	r5, [r4, #0]
 8005d38:	bf18      	it	ne
 8005d3a:	6059      	strne	r1, [r3, #4]
 8005d3c:	6863      	ldr	r3, [r4, #4]
 8005d3e:	bf08      	it	eq
 8005d40:	f8c8 1000 	streq.w	r1, [r8]
 8005d44:	5162      	str	r2, [r4, r5]
 8005d46:	604b      	str	r3, [r1, #4]
 8005d48:	4630      	mov	r0, r6
 8005d4a:	f000 f82f 	bl	8005dac <__malloc_unlock>
 8005d4e:	f104 000b 	add.w	r0, r4, #11
 8005d52:	1d23      	adds	r3, r4, #4
 8005d54:	f020 0007 	bic.w	r0, r0, #7
 8005d58:	1ac2      	subs	r2, r0, r3
 8005d5a:	bf1c      	itt	ne
 8005d5c:	1a1b      	subne	r3, r3, r0
 8005d5e:	50a3      	strne	r3, [r4, r2]
 8005d60:	e7af      	b.n	8005cc2 <_malloc_r+0x22>
 8005d62:	6862      	ldr	r2, [r4, #4]
 8005d64:	42a3      	cmp	r3, r4
 8005d66:	bf0c      	ite	eq
 8005d68:	f8c8 2000 	streq.w	r2, [r8]
 8005d6c:	605a      	strne	r2, [r3, #4]
 8005d6e:	e7eb      	b.n	8005d48 <_malloc_r+0xa8>
 8005d70:	4623      	mov	r3, r4
 8005d72:	6864      	ldr	r4, [r4, #4]
 8005d74:	e7ae      	b.n	8005cd4 <_malloc_r+0x34>
 8005d76:	463c      	mov	r4, r7
 8005d78:	687f      	ldr	r7, [r7, #4]
 8005d7a:	e7b6      	b.n	8005cea <_malloc_r+0x4a>
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	42a3      	cmp	r3, r4
 8005d82:	d1fb      	bne.n	8005d7c <_malloc_r+0xdc>
 8005d84:	2300      	movs	r3, #0
 8005d86:	6053      	str	r3, [r2, #4]
 8005d88:	e7de      	b.n	8005d48 <_malloc_r+0xa8>
 8005d8a:	230c      	movs	r3, #12
 8005d8c:	6033      	str	r3, [r6, #0]
 8005d8e:	4630      	mov	r0, r6
 8005d90:	f000 f80c 	bl	8005dac <__malloc_unlock>
 8005d94:	e794      	b.n	8005cc0 <_malloc_r+0x20>
 8005d96:	6005      	str	r5, [r0, #0]
 8005d98:	e7d6      	b.n	8005d48 <_malloc_r+0xa8>
 8005d9a:	bf00      	nop
 8005d9c:	20004934 	.word	0x20004934

08005da0 <__malloc_lock>:
 8005da0:	4801      	ldr	r0, [pc, #4]	@ (8005da8 <__malloc_lock+0x8>)
 8005da2:	f7ff bf00 	b.w	8005ba6 <__retarget_lock_acquire_recursive>
 8005da6:	bf00      	nop
 8005da8:	2000492c 	.word	0x2000492c

08005dac <__malloc_unlock>:
 8005dac:	4801      	ldr	r0, [pc, #4]	@ (8005db4 <__malloc_unlock+0x8>)
 8005dae:	f7ff befb 	b.w	8005ba8 <__retarget_lock_release_recursive>
 8005db2:	bf00      	nop
 8005db4:	2000492c 	.word	0x2000492c

08005db8 <__ssputs_r>:
 8005db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dbc:	688e      	ldr	r6, [r1, #8]
 8005dbe:	461f      	mov	r7, r3
 8005dc0:	42be      	cmp	r6, r7
 8005dc2:	680b      	ldr	r3, [r1, #0]
 8005dc4:	4682      	mov	sl, r0
 8005dc6:	460c      	mov	r4, r1
 8005dc8:	4690      	mov	r8, r2
 8005dca:	d82d      	bhi.n	8005e28 <__ssputs_r+0x70>
 8005dcc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005dd0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005dd4:	d026      	beq.n	8005e24 <__ssputs_r+0x6c>
 8005dd6:	6965      	ldr	r5, [r4, #20]
 8005dd8:	6909      	ldr	r1, [r1, #16]
 8005dda:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005dde:	eba3 0901 	sub.w	r9, r3, r1
 8005de2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005de6:	1c7b      	adds	r3, r7, #1
 8005de8:	444b      	add	r3, r9
 8005dea:	106d      	asrs	r5, r5, #1
 8005dec:	429d      	cmp	r5, r3
 8005dee:	bf38      	it	cc
 8005df0:	461d      	movcc	r5, r3
 8005df2:	0553      	lsls	r3, r2, #21
 8005df4:	d527      	bpl.n	8005e46 <__ssputs_r+0x8e>
 8005df6:	4629      	mov	r1, r5
 8005df8:	f7ff ff52 	bl	8005ca0 <_malloc_r>
 8005dfc:	4606      	mov	r6, r0
 8005dfe:	b360      	cbz	r0, 8005e5a <__ssputs_r+0xa2>
 8005e00:	6921      	ldr	r1, [r4, #16]
 8005e02:	464a      	mov	r2, r9
 8005e04:	f7ff fed1 	bl	8005baa <memcpy>
 8005e08:	89a3      	ldrh	r3, [r4, #12]
 8005e0a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005e0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e12:	81a3      	strh	r3, [r4, #12]
 8005e14:	6126      	str	r6, [r4, #16]
 8005e16:	6165      	str	r5, [r4, #20]
 8005e18:	444e      	add	r6, r9
 8005e1a:	eba5 0509 	sub.w	r5, r5, r9
 8005e1e:	6026      	str	r6, [r4, #0]
 8005e20:	60a5      	str	r5, [r4, #8]
 8005e22:	463e      	mov	r6, r7
 8005e24:	42be      	cmp	r6, r7
 8005e26:	d900      	bls.n	8005e2a <__ssputs_r+0x72>
 8005e28:	463e      	mov	r6, r7
 8005e2a:	6820      	ldr	r0, [r4, #0]
 8005e2c:	4632      	mov	r2, r6
 8005e2e:	4641      	mov	r1, r8
 8005e30:	f000 fbb4 	bl	800659c <memmove>
 8005e34:	68a3      	ldr	r3, [r4, #8]
 8005e36:	1b9b      	subs	r3, r3, r6
 8005e38:	60a3      	str	r3, [r4, #8]
 8005e3a:	6823      	ldr	r3, [r4, #0]
 8005e3c:	4433      	add	r3, r6
 8005e3e:	6023      	str	r3, [r4, #0]
 8005e40:	2000      	movs	r0, #0
 8005e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e46:	462a      	mov	r2, r5
 8005e48:	f000 fbf4 	bl	8006634 <_realloc_r>
 8005e4c:	4606      	mov	r6, r0
 8005e4e:	2800      	cmp	r0, #0
 8005e50:	d1e0      	bne.n	8005e14 <__ssputs_r+0x5c>
 8005e52:	6921      	ldr	r1, [r4, #16]
 8005e54:	4650      	mov	r0, sl
 8005e56:	f7ff feb7 	bl	8005bc8 <_free_r>
 8005e5a:	230c      	movs	r3, #12
 8005e5c:	f8ca 3000 	str.w	r3, [sl]
 8005e60:	89a3      	ldrh	r3, [r4, #12]
 8005e62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e66:	81a3      	strh	r3, [r4, #12]
 8005e68:	f04f 30ff 	mov.w	r0, #4294967295
 8005e6c:	e7e9      	b.n	8005e42 <__ssputs_r+0x8a>
	...

08005e70 <_svfiprintf_r>:
 8005e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e74:	4698      	mov	r8, r3
 8005e76:	898b      	ldrh	r3, [r1, #12]
 8005e78:	061b      	lsls	r3, r3, #24
 8005e7a:	b09d      	sub	sp, #116	@ 0x74
 8005e7c:	4607      	mov	r7, r0
 8005e7e:	460d      	mov	r5, r1
 8005e80:	4614      	mov	r4, r2
 8005e82:	d510      	bpl.n	8005ea6 <_svfiprintf_r+0x36>
 8005e84:	690b      	ldr	r3, [r1, #16]
 8005e86:	b973      	cbnz	r3, 8005ea6 <_svfiprintf_r+0x36>
 8005e88:	2140      	movs	r1, #64	@ 0x40
 8005e8a:	f7ff ff09 	bl	8005ca0 <_malloc_r>
 8005e8e:	6028      	str	r0, [r5, #0]
 8005e90:	6128      	str	r0, [r5, #16]
 8005e92:	b930      	cbnz	r0, 8005ea2 <_svfiprintf_r+0x32>
 8005e94:	230c      	movs	r3, #12
 8005e96:	603b      	str	r3, [r7, #0]
 8005e98:	f04f 30ff 	mov.w	r0, #4294967295
 8005e9c:	b01d      	add	sp, #116	@ 0x74
 8005e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ea2:	2340      	movs	r3, #64	@ 0x40
 8005ea4:	616b      	str	r3, [r5, #20]
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005eaa:	2320      	movs	r3, #32
 8005eac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005eb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005eb4:	2330      	movs	r3, #48	@ 0x30
 8005eb6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006054 <_svfiprintf_r+0x1e4>
 8005eba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005ebe:	f04f 0901 	mov.w	r9, #1
 8005ec2:	4623      	mov	r3, r4
 8005ec4:	469a      	mov	sl, r3
 8005ec6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005eca:	b10a      	cbz	r2, 8005ed0 <_svfiprintf_r+0x60>
 8005ecc:	2a25      	cmp	r2, #37	@ 0x25
 8005ece:	d1f9      	bne.n	8005ec4 <_svfiprintf_r+0x54>
 8005ed0:	ebba 0b04 	subs.w	fp, sl, r4
 8005ed4:	d00b      	beq.n	8005eee <_svfiprintf_r+0x7e>
 8005ed6:	465b      	mov	r3, fp
 8005ed8:	4622      	mov	r2, r4
 8005eda:	4629      	mov	r1, r5
 8005edc:	4638      	mov	r0, r7
 8005ede:	f7ff ff6b 	bl	8005db8 <__ssputs_r>
 8005ee2:	3001      	adds	r0, #1
 8005ee4:	f000 80a7 	beq.w	8006036 <_svfiprintf_r+0x1c6>
 8005ee8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005eea:	445a      	add	r2, fp
 8005eec:	9209      	str	r2, [sp, #36]	@ 0x24
 8005eee:	f89a 3000 	ldrb.w	r3, [sl]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	f000 809f 	beq.w	8006036 <_svfiprintf_r+0x1c6>
 8005ef8:	2300      	movs	r3, #0
 8005efa:	f04f 32ff 	mov.w	r2, #4294967295
 8005efe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f02:	f10a 0a01 	add.w	sl, sl, #1
 8005f06:	9304      	str	r3, [sp, #16]
 8005f08:	9307      	str	r3, [sp, #28]
 8005f0a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005f0e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005f10:	4654      	mov	r4, sl
 8005f12:	2205      	movs	r2, #5
 8005f14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f18:	484e      	ldr	r0, [pc, #312]	@ (8006054 <_svfiprintf_r+0x1e4>)
 8005f1a:	f7fa f971 	bl	8000200 <memchr>
 8005f1e:	9a04      	ldr	r2, [sp, #16]
 8005f20:	b9d8      	cbnz	r0, 8005f5a <_svfiprintf_r+0xea>
 8005f22:	06d0      	lsls	r0, r2, #27
 8005f24:	bf44      	itt	mi
 8005f26:	2320      	movmi	r3, #32
 8005f28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f2c:	0711      	lsls	r1, r2, #28
 8005f2e:	bf44      	itt	mi
 8005f30:	232b      	movmi	r3, #43	@ 0x2b
 8005f32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f36:	f89a 3000 	ldrb.w	r3, [sl]
 8005f3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f3c:	d015      	beq.n	8005f6a <_svfiprintf_r+0xfa>
 8005f3e:	9a07      	ldr	r2, [sp, #28]
 8005f40:	4654      	mov	r4, sl
 8005f42:	2000      	movs	r0, #0
 8005f44:	f04f 0c0a 	mov.w	ip, #10
 8005f48:	4621      	mov	r1, r4
 8005f4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f4e:	3b30      	subs	r3, #48	@ 0x30
 8005f50:	2b09      	cmp	r3, #9
 8005f52:	d94b      	bls.n	8005fec <_svfiprintf_r+0x17c>
 8005f54:	b1b0      	cbz	r0, 8005f84 <_svfiprintf_r+0x114>
 8005f56:	9207      	str	r2, [sp, #28]
 8005f58:	e014      	b.n	8005f84 <_svfiprintf_r+0x114>
 8005f5a:	eba0 0308 	sub.w	r3, r0, r8
 8005f5e:	fa09 f303 	lsl.w	r3, r9, r3
 8005f62:	4313      	orrs	r3, r2
 8005f64:	9304      	str	r3, [sp, #16]
 8005f66:	46a2      	mov	sl, r4
 8005f68:	e7d2      	b.n	8005f10 <_svfiprintf_r+0xa0>
 8005f6a:	9b03      	ldr	r3, [sp, #12]
 8005f6c:	1d19      	adds	r1, r3, #4
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	9103      	str	r1, [sp, #12]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	bfbb      	ittet	lt
 8005f76:	425b      	neglt	r3, r3
 8005f78:	f042 0202 	orrlt.w	r2, r2, #2
 8005f7c:	9307      	strge	r3, [sp, #28]
 8005f7e:	9307      	strlt	r3, [sp, #28]
 8005f80:	bfb8      	it	lt
 8005f82:	9204      	strlt	r2, [sp, #16]
 8005f84:	7823      	ldrb	r3, [r4, #0]
 8005f86:	2b2e      	cmp	r3, #46	@ 0x2e
 8005f88:	d10a      	bne.n	8005fa0 <_svfiprintf_r+0x130>
 8005f8a:	7863      	ldrb	r3, [r4, #1]
 8005f8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f8e:	d132      	bne.n	8005ff6 <_svfiprintf_r+0x186>
 8005f90:	9b03      	ldr	r3, [sp, #12]
 8005f92:	1d1a      	adds	r2, r3, #4
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	9203      	str	r2, [sp, #12]
 8005f98:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005f9c:	3402      	adds	r4, #2
 8005f9e:	9305      	str	r3, [sp, #20]
 8005fa0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006064 <_svfiprintf_r+0x1f4>
 8005fa4:	7821      	ldrb	r1, [r4, #0]
 8005fa6:	2203      	movs	r2, #3
 8005fa8:	4650      	mov	r0, sl
 8005faa:	f7fa f929 	bl	8000200 <memchr>
 8005fae:	b138      	cbz	r0, 8005fc0 <_svfiprintf_r+0x150>
 8005fb0:	9b04      	ldr	r3, [sp, #16]
 8005fb2:	eba0 000a 	sub.w	r0, r0, sl
 8005fb6:	2240      	movs	r2, #64	@ 0x40
 8005fb8:	4082      	lsls	r2, r0
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	3401      	adds	r4, #1
 8005fbe:	9304      	str	r3, [sp, #16]
 8005fc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fc4:	4824      	ldr	r0, [pc, #144]	@ (8006058 <_svfiprintf_r+0x1e8>)
 8005fc6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005fca:	2206      	movs	r2, #6
 8005fcc:	f7fa f918 	bl	8000200 <memchr>
 8005fd0:	2800      	cmp	r0, #0
 8005fd2:	d036      	beq.n	8006042 <_svfiprintf_r+0x1d2>
 8005fd4:	4b21      	ldr	r3, [pc, #132]	@ (800605c <_svfiprintf_r+0x1ec>)
 8005fd6:	bb1b      	cbnz	r3, 8006020 <_svfiprintf_r+0x1b0>
 8005fd8:	9b03      	ldr	r3, [sp, #12]
 8005fda:	3307      	adds	r3, #7
 8005fdc:	f023 0307 	bic.w	r3, r3, #7
 8005fe0:	3308      	adds	r3, #8
 8005fe2:	9303      	str	r3, [sp, #12]
 8005fe4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fe6:	4433      	add	r3, r6
 8005fe8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fea:	e76a      	b.n	8005ec2 <_svfiprintf_r+0x52>
 8005fec:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ff0:	460c      	mov	r4, r1
 8005ff2:	2001      	movs	r0, #1
 8005ff4:	e7a8      	b.n	8005f48 <_svfiprintf_r+0xd8>
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	3401      	adds	r4, #1
 8005ffa:	9305      	str	r3, [sp, #20]
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	f04f 0c0a 	mov.w	ip, #10
 8006002:	4620      	mov	r0, r4
 8006004:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006008:	3a30      	subs	r2, #48	@ 0x30
 800600a:	2a09      	cmp	r2, #9
 800600c:	d903      	bls.n	8006016 <_svfiprintf_r+0x1a6>
 800600e:	2b00      	cmp	r3, #0
 8006010:	d0c6      	beq.n	8005fa0 <_svfiprintf_r+0x130>
 8006012:	9105      	str	r1, [sp, #20]
 8006014:	e7c4      	b.n	8005fa0 <_svfiprintf_r+0x130>
 8006016:	fb0c 2101 	mla	r1, ip, r1, r2
 800601a:	4604      	mov	r4, r0
 800601c:	2301      	movs	r3, #1
 800601e:	e7f0      	b.n	8006002 <_svfiprintf_r+0x192>
 8006020:	ab03      	add	r3, sp, #12
 8006022:	9300      	str	r3, [sp, #0]
 8006024:	462a      	mov	r2, r5
 8006026:	4b0e      	ldr	r3, [pc, #56]	@ (8006060 <_svfiprintf_r+0x1f0>)
 8006028:	a904      	add	r1, sp, #16
 800602a:	4638      	mov	r0, r7
 800602c:	f3af 8000 	nop.w
 8006030:	1c42      	adds	r2, r0, #1
 8006032:	4606      	mov	r6, r0
 8006034:	d1d6      	bne.n	8005fe4 <_svfiprintf_r+0x174>
 8006036:	89ab      	ldrh	r3, [r5, #12]
 8006038:	065b      	lsls	r3, r3, #25
 800603a:	f53f af2d 	bmi.w	8005e98 <_svfiprintf_r+0x28>
 800603e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006040:	e72c      	b.n	8005e9c <_svfiprintf_r+0x2c>
 8006042:	ab03      	add	r3, sp, #12
 8006044:	9300      	str	r3, [sp, #0]
 8006046:	462a      	mov	r2, r5
 8006048:	4b05      	ldr	r3, [pc, #20]	@ (8006060 <_svfiprintf_r+0x1f0>)
 800604a:	a904      	add	r1, sp, #16
 800604c:	4638      	mov	r0, r7
 800604e:	f000 f879 	bl	8006144 <_printf_i>
 8006052:	e7ed      	b.n	8006030 <_svfiprintf_r+0x1c0>
 8006054:	080067c0 	.word	0x080067c0
 8006058:	080067ca 	.word	0x080067ca
 800605c:	00000000 	.word	0x00000000
 8006060:	08005db9 	.word	0x08005db9
 8006064:	080067c6 	.word	0x080067c6

08006068 <_printf_common>:
 8006068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800606c:	4616      	mov	r6, r2
 800606e:	4698      	mov	r8, r3
 8006070:	688a      	ldr	r2, [r1, #8]
 8006072:	690b      	ldr	r3, [r1, #16]
 8006074:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006078:	4293      	cmp	r3, r2
 800607a:	bfb8      	it	lt
 800607c:	4613      	movlt	r3, r2
 800607e:	6033      	str	r3, [r6, #0]
 8006080:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006084:	4607      	mov	r7, r0
 8006086:	460c      	mov	r4, r1
 8006088:	b10a      	cbz	r2, 800608e <_printf_common+0x26>
 800608a:	3301      	adds	r3, #1
 800608c:	6033      	str	r3, [r6, #0]
 800608e:	6823      	ldr	r3, [r4, #0]
 8006090:	0699      	lsls	r1, r3, #26
 8006092:	bf42      	ittt	mi
 8006094:	6833      	ldrmi	r3, [r6, #0]
 8006096:	3302      	addmi	r3, #2
 8006098:	6033      	strmi	r3, [r6, #0]
 800609a:	6825      	ldr	r5, [r4, #0]
 800609c:	f015 0506 	ands.w	r5, r5, #6
 80060a0:	d106      	bne.n	80060b0 <_printf_common+0x48>
 80060a2:	f104 0a19 	add.w	sl, r4, #25
 80060a6:	68e3      	ldr	r3, [r4, #12]
 80060a8:	6832      	ldr	r2, [r6, #0]
 80060aa:	1a9b      	subs	r3, r3, r2
 80060ac:	42ab      	cmp	r3, r5
 80060ae:	dc26      	bgt.n	80060fe <_printf_common+0x96>
 80060b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80060b4:	6822      	ldr	r2, [r4, #0]
 80060b6:	3b00      	subs	r3, #0
 80060b8:	bf18      	it	ne
 80060ba:	2301      	movne	r3, #1
 80060bc:	0692      	lsls	r2, r2, #26
 80060be:	d42b      	bmi.n	8006118 <_printf_common+0xb0>
 80060c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80060c4:	4641      	mov	r1, r8
 80060c6:	4638      	mov	r0, r7
 80060c8:	47c8      	blx	r9
 80060ca:	3001      	adds	r0, #1
 80060cc:	d01e      	beq.n	800610c <_printf_common+0xa4>
 80060ce:	6823      	ldr	r3, [r4, #0]
 80060d0:	6922      	ldr	r2, [r4, #16]
 80060d2:	f003 0306 	and.w	r3, r3, #6
 80060d6:	2b04      	cmp	r3, #4
 80060d8:	bf02      	ittt	eq
 80060da:	68e5      	ldreq	r5, [r4, #12]
 80060dc:	6833      	ldreq	r3, [r6, #0]
 80060de:	1aed      	subeq	r5, r5, r3
 80060e0:	68a3      	ldr	r3, [r4, #8]
 80060e2:	bf0c      	ite	eq
 80060e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060e8:	2500      	movne	r5, #0
 80060ea:	4293      	cmp	r3, r2
 80060ec:	bfc4      	itt	gt
 80060ee:	1a9b      	subgt	r3, r3, r2
 80060f0:	18ed      	addgt	r5, r5, r3
 80060f2:	2600      	movs	r6, #0
 80060f4:	341a      	adds	r4, #26
 80060f6:	42b5      	cmp	r5, r6
 80060f8:	d11a      	bne.n	8006130 <_printf_common+0xc8>
 80060fa:	2000      	movs	r0, #0
 80060fc:	e008      	b.n	8006110 <_printf_common+0xa8>
 80060fe:	2301      	movs	r3, #1
 8006100:	4652      	mov	r2, sl
 8006102:	4641      	mov	r1, r8
 8006104:	4638      	mov	r0, r7
 8006106:	47c8      	blx	r9
 8006108:	3001      	adds	r0, #1
 800610a:	d103      	bne.n	8006114 <_printf_common+0xac>
 800610c:	f04f 30ff 	mov.w	r0, #4294967295
 8006110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006114:	3501      	adds	r5, #1
 8006116:	e7c6      	b.n	80060a6 <_printf_common+0x3e>
 8006118:	18e1      	adds	r1, r4, r3
 800611a:	1c5a      	adds	r2, r3, #1
 800611c:	2030      	movs	r0, #48	@ 0x30
 800611e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006122:	4422      	add	r2, r4
 8006124:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006128:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800612c:	3302      	adds	r3, #2
 800612e:	e7c7      	b.n	80060c0 <_printf_common+0x58>
 8006130:	2301      	movs	r3, #1
 8006132:	4622      	mov	r2, r4
 8006134:	4641      	mov	r1, r8
 8006136:	4638      	mov	r0, r7
 8006138:	47c8      	blx	r9
 800613a:	3001      	adds	r0, #1
 800613c:	d0e6      	beq.n	800610c <_printf_common+0xa4>
 800613e:	3601      	adds	r6, #1
 8006140:	e7d9      	b.n	80060f6 <_printf_common+0x8e>
	...

08006144 <_printf_i>:
 8006144:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006148:	7e0f      	ldrb	r7, [r1, #24]
 800614a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800614c:	2f78      	cmp	r7, #120	@ 0x78
 800614e:	4691      	mov	r9, r2
 8006150:	4680      	mov	r8, r0
 8006152:	460c      	mov	r4, r1
 8006154:	469a      	mov	sl, r3
 8006156:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800615a:	d807      	bhi.n	800616c <_printf_i+0x28>
 800615c:	2f62      	cmp	r7, #98	@ 0x62
 800615e:	d80a      	bhi.n	8006176 <_printf_i+0x32>
 8006160:	2f00      	cmp	r7, #0
 8006162:	f000 80d1 	beq.w	8006308 <_printf_i+0x1c4>
 8006166:	2f58      	cmp	r7, #88	@ 0x58
 8006168:	f000 80b8 	beq.w	80062dc <_printf_i+0x198>
 800616c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006170:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006174:	e03a      	b.n	80061ec <_printf_i+0xa8>
 8006176:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800617a:	2b15      	cmp	r3, #21
 800617c:	d8f6      	bhi.n	800616c <_printf_i+0x28>
 800617e:	a101      	add	r1, pc, #4	@ (adr r1, 8006184 <_printf_i+0x40>)
 8006180:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006184:	080061dd 	.word	0x080061dd
 8006188:	080061f1 	.word	0x080061f1
 800618c:	0800616d 	.word	0x0800616d
 8006190:	0800616d 	.word	0x0800616d
 8006194:	0800616d 	.word	0x0800616d
 8006198:	0800616d 	.word	0x0800616d
 800619c:	080061f1 	.word	0x080061f1
 80061a0:	0800616d 	.word	0x0800616d
 80061a4:	0800616d 	.word	0x0800616d
 80061a8:	0800616d 	.word	0x0800616d
 80061ac:	0800616d 	.word	0x0800616d
 80061b0:	080062ef 	.word	0x080062ef
 80061b4:	0800621b 	.word	0x0800621b
 80061b8:	080062a9 	.word	0x080062a9
 80061bc:	0800616d 	.word	0x0800616d
 80061c0:	0800616d 	.word	0x0800616d
 80061c4:	08006311 	.word	0x08006311
 80061c8:	0800616d 	.word	0x0800616d
 80061cc:	0800621b 	.word	0x0800621b
 80061d0:	0800616d 	.word	0x0800616d
 80061d4:	0800616d 	.word	0x0800616d
 80061d8:	080062b1 	.word	0x080062b1
 80061dc:	6833      	ldr	r3, [r6, #0]
 80061de:	1d1a      	adds	r2, r3, #4
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	6032      	str	r2, [r6, #0]
 80061e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80061e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80061ec:	2301      	movs	r3, #1
 80061ee:	e09c      	b.n	800632a <_printf_i+0x1e6>
 80061f0:	6833      	ldr	r3, [r6, #0]
 80061f2:	6820      	ldr	r0, [r4, #0]
 80061f4:	1d19      	adds	r1, r3, #4
 80061f6:	6031      	str	r1, [r6, #0]
 80061f8:	0606      	lsls	r6, r0, #24
 80061fa:	d501      	bpl.n	8006200 <_printf_i+0xbc>
 80061fc:	681d      	ldr	r5, [r3, #0]
 80061fe:	e003      	b.n	8006208 <_printf_i+0xc4>
 8006200:	0645      	lsls	r5, r0, #25
 8006202:	d5fb      	bpl.n	80061fc <_printf_i+0xb8>
 8006204:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006208:	2d00      	cmp	r5, #0
 800620a:	da03      	bge.n	8006214 <_printf_i+0xd0>
 800620c:	232d      	movs	r3, #45	@ 0x2d
 800620e:	426d      	negs	r5, r5
 8006210:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006214:	4858      	ldr	r0, [pc, #352]	@ (8006378 <_printf_i+0x234>)
 8006216:	230a      	movs	r3, #10
 8006218:	e011      	b.n	800623e <_printf_i+0xfa>
 800621a:	6821      	ldr	r1, [r4, #0]
 800621c:	6833      	ldr	r3, [r6, #0]
 800621e:	0608      	lsls	r0, r1, #24
 8006220:	f853 5b04 	ldr.w	r5, [r3], #4
 8006224:	d402      	bmi.n	800622c <_printf_i+0xe8>
 8006226:	0649      	lsls	r1, r1, #25
 8006228:	bf48      	it	mi
 800622a:	b2ad      	uxthmi	r5, r5
 800622c:	2f6f      	cmp	r7, #111	@ 0x6f
 800622e:	4852      	ldr	r0, [pc, #328]	@ (8006378 <_printf_i+0x234>)
 8006230:	6033      	str	r3, [r6, #0]
 8006232:	bf14      	ite	ne
 8006234:	230a      	movne	r3, #10
 8006236:	2308      	moveq	r3, #8
 8006238:	2100      	movs	r1, #0
 800623a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800623e:	6866      	ldr	r6, [r4, #4]
 8006240:	60a6      	str	r6, [r4, #8]
 8006242:	2e00      	cmp	r6, #0
 8006244:	db05      	blt.n	8006252 <_printf_i+0x10e>
 8006246:	6821      	ldr	r1, [r4, #0]
 8006248:	432e      	orrs	r6, r5
 800624a:	f021 0104 	bic.w	r1, r1, #4
 800624e:	6021      	str	r1, [r4, #0]
 8006250:	d04b      	beq.n	80062ea <_printf_i+0x1a6>
 8006252:	4616      	mov	r6, r2
 8006254:	fbb5 f1f3 	udiv	r1, r5, r3
 8006258:	fb03 5711 	mls	r7, r3, r1, r5
 800625c:	5dc7      	ldrb	r7, [r0, r7]
 800625e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006262:	462f      	mov	r7, r5
 8006264:	42bb      	cmp	r3, r7
 8006266:	460d      	mov	r5, r1
 8006268:	d9f4      	bls.n	8006254 <_printf_i+0x110>
 800626a:	2b08      	cmp	r3, #8
 800626c:	d10b      	bne.n	8006286 <_printf_i+0x142>
 800626e:	6823      	ldr	r3, [r4, #0]
 8006270:	07df      	lsls	r7, r3, #31
 8006272:	d508      	bpl.n	8006286 <_printf_i+0x142>
 8006274:	6923      	ldr	r3, [r4, #16]
 8006276:	6861      	ldr	r1, [r4, #4]
 8006278:	4299      	cmp	r1, r3
 800627a:	bfde      	ittt	le
 800627c:	2330      	movle	r3, #48	@ 0x30
 800627e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006282:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006286:	1b92      	subs	r2, r2, r6
 8006288:	6122      	str	r2, [r4, #16]
 800628a:	f8cd a000 	str.w	sl, [sp]
 800628e:	464b      	mov	r3, r9
 8006290:	aa03      	add	r2, sp, #12
 8006292:	4621      	mov	r1, r4
 8006294:	4640      	mov	r0, r8
 8006296:	f7ff fee7 	bl	8006068 <_printf_common>
 800629a:	3001      	adds	r0, #1
 800629c:	d14a      	bne.n	8006334 <_printf_i+0x1f0>
 800629e:	f04f 30ff 	mov.w	r0, #4294967295
 80062a2:	b004      	add	sp, #16
 80062a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062a8:	6823      	ldr	r3, [r4, #0]
 80062aa:	f043 0320 	orr.w	r3, r3, #32
 80062ae:	6023      	str	r3, [r4, #0]
 80062b0:	4832      	ldr	r0, [pc, #200]	@ (800637c <_printf_i+0x238>)
 80062b2:	2778      	movs	r7, #120	@ 0x78
 80062b4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80062b8:	6823      	ldr	r3, [r4, #0]
 80062ba:	6831      	ldr	r1, [r6, #0]
 80062bc:	061f      	lsls	r7, r3, #24
 80062be:	f851 5b04 	ldr.w	r5, [r1], #4
 80062c2:	d402      	bmi.n	80062ca <_printf_i+0x186>
 80062c4:	065f      	lsls	r7, r3, #25
 80062c6:	bf48      	it	mi
 80062c8:	b2ad      	uxthmi	r5, r5
 80062ca:	6031      	str	r1, [r6, #0]
 80062cc:	07d9      	lsls	r1, r3, #31
 80062ce:	bf44      	itt	mi
 80062d0:	f043 0320 	orrmi.w	r3, r3, #32
 80062d4:	6023      	strmi	r3, [r4, #0]
 80062d6:	b11d      	cbz	r5, 80062e0 <_printf_i+0x19c>
 80062d8:	2310      	movs	r3, #16
 80062da:	e7ad      	b.n	8006238 <_printf_i+0xf4>
 80062dc:	4826      	ldr	r0, [pc, #152]	@ (8006378 <_printf_i+0x234>)
 80062de:	e7e9      	b.n	80062b4 <_printf_i+0x170>
 80062e0:	6823      	ldr	r3, [r4, #0]
 80062e2:	f023 0320 	bic.w	r3, r3, #32
 80062e6:	6023      	str	r3, [r4, #0]
 80062e8:	e7f6      	b.n	80062d8 <_printf_i+0x194>
 80062ea:	4616      	mov	r6, r2
 80062ec:	e7bd      	b.n	800626a <_printf_i+0x126>
 80062ee:	6833      	ldr	r3, [r6, #0]
 80062f0:	6825      	ldr	r5, [r4, #0]
 80062f2:	6961      	ldr	r1, [r4, #20]
 80062f4:	1d18      	adds	r0, r3, #4
 80062f6:	6030      	str	r0, [r6, #0]
 80062f8:	062e      	lsls	r6, r5, #24
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	d501      	bpl.n	8006302 <_printf_i+0x1be>
 80062fe:	6019      	str	r1, [r3, #0]
 8006300:	e002      	b.n	8006308 <_printf_i+0x1c4>
 8006302:	0668      	lsls	r0, r5, #25
 8006304:	d5fb      	bpl.n	80062fe <_printf_i+0x1ba>
 8006306:	8019      	strh	r1, [r3, #0]
 8006308:	2300      	movs	r3, #0
 800630a:	6123      	str	r3, [r4, #16]
 800630c:	4616      	mov	r6, r2
 800630e:	e7bc      	b.n	800628a <_printf_i+0x146>
 8006310:	6833      	ldr	r3, [r6, #0]
 8006312:	1d1a      	adds	r2, r3, #4
 8006314:	6032      	str	r2, [r6, #0]
 8006316:	681e      	ldr	r6, [r3, #0]
 8006318:	6862      	ldr	r2, [r4, #4]
 800631a:	2100      	movs	r1, #0
 800631c:	4630      	mov	r0, r6
 800631e:	f7f9 ff6f 	bl	8000200 <memchr>
 8006322:	b108      	cbz	r0, 8006328 <_printf_i+0x1e4>
 8006324:	1b80      	subs	r0, r0, r6
 8006326:	6060      	str	r0, [r4, #4]
 8006328:	6863      	ldr	r3, [r4, #4]
 800632a:	6123      	str	r3, [r4, #16]
 800632c:	2300      	movs	r3, #0
 800632e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006332:	e7aa      	b.n	800628a <_printf_i+0x146>
 8006334:	6923      	ldr	r3, [r4, #16]
 8006336:	4632      	mov	r2, r6
 8006338:	4649      	mov	r1, r9
 800633a:	4640      	mov	r0, r8
 800633c:	47d0      	blx	sl
 800633e:	3001      	adds	r0, #1
 8006340:	d0ad      	beq.n	800629e <_printf_i+0x15a>
 8006342:	6823      	ldr	r3, [r4, #0]
 8006344:	079b      	lsls	r3, r3, #30
 8006346:	d413      	bmi.n	8006370 <_printf_i+0x22c>
 8006348:	68e0      	ldr	r0, [r4, #12]
 800634a:	9b03      	ldr	r3, [sp, #12]
 800634c:	4298      	cmp	r0, r3
 800634e:	bfb8      	it	lt
 8006350:	4618      	movlt	r0, r3
 8006352:	e7a6      	b.n	80062a2 <_printf_i+0x15e>
 8006354:	2301      	movs	r3, #1
 8006356:	4632      	mov	r2, r6
 8006358:	4649      	mov	r1, r9
 800635a:	4640      	mov	r0, r8
 800635c:	47d0      	blx	sl
 800635e:	3001      	adds	r0, #1
 8006360:	d09d      	beq.n	800629e <_printf_i+0x15a>
 8006362:	3501      	adds	r5, #1
 8006364:	68e3      	ldr	r3, [r4, #12]
 8006366:	9903      	ldr	r1, [sp, #12]
 8006368:	1a5b      	subs	r3, r3, r1
 800636a:	42ab      	cmp	r3, r5
 800636c:	dcf2      	bgt.n	8006354 <_printf_i+0x210>
 800636e:	e7eb      	b.n	8006348 <_printf_i+0x204>
 8006370:	2500      	movs	r5, #0
 8006372:	f104 0619 	add.w	r6, r4, #25
 8006376:	e7f5      	b.n	8006364 <_printf_i+0x220>
 8006378:	080067d1 	.word	0x080067d1
 800637c:	080067e2 	.word	0x080067e2

08006380 <__sflush_r>:
 8006380:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006388:	0716      	lsls	r6, r2, #28
 800638a:	4605      	mov	r5, r0
 800638c:	460c      	mov	r4, r1
 800638e:	d454      	bmi.n	800643a <__sflush_r+0xba>
 8006390:	684b      	ldr	r3, [r1, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	dc02      	bgt.n	800639c <__sflush_r+0x1c>
 8006396:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006398:	2b00      	cmp	r3, #0
 800639a:	dd48      	ble.n	800642e <__sflush_r+0xae>
 800639c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800639e:	2e00      	cmp	r6, #0
 80063a0:	d045      	beq.n	800642e <__sflush_r+0xae>
 80063a2:	2300      	movs	r3, #0
 80063a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80063a8:	682f      	ldr	r7, [r5, #0]
 80063aa:	6a21      	ldr	r1, [r4, #32]
 80063ac:	602b      	str	r3, [r5, #0]
 80063ae:	d030      	beq.n	8006412 <__sflush_r+0x92>
 80063b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80063b2:	89a3      	ldrh	r3, [r4, #12]
 80063b4:	0759      	lsls	r1, r3, #29
 80063b6:	d505      	bpl.n	80063c4 <__sflush_r+0x44>
 80063b8:	6863      	ldr	r3, [r4, #4]
 80063ba:	1ad2      	subs	r2, r2, r3
 80063bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80063be:	b10b      	cbz	r3, 80063c4 <__sflush_r+0x44>
 80063c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80063c2:	1ad2      	subs	r2, r2, r3
 80063c4:	2300      	movs	r3, #0
 80063c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80063c8:	6a21      	ldr	r1, [r4, #32]
 80063ca:	4628      	mov	r0, r5
 80063cc:	47b0      	blx	r6
 80063ce:	1c43      	adds	r3, r0, #1
 80063d0:	89a3      	ldrh	r3, [r4, #12]
 80063d2:	d106      	bne.n	80063e2 <__sflush_r+0x62>
 80063d4:	6829      	ldr	r1, [r5, #0]
 80063d6:	291d      	cmp	r1, #29
 80063d8:	d82b      	bhi.n	8006432 <__sflush_r+0xb2>
 80063da:	4a2a      	ldr	r2, [pc, #168]	@ (8006484 <__sflush_r+0x104>)
 80063dc:	40ca      	lsrs	r2, r1
 80063de:	07d6      	lsls	r6, r2, #31
 80063e0:	d527      	bpl.n	8006432 <__sflush_r+0xb2>
 80063e2:	2200      	movs	r2, #0
 80063e4:	6062      	str	r2, [r4, #4]
 80063e6:	04d9      	lsls	r1, r3, #19
 80063e8:	6922      	ldr	r2, [r4, #16]
 80063ea:	6022      	str	r2, [r4, #0]
 80063ec:	d504      	bpl.n	80063f8 <__sflush_r+0x78>
 80063ee:	1c42      	adds	r2, r0, #1
 80063f0:	d101      	bne.n	80063f6 <__sflush_r+0x76>
 80063f2:	682b      	ldr	r3, [r5, #0]
 80063f4:	b903      	cbnz	r3, 80063f8 <__sflush_r+0x78>
 80063f6:	6560      	str	r0, [r4, #84]	@ 0x54
 80063f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80063fa:	602f      	str	r7, [r5, #0]
 80063fc:	b1b9      	cbz	r1, 800642e <__sflush_r+0xae>
 80063fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006402:	4299      	cmp	r1, r3
 8006404:	d002      	beq.n	800640c <__sflush_r+0x8c>
 8006406:	4628      	mov	r0, r5
 8006408:	f7ff fbde 	bl	8005bc8 <_free_r>
 800640c:	2300      	movs	r3, #0
 800640e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006410:	e00d      	b.n	800642e <__sflush_r+0xae>
 8006412:	2301      	movs	r3, #1
 8006414:	4628      	mov	r0, r5
 8006416:	47b0      	blx	r6
 8006418:	4602      	mov	r2, r0
 800641a:	1c50      	adds	r0, r2, #1
 800641c:	d1c9      	bne.n	80063b2 <__sflush_r+0x32>
 800641e:	682b      	ldr	r3, [r5, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d0c6      	beq.n	80063b2 <__sflush_r+0x32>
 8006424:	2b1d      	cmp	r3, #29
 8006426:	d001      	beq.n	800642c <__sflush_r+0xac>
 8006428:	2b16      	cmp	r3, #22
 800642a:	d11e      	bne.n	800646a <__sflush_r+0xea>
 800642c:	602f      	str	r7, [r5, #0]
 800642e:	2000      	movs	r0, #0
 8006430:	e022      	b.n	8006478 <__sflush_r+0xf8>
 8006432:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006436:	b21b      	sxth	r3, r3
 8006438:	e01b      	b.n	8006472 <__sflush_r+0xf2>
 800643a:	690f      	ldr	r7, [r1, #16]
 800643c:	2f00      	cmp	r7, #0
 800643e:	d0f6      	beq.n	800642e <__sflush_r+0xae>
 8006440:	0793      	lsls	r3, r2, #30
 8006442:	680e      	ldr	r6, [r1, #0]
 8006444:	bf08      	it	eq
 8006446:	694b      	ldreq	r3, [r1, #20]
 8006448:	600f      	str	r7, [r1, #0]
 800644a:	bf18      	it	ne
 800644c:	2300      	movne	r3, #0
 800644e:	eba6 0807 	sub.w	r8, r6, r7
 8006452:	608b      	str	r3, [r1, #8]
 8006454:	f1b8 0f00 	cmp.w	r8, #0
 8006458:	dde9      	ble.n	800642e <__sflush_r+0xae>
 800645a:	6a21      	ldr	r1, [r4, #32]
 800645c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800645e:	4643      	mov	r3, r8
 8006460:	463a      	mov	r2, r7
 8006462:	4628      	mov	r0, r5
 8006464:	47b0      	blx	r6
 8006466:	2800      	cmp	r0, #0
 8006468:	dc08      	bgt.n	800647c <__sflush_r+0xfc>
 800646a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800646e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006472:	81a3      	strh	r3, [r4, #12]
 8006474:	f04f 30ff 	mov.w	r0, #4294967295
 8006478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800647c:	4407      	add	r7, r0
 800647e:	eba8 0800 	sub.w	r8, r8, r0
 8006482:	e7e7      	b.n	8006454 <__sflush_r+0xd4>
 8006484:	20400001 	.word	0x20400001

08006488 <_fflush_r>:
 8006488:	b538      	push	{r3, r4, r5, lr}
 800648a:	690b      	ldr	r3, [r1, #16]
 800648c:	4605      	mov	r5, r0
 800648e:	460c      	mov	r4, r1
 8006490:	b913      	cbnz	r3, 8006498 <_fflush_r+0x10>
 8006492:	2500      	movs	r5, #0
 8006494:	4628      	mov	r0, r5
 8006496:	bd38      	pop	{r3, r4, r5, pc}
 8006498:	b118      	cbz	r0, 80064a2 <_fflush_r+0x1a>
 800649a:	6a03      	ldr	r3, [r0, #32]
 800649c:	b90b      	cbnz	r3, 80064a2 <_fflush_r+0x1a>
 800649e:	f7ff f967 	bl	8005770 <__sinit>
 80064a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d0f3      	beq.n	8006492 <_fflush_r+0xa>
 80064aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80064ac:	07d0      	lsls	r0, r2, #31
 80064ae:	d404      	bmi.n	80064ba <_fflush_r+0x32>
 80064b0:	0599      	lsls	r1, r3, #22
 80064b2:	d402      	bmi.n	80064ba <_fflush_r+0x32>
 80064b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80064b6:	f7ff fb76 	bl	8005ba6 <__retarget_lock_acquire_recursive>
 80064ba:	4628      	mov	r0, r5
 80064bc:	4621      	mov	r1, r4
 80064be:	f7ff ff5f 	bl	8006380 <__sflush_r>
 80064c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80064c4:	07da      	lsls	r2, r3, #31
 80064c6:	4605      	mov	r5, r0
 80064c8:	d4e4      	bmi.n	8006494 <_fflush_r+0xc>
 80064ca:	89a3      	ldrh	r3, [r4, #12]
 80064cc:	059b      	lsls	r3, r3, #22
 80064ce:	d4e1      	bmi.n	8006494 <_fflush_r+0xc>
 80064d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80064d2:	f7ff fb69 	bl	8005ba8 <__retarget_lock_release_recursive>
 80064d6:	e7dd      	b.n	8006494 <_fflush_r+0xc>

080064d8 <__swhatbuf_r>:
 80064d8:	b570      	push	{r4, r5, r6, lr}
 80064da:	460c      	mov	r4, r1
 80064dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064e0:	2900      	cmp	r1, #0
 80064e2:	b096      	sub	sp, #88	@ 0x58
 80064e4:	4615      	mov	r5, r2
 80064e6:	461e      	mov	r6, r3
 80064e8:	da0d      	bge.n	8006506 <__swhatbuf_r+0x2e>
 80064ea:	89a3      	ldrh	r3, [r4, #12]
 80064ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80064f0:	f04f 0100 	mov.w	r1, #0
 80064f4:	bf14      	ite	ne
 80064f6:	2340      	movne	r3, #64	@ 0x40
 80064f8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80064fc:	2000      	movs	r0, #0
 80064fe:	6031      	str	r1, [r6, #0]
 8006500:	602b      	str	r3, [r5, #0]
 8006502:	b016      	add	sp, #88	@ 0x58
 8006504:	bd70      	pop	{r4, r5, r6, pc}
 8006506:	466a      	mov	r2, sp
 8006508:	f000 f862 	bl	80065d0 <_fstat_r>
 800650c:	2800      	cmp	r0, #0
 800650e:	dbec      	blt.n	80064ea <__swhatbuf_r+0x12>
 8006510:	9901      	ldr	r1, [sp, #4]
 8006512:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006516:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800651a:	4259      	negs	r1, r3
 800651c:	4159      	adcs	r1, r3
 800651e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006522:	e7eb      	b.n	80064fc <__swhatbuf_r+0x24>

08006524 <__smakebuf_r>:
 8006524:	898b      	ldrh	r3, [r1, #12]
 8006526:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006528:	079d      	lsls	r5, r3, #30
 800652a:	4606      	mov	r6, r0
 800652c:	460c      	mov	r4, r1
 800652e:	d507      	bpl.n	8006540 <__smakebuf_r+0x1c>
 8006530:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006534:	6023      	str	r3, [r4, #0]
 8006536:	6123      	str	r3, [r4, #16]
 8006538:	2301      	movs	r3, #1
 800653a:	6163      	str	r3, [r4, #20]
 800653c:	b003      	add	sp, #12
 800653e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006540:	ab01      	add	r3, sp, #4
 8006542:	466a      	mov	r2, sp
 8006544:	f7ff ffc8 	bl	80064d8 <__swhatbuf_r>
 8006548:	9f00      	ldr	r7, [sp, #0]
 800654a:	4605      	mov	r5, r0
 800654c:	4639      	mov	r1, r7
 800654e:	4630      	mov	r0, r6
 8006550:	f7ff fba6 	bl	8005ca0 <_malloc_r>
 8006554:	b948      	cbnz	r0, 800656a <__smakebuf_r+0x46>
 8006556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800655a:	059a      	lsls	r2, r3, #22
 800655c:	d4ee      	bmi.n	800653c <__smakebuf_r+0x18>
 800655e:	f023 0303 	bic.w	r3, r3, #3
 8006562:	f043 0302 	orr.w	r3, r3, #2
 8006566:	81a3      	strh	r3, [r4, #12]
 8006568:	e7e2      	b.n	8006530 <__smakebuf_r+0xc>
 800656a:	89a3      	ldrh	r3, [r4, #12]
 800656c:	6020      	str	r0, [r4, #0]
 800656e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006572:	81a3      	strh	r3, [r4, #12]
 8006574:	9b01      	ldr	r3, [sp, #4]
 8006576:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800657a:	b15b      	cbz	r3, 8006594 <__smakebuf_r+0x70>
 800657c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006580:	4630      	mov	r0, r6
 8006582:	f000 f837 	bl	80065f4 <_isatty_r>
 8006586:	b128      	cbz	r0, 8006594 <__smakebuf_r+0x70>
 8006588:	89a3      	ldrh	r3, [r4, #12]
 800658a:	f023 0303 	bic.w	r3, r3, #3
 800658e:	f043 0301 	orr.w	r3, r3, #1
 8006592:	81a3      	strh	r3, [r4, #12]
 8006594:	89a3      	ldrh	r3, [r4, #12]
 8006596:	431d      	orrs	r5, r3
 8006598:	81a5      	strh	r5, [r4, #12]
 800659a:	e7cf      	b.n	800653c <__smakebuf_r+0x18>

0800659c <memmove>:
 800659c:	4288      	cmp	r0, r1
 800659e:	b510      	push	{r4, lr}
 80065a0:	eb01 0402 	add.w	r4, r1, r2
 80065a4:	d902      	bls.n	80065ac <memmove+0x10>
 80065a6:	4284      	cmp	r4, r0
 80065a8:	4623      	mov	r3, r4
 80065aa:	d807      	bhi.n	80065bc <memmove+0x20>
 80065ac:	1e43      	subs	r3, r0, #1
 80065ae:	42a1      	cmp	r1, r4
 80065b0:	d008      	beq.n	80065c4 <memmove+0x28>
 80065b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80065ba:	e7f8      	b.n	80065ae <memmove+0x12>
 80065bc:	4402      	add	r2, r0
 80065be:	4601      	mov	r1, r0
 80065c0:	428a      	cmp	r2, r1
 80065c2:	d100      	bne.n	80065c6 <memmove+0x2a>
 80065c4:	bd10      	pop	{r4, pc}
 80065c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80065ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80065ce:	e7f7      	b.n	80065c0 <memmove+0x24>

080065d0 <_fstat_r>:
 80065d0:	b538      	push	{r3, r4, r5, lr}
 80065d2:	4d07      	ldr	r5, [pc, #28]	@ (80065f0 <_fstat_r+0x20>)
 80065d4:	2300      	movs	r3, #0
 80065d6:	4604      	mov	r4, r0
 80065d8:	4608      	mov	r0, r1
 80065da:	4611      	mov	r1, r2
 80065dc:	602b      	str	r3, [r5, #0]
 80065de:	f7fa fd40 	bl	8001062 <_fstat>
 80065e2:	1c43      	adds	r3, r0, #1
 80065e4:	d102      	bne.n	80065ec <_fstat_r+0x1c>
 80065e6:	682b      	ldr	r3, [r5, #0]
 80065e8:	b103      	cbz	r3, 80065ec <_fstat_r+0x1c>
 80065ea:	6023      	str	r3, [r4, #0]
 80065ec:	bd38      	pop	{r3, r4, r5, pc}
 80065ee:	bf00      	nop
 80065f0:	20004928 	.word	0x20004928

080065f4 <_isatty_r>:
 80065f4:	b538      	push	{r3, r4, r5, lr}
 80065f6:	4d06      	ldr	r5, [pc, #24]	@ (8006610 <_isatty_r+0x1c>)
 80065f8:	2300      	movs	r3, #0
 80065fa:	4604      	mov	r4, r0
 80065fc:	4608      	mov	r0, r1
 80065fe:	602b      	str	r3, [r5, #0]
 8006600:	f7fa fd3f 	bl	8001082 <_isatty>
 8006604:	1c43      	adds	r3, r0, #1
 8006606:	d102      	bne.n	800660e <_isatty_r+0x1a>
 8006608:	682b      	ldr	r3, [r5, #0]
 800660a:	b103      	cbz	r3, 800660e <_isatty_r+0x1a>
 800660c:	6023      	str	r3, [r4, #0]
 800660e:	bd38      	pop	{r3, r4, r5, pc}
 8006610:	20004928 	.word	0x20004928

08006614 <_sbrk_r>:
 8006614:	b538      	push	{r3, r4, r5, lr}
 8006616:	4d06      	ldr	r5, [pc, #24]	@ (8006630 <_sbrk_r+0x1c>)
 8006618:	2300      	movs	r3, #0
 800661a:	4604      	mov	r4, r0
 800661c:	4608      	mov	r0, r1
 800661e:	602b      	str	r3, [r5, #0]
 8006620:	f7fa fd48 	bl	80010b4 <_sbrk>
 8006624:	1c43      	adds	r3, r0, #1
 8006626:	d102      	bne.n	800662e <_sbrk_r+0x1a>
 8006628:	682b      	ldr	r3, [r5, #0]
 800662a:	b103      	cbz	r3, 800662e <_sbrk_r+0x1a>
 800662c:	6023      	str	r3, [r4, #0]
 800662e:	bd38      	pop	{r3, r4, r5, pc}
 8006630:	20004928 	.word	0x20004928

08006634 <_realloc_r>:
 8006634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006638:	4607      	mov	r7, r0
 800663a:	4614      	mov	r4, r2
 800663c:	460d      	mov	r5, r1
 800663e:	b921      	cbnz	r1, 800664a <_realloc_r+0x16>
 8006640:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006644:	4611      	mov	r1, r2
 8006646:	f7ff bb2b 	b.w	8005ca0 <_malloc_r>
 800664a:	b92a      	cbnz	r2, 8006658 <_realloc_r+0x24>
 800664c:	f7ff fabc 	bl	8005bc8 <_free_r>
 8006650:	4625      	mov	r5, r4
 8006652:	4628      	mov	r0, r5
 8006654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006658:	f000 f81a 	bl	8006690 <_malloc_usable_size_r>
 800665c:	4284      	cmp	r4, r0
 800665e:	4606      	mov	r6, r0
 8006660:	d802      	bhi.n	8006668 <_realloc_r+0x34>
 8006662:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006666:	d8f4      	bhi.n	8006652 <_realloc_r+0x1e>
 8006668:	4621      	mov	r1, r4
 800666a:	4638      	mov	r0, r7
 800666c:	f7ff fb18 	bl	8005ca0 <_malloc_r>
 8006670:	4680      	mov	r8, r0
 8006672:	b908      	cbnz	r0, 8006678 <_realloc_r+0x44>
 8006674:	4645      	mov	r5, r8
 8006676:	e7ec      	b.n	8006652 <_realloc_r+0x1e>
 8006678:	42b4      	cmp	r4, r6
 800667a:	4622      	mov	r2, r4
 800667c:	4629      	mov	r1, r5
 800667e:	bf28      	it	cs
 8006680:	4632      	movcs	r2, r6
 8006682:	f7ff fa92 	bl	8005baa <memcpy>
 8006686:	4629      	mov	r1, r5
 8006688:	4638      	mov	r0, r7
 800668a:	f7ff fa9d 	bl	8005bc8 <_free_r>
 800668e:	e7f1      	b.n	8006674 <_realloc_r+0x40>

08006690 <_malloc_usable_size_r>:
 8006690:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006694:	1f18      	subs	r0, r3, #4
 8006696:	2b00      	cmp	r3, #0
 8006698:	bfbc      	itt	lt
 800669a:	580b      	ldrlt	r3, [r1, r0]
 800669c:	18c0      	addlt	r0, r0, r3
 800669e:	4770      	bx	lr

080066a0 <_init>:
 80066a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066a2:	bf00      	nop
 80066a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066a6:	bc08      	pop	{r3}
 80066a8:	469e      	mov	lr, r3
 80066aa:	4770      	bx	lr

080066ac <_fini>:
 80066ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ae:	bf00      	nop
 80066b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066b2:	bc08      	pop	{r3}
 80066b4:	469e      	mov	lr, r3
 80066b6:	4770      	bx	lr
