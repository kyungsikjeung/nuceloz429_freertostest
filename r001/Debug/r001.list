
r001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e64  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08005014  08005014  00006014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050e8  080050e8  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080050e8  080050e8  000060e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050f0  080050f0  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050f0  080050f0  000060f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080050f4  080050f4  000060f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080050f8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007010  2**0
                  CONTENTS
 10 .bss          00004778  20000010  20000010  00007010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004788  20004788  00007010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 13 .debug_info   000182ab  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000327c  00000000  00000000  0001f2eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001588  00000000  00000000  00022568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010c8  00000000  00000000  00023af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002666a  00000000  00000000  00024bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000174ff  00000000  00000000  0004b222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea6f2  00000000  00000000  00062721  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014ce13  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005be4  00000000  00000000  0014ce58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000055  00000000  00000000  00152a3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004ffc 	.word	0x08004ffc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	08004ffc 	.word	0x08004ffc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b988 	b.w	8000528 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	468e      	mov	lr, r1
 8000238:	4604      	mov	r4, r0
 800023a:	4688      	mov	r8, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14a      	bne.n	80002d6 <__udivmoddi4+0xa6>
 8000240:	428a      	cmp	r2, r1
 8000242:	4617      	mov	r7, r2
 8000244:	d962      	bls.n	800030c <__udivmoddi4+0xdc>
 8000246:	fab2 f682 	clz	r6, r2
 800024a:	b14e      	cbz	r6, 8000260 <__udivmoddi4+0x30>
 800024c:	f1c6 0320 	rsb	r3, r6, #32
 8000250:	fa01 f806 	lsl.w	r8, r1, r6
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	40b7      	lsls	r7, r6
 800025a:	ea43 0808 	orr.w	r8, r3, r8
 800025e:	40b4      	lsls	r4, r6
 8000260:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000264:	fa1f fc87 	uxth.w	ip, r7
 8000268:	fbb8 f1fe 	udiv	r1, r8, lr
 800026c:	0c23      	lsrs	r3, r4, #16
 800026e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000272:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000276:	fb01 f20c 	mul.w	r2, r1, ip
 800027a:	429a      	cmp	r2, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x62>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f101 30ff 	add.w	r0, r1, #4294967295
 8000284:	f080 80ea 	bcs.w	800045c <__udivmoddi4+0x22c>
 8000288:	429a      	cmp	r2, r3
 800028a:	f240 80e7 	bls.w	800045c <__udivmoddi4+0x22c>
 800028e:	3902      	subs	r1, #2
 8000290:	443b      	add	r3, r7
 8000292:	1a9a      	subs	r2, r3, r2
 8000294:	b2a3      	uxth	r3, r4
 8000296:	fbb2 f0fe 	udiv	r0, r2, lr
 800029a:	fb0e 2210 	mls	r2, lr, r0, r2
 800029e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a6:	459c      	cmp	ip, r3
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0x8e>
 80002aa:	18fb      	adds	r3, r7, r3
 80002ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b0:	f080 80d6 	bcs.w	8000460 <__udivmoddi4+0x230>
 80002b4:	459c      	cmp	ip, r3
 80002b6:	f240 80d3 	bls.w	8000460 <__udivmoddi4+0x230>
 80002ba:	443b      	add	r3, r7
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c2:	eba3 030c 	sub.w	r3, r3, ip
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa2>
 80002ca:	40f3      	lsrs	r3, r6
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xb6>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb0>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa2>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x14c>
 80002ee:	4573      	cmp	r3, lr
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xc8>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 8105 	bhi.w	8000502 <__udivmoddi4+0x2d2>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb6e 0203 	sbc.w	r2, lr, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	4690      	mov	r8, r2
 8000302:	2d00      	cmp	r5, #0
 8000304:	d0e5      	beq.n	80002d2 <__udivmoddi4+0xa2>
 8000306:	e9c5 4800 	strd	r4, r8, [r5]
 800030a:	e7e2      	b.n	80002d2 <__udivmoddi4+0xa2>
 800030c:	2a00      	cmp	r2, #0
 800030e:	f000 8090 	beq.w	8000432 <__udivmoddi4+0x202>
 8000312:	fab2 f682 	clz	r6, r2
 8000316:	2e00      	cmp	r6, #0
 8000318:	f040 80a4 	bne.w	8000464 <__udivmoddi4+0x234>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	0c03      	lsrs	r3, r0, #16
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	b280      	uxth	r0, r0
 8000326:	b2bc      	uxth	r4, r7
 8000328:	2101      	movs	r1, #1
 800032a:	fbb2 fcfe 	udiv	ip, r2, lr
 800032e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000332:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000336:	fb04 f20c 	mul.w	r2, r4, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d907      	bls.n	800034e <__udivmoddi4+0x11e>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x11c>
 8000346:	429a      	cmp	r2, r3
 8000348:	f200 80e0 	bhi.w	800050c <__udivmoddi4+0x2dc>
 800034c:	46c4      	mov	ip, r8
 800034e:	1a9b      	subs	r3, r3, r2
 8000350:	fbb3 f2fe 	udiv	r2, r3, lr
 8000354:	fb0e 3312 	mls	r3, lr, r2, r3
 8000358:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800035c:	fb02 f404 	mul.w	r4, r2, r4
 8000360:	429c      	cmp	r4, r3
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x144>
 8000364:	18fb      	adds	r3, r7, r3
 8000366:	f102 30ff 	add.w	r0, r2, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x142>
 800036c:	429c      	cmp	r4, r3
 800036e:	f200 80ca 	bhi.w	8000506 <__udivmoddi4+0x2d6>
 8000372:	4602      	mov	r2, r0
 8000374:	1b1b      	subs	r3, r3, r4
 8000376:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x98>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa0e f401 	lsl.w	r4, lr, r1
 800038c:	fa20 f306 	lsr.w	r3, r0, r6
 8000390:	fa2e fe06 	lsr.w	lr, lr, r6
 8000394:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000398:	4323      	orrs	r3, r4
 800039a:	fa00 f801 	lsl.w	r8, r0, r1
 800039e:	fa1f fc87 	uxth.w	ip, r7
 80003a2:	fbbe f0f9 	udiv	r0, lr, r9
 80003a6:	0c1c      	lsrs	r4, r3, #16
 80003a8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003ac:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x1a0>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c2:	f080 809c 	bcs.w	80004fe <__udivmoddi4+0x2ce>
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	f240 8099 	bls.w	80004fe <__udivmoddi4+0x2ce>
 80003cc:	3802      	subs	r0, #2
 80003ce:	443c      	add	r4, r7
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	fa1f fe83 	uxth.w	lr, r3
 80003d8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003dc:	fb09 4413 	mls	r4, r9, r3, r4
 80003e0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1ce>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f2:	f080 8082 	bcs.w	80004fa <__udivmoddi4+0x2ca>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d97f      	bls.n	80004fa <__udivmoddi4+0x2ca>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000402:	eba4 040c 	sub.w	r4, r4, ip
 8000406:	fba0 ec02 	umull	lr, ip, r0, r2
 800040a:	4564      	cmp	r4, ip
 800040c:	4673      	mov	r3, lr
 800040e:	46e1      	mov	r9, ip
 8000410:	d362      	bcc.n	80004d8 <__udivmoddi4+0x2a8>
 8000412:	d05f      	beq.n	80004d4 <__udivmoddi4+0x2a4>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x1fe>
 8000416:	ebb8 0203 	subs.w	r2, r8, r3
 800041a:	eb64 0409 	sbc.w	r4, r4, r9
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	fa22 f301 	lsr.w	r3, r2, r1
 8000426:	431e      	orrs	r6, r3
 8000428:	40cc      	lsrs	r4, r1
 800042a:	e9c5 6400 	strd	r6, r4, [r5]
 800042e:	2100      	movs	r1, #0
 8000430:	e74f      	b.n	80002d2 <__udivmoddi4+0xa2>
 8000432:	fbb1 fcf2 	udiv	ip, r1, r2
 8000436:	0c01      	lsrs	r1, r0, #16
 8000438:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800043c:	b280      	uxth	r0, r0
 800043e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000442:	463b      	mov	r3, r7
 8000444:	4638      	mov	r0, r7
 8000446:	463c      	mov	r4, r7
 8000448:	46b8      	mov	r8, r7
 800044a:	46be      	mov	lr, r7
 800044c:	2620      	movs	r6, #32
 800044e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000452:	eba2 0208 	sub.w	r2, r2, r8
 8000456:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045a:	e766      	b.n	800032a <__udivmoddi4+0xfa>
 800045c:	4601      	mov	r1, r0
 800045e:	e718      	b.n	8000292 <__udivmoddi4+0x62>
 8000460:	4610      	mov	r0, r2
 8000462:	e72c      	b.n	80002be <__udivmoddi4+0x8e>
 8000464:	f1c6 0220 	rsb	r2, r6, #32
 8000468:	fa2e f302 	lsr.w	r3, lr, r2
 800046c:	40b7      	lsls	r7, r6
 800046e:	40b1      	lsls	r1, r6
 8000470:	fa20 f202 	lsr.w	r2, r0, r2
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	430a      	orrs	r2, r1
 800047a:	fbb3 f8fe 	udiv	r8, r3, lr
 800047e:	b2bc      	uxth	r4, r7
 8000480:	fb0e 3318 	mls	r3, lr, r8, r3
 8000484:	0c11      	lsrs	r1, r2, #16
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb08 f904 	mul.w	r9, r8, r4
 800048e:	40b0      	lsls	r0, r6
 8000490:	4589      	cmp	r9, r1
 8000492:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000496:	b280      	uxth	r0, r0
 8000498:	d93e      	bls.n	8000518 <__udivmoddi4+0x2e8>
 800049a:	1879      	adds	r1, r7, r1
 800049c:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a0:	d201      	bcs.n	80004a6 <__udivmoddi4+0x276>
 80004a2:	4589      	cmp	r9, r1
 80004a4:	d81f      	bhi.n	80004e6 <__udivmoddi4+0x2b6>
 80004a6:	eba1 0109 	sub.w	r1, r1, r9
 80004aa:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ae:	fb09 f804 	mul.w	r8, r9, r4
 80004b2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004b6:	b292      	uxth	r2, r2
 80004b8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004bc:	4542      	cmp	r2, r8
 80004be:	d229      	bcs.n	8000514 <__udivmoddi4+0x2e4>
 80004c0:	18ba      	adds	r2, r7, r2
 80004c2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004c6:	d2c4      	bcs.n	8000452 <__udivmoddi4+0x222>
 80004c8:	4542      	cmp	r2, r8
 80004ca:	d2c2      	bcs.n	8000452 <__udivmoddi4+0x222>
 80004cc:	f1a9 0102 	sub.w	r1, r9, #2
 80004d0:	443a      	add	r2, r7
 80004d2:	e7be      	b.n	8000452 <__udivmoddi4+0x222>
 80004d4:	45f0      	cmp	r8, lr
 80004d6:	d29d      	bcs.n	8000414 <__udivmoddi4+0x1e4>
 80004d8:	ebbe 0302 	subs.w	r3, lr, r2
 80004dc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e0:	3801      	subs	r0, #1
 80004e2:	46e1      	mov	r9, ip
 80004e4:	e796      	b.n	8000414 <__udivmoddi4+0x1e4>
 80004e6:	eba7 0909 	sub.w	r9, r7, r9
 80004ea:	4449      	add	r1, r9
 80004ec:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f4:	fb09 f804 	mul.w	r8, r9, r4
 80004f8:	e7db      	b.n	80004b2 <__udivmoddi4+0x282>
 80004fa:	4673      	mov	r3, lr
 80004fc:	e77f      	b.n	80003fe <__udivmoddi4+0x1ce>
 80004fe:	4650      	mov	r0, sl
 8000500:	e766      	b.n	80003d0 <__udivmoddi4+0x1a0>
 8000502:	4608      	mov	r0, r1
 8000504:	e6fd      	b.n	8000302 <__udivmoddi4+0xd2>
 8000506:	443b      	add	r3, r7
 8000508:	3a02      	subs	r2, #2
 800050a:	e733      	b.n	8000374 <__udivmoddi4+0x144>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	443b      	add	r3, r7
 8000512:	e71c      	b.n	800034e <__udivmoddi4+0x11e>
 8000514:	4649      	mov	r1, r9
 8000516:	e79c      	b.n	8000452 <__udivmoddi4+0x222>
 8000518:	eba1 0109 	sub.w	r1, r1, r9
 800051c:	46c4      	mov	ip, r8
 800051e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000522:	fb09 f804 	mul.w	r8, r9, r4
 8000526:	e7c4      	b.n	80004b2 <__udivmoddi4+0x282>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800052c:	b480      	push	{r7}
 800052e:	b085      	sub	sp, #20
 8000530:	af00      	add	r7, sp, #0
 8000532:	60f8      	str	r0, [r7, #12]
 8000534:	60b9      	str	r1, [r7, #8]
 8000536:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	4a07      	ldr	r2, [pc, #28]	@ (8000558 <vApplicationGetIdleTaskMemory+0x2c>)
 800053c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800053e:	68bb      	ldr	r3, [r7, #8]
 8000540:	4a06      	ldr	r2, [pc, #24]	@ (800055c <vApplicationGetIdleTaskMemory+0x30>)
 8000542:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2280      	movs	r2, #128	@ 0x80
 8000548:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800054a:	bf00      	nop
 800054c:	3714      	adds	r7, #20
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	2000002c 	.word	0x2000002c
 800055c:	20000080 	.word	0x20000080

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b5b0      	push	{r4, r5, r7, lr}
 8000562:	b096      	sub	sp, #88	@ 0x58
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000566:	f000 fcdd 	bl	8000f24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056a:	f000 f84f 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056e:	f000 f95d 	bl	800082c <MX_GPIO_Init>
  MX_ETH_Init();
 8000572:	f000 f8b5 	bl	80006e0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000576:	f000 f901 	bl	800077c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800057a:	f000 f929 	bl	80007d0 <MX_USB_OTG_FS_PCD_Init>

  /* Create the thread(s) */
  /* definition and creation of defaultTask */

  /* definition and creation of task01 */
  osThreadDef(task01, Task01_init, osPriorityNormal, 0, 128);
 800057e:	4b1d      	ldr	r3, [pc, #116]	@ (80005f4 <main+0x94>)
 8000580:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000584:	461d      	mov	r5, r3
 8000586:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000588:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800058a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800058e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task01Handle = osThreadCreate(osThread(task01), NULL);
 8000592:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000596:	2100      	movs	r1, #0
 8000598:	4618      	mov	r0, r3
 800059a:	f003 fac6 	bl	8003b2a <osThreadCreate>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a15      	ldr	r2, [pc, #84]	@ (80005f8 <main+0x98>)
 80005a2:	6013      	str	r3, [r2, #0]

  osThreadDef(task02, Task02_init, osPriorityNormal, 0, 128);
 80005a4:	4b15      	ldr	r3, [pc, #84]	@ (80005fc <main+0x9c>)
 80005a6:	f107 0420 	add.w	r4, r7, #32
 80005aa:	461d      	mov	r5, r3
 80005ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task02Handle = osThreadCreate(osThread(task02), NULL);
 80005b8:	f107 0320 	add.w	r3, r7, #32
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f003 fab3 	bl	8003b2a <osThreadCreate>
 80005c4:	4603      	mov	r3, r0
 80005c6:	4a0e      	ldr	r2, [pc, #56]	@ (8000600 <main+0xa0>)
 80005c8:	6013      	str	r3, [r2, #0]

  osThreadDef(task03, Task03_init, osPriorityNormal, 0, 128);
 80005ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000604 <main+0xa4>)
 80005cc:	1d3c      	adds	r4, r7, #4
 80005ce:	461d      	mov	r5, r3
 80005d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task03Handle = osThreadCreate(osThread(task03), NULL);
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	2100      	movs	r1, #0
 80005e0:	4618      	mov	r0, r3
 80005e2:	f003 faa2 	bl	8003b2a <osThreadCreate>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a07      	ldr	r2, [pc, #28]	@ (8000608 <main+0xa8>)
 80005ea:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005ec:	f003 fa96 	bl	8003b1c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f0:	bf00      	nop
 80005f2:	e7fd      	b.n	80005f0 <main+0x90>
 80005f4:	0800501c 	.word	0x0800501c
 80005f8:	200009d4 	.word	0x200009d4
 80005fc:	08005040 	.word	0x08005040
 8000600:	200009d8 	.word	0x200009d8
 8000604:	08005064 	.word	0x08005064
 8000608:	200009dc 	.word	0x200009dc

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b094      	sub	sp, #80	@ 0x50
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0320 	add.w	r3, r7, #32
 8000616:	2230      	movs	r2, #48	@ 0x30
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f004 fcc2 	bl	8004fa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000630:	2300      	movs	r3, #0
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	4b28      	ldr	r3, [pc, #160]	@ (80006d8 <SystemClock_Config+0xcc>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000638:	4a27      	ldr	r2, [pc, #156]	@ (80006d8 <SystemClock_Config+0xcc>)
 800063a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800063e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000640:	4b25      	ldr	r3, [pc, #148]	@ (80006d8 <SystemClock_Config+0xcc>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000644:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	4b22      	ldr	r3, [pc, #136]	@ (80006dc <SystemClock_Config+0xd0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a21      	ldr	r2, [pc, #132]	@ (80006dc <SystemClock_Config+0xd0>)
 8000656:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	4b1f      	ldr	r3, [pc, #124]	@ (80006dc <SystemClock_Config+0xd0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000668:	2301      	movs	r3, #1
 800066a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800066c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000670:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000672:	2302      	movs	r3, #2
 8000674:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000676:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800067a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800067c:	2304      	movs	r3, #4
 800067e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000680:	23a8      	movs	r3, #168	@ 0xa8
 8000682:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000684:	2302      	movs	r3, #2
 8000686:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000688:	2307      	movs	r3, #7
 800068a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068c:	f107 0320 	add.w	r3, r7, #32
 8000690:	4618      	mov	r0, r3
 8000692:	f001 fbb3 	bl	8001dfc <HAL_RCC_OscConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800069c:	f000 f9d2 	bl	8000a44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a0:	230f      	movs	r3, #15
 80006a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a4:	2302      	movs	r3, #2
 80006a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ac:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2105      	movs	r1, #5
 80006be:	4618      	mov	r0, r3
 80006c0:	f001 fe14 	bl	80022ec <HAL_RCC_ClockConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ca:	f000 f9bb 	bl	8000a44 <Error_Handler>
  }
}
 80006ce:	bf00      	nop
 80006d0:	3750      	adds	r7, #80	@ 0x50
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000764 <MX_ETH_Init+0x84>)
 80006e6:	4a20      	ldr	r2, [pc, #128]	@ (8000768 <MX_ETH_Init+0x88>)
 80006e8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006ea:	4b20      	ldr	r3, [pc, #128]	@ (800076c <MX_ETH_Init+0x8c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006f0:	4b1e      	ldr	r3, [pc, #120]	@ (800076c <MX_ETH_Init+0x8c>)
 80006f2:	2280      	movs	r2, #128	@ 0x80
 80006f4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006f6:	4b1d      	ldr	r3, [pc, #116]	@ (800076c <MX_ETH_Init+0x8c>)
 80006f8:	22e1      	movs	r2, #225	@ 0xe1
 80006fa:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006fc:	4b1b      	ldr	r3, [pc, #108]	@ (800076c <MX_ETH_Init+0x8c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000702:	4b1a      	ldr	r3, [pc, #104]	@ (800076c <MX_ETH_Init+0x8c>)
 8000704:	2200      	movs	r2, #0
 8000706:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000708:	4b18      	ldr	r3, [pc, #96]	@ (800076c <MX_ETH_Init+0x8c>)
 800070a:	2200      	movs	r2, #0
 800070c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800070e:	4b15      	ldr	r3, [pc, #84]	@ (8000764 <MX_ETH_Init+0x84>)
 8000710:	4a16      	ldr	r2, [pc, #88]	@ (800076c <MX_ETH_Init+0x8c>)
 8000712:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000714:	4b13      	ldr	r3, [pc, #76]	@ (8000764 <MX_ETH_Init+0x84>)
 8000716:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800071a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800071c:	4b11      	ldr	r3, [pc, #68]	@ (8000764 <MX_ETH_Init+0x84>)
 800071e:	4a14      	ldr	r2, [pc, #80]	@ (8000770 <MX_ETH_Init+0x90>)
 8000720:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000722:	4b10      	ldr	r3, [pc, #64]	@ (8000764 <MX_ETH_Init+0x84>)
 8000724:	4a13      	ldr	r2, [pc, #76]	@ (8000774 <MX_ETH_Init+0x94>)
 8000726:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000728:	4b0e      	ldr	r3, [pc, #56]	@ (8000764 <MX_ETH_Init+0x84>)
 800072a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800072e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000730:	480c      	ldr	r0, [pc, #48]	@ (8000764 <MX_ETH_Init+0x84>)
 8000732:	f000 fd3f 	bl	80011b4 <HAL_ETH_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800073c:	f000 f982 	bl	8000a44 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000740:	2238      	movs	r2, #56	@ 0x38
 8000742:	2100      	movs	r1, #0
 8000744:	480c      	ldr	r0, [pc, #48]	@ (8000778 <MX_ETH_Init+0x98>)
 8000746:	f004 fc2d 	bl	8004fa4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800074a:	4b0b      	ldr	r3, [pc, #44]	@ (8000778 <MX_ETH_Init+0x98>)
 800074c:	2221      	movs	r2, #33	@ 0x21
 800074e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000750:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <MX_ETH_Init+0x98>)
 8000752:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000756:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000758:	4b07      	ldr	r3, [pc, #28]	@ (8000778 <MX_ETH_Init+0x98>)
 800075a:	2200      	movs	r2, #0
 800075c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	200003f8 	.word	0x200003f8
 8000768:	40028000 	.word	0x40028000
 800076c:	200009e0 	.word	0x200009e0
 8000770:	20000358 	.word	0x20000358
 8000774:	200002b8 	.word	0x200002b8
 8000778:	20000280 	.word	0x20000280

0800077c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000780:	4b11      	ldr	r3, [pc, #68]	@ (80007c8 <MX_USART3_UART_Init+0x4c>)
 8000782:	4a12      	ldr	r2, [pc, #72]	@ (80007cc <MX_USART3_UART_Init+0x50>)
 8000784:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000786:	4b10      	ldr	r3, [pc, #64]	@ (80007c8 <MX_USART3_UART_Init+0x4c>)
 8000788:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800078c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800078e:	4b0e      	ldr	r3, [pc, #56]	@ (80007c8 <MX_USART3_UART_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000794:	4b0c      	ldr	r3, [pc, #48]	@ (80007c8 <MX_USART3_UART_Init+0x4c>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800079a:	4b0b      	ldr	r3, [pc, #44]	@ (80007c8 <MX_USART3_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007a0:	4b09      	ldr	r3, [pc, #36]	@ (80007c8 <MX_USART3_UART_Init+0x4c>)
 80007a2:	220c      	movs	r2, #12
 80007a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a6:	4b08      	ldr	r3, [pc, #32]	@ (80007c8 <MX_USART3_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ac:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <MX_USART3_UART_Init+0x4c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007b2:	4805      	ldr	r0, [pc, #20]	@ (80007c8 <MX_USART3_UART_Init+0x4c>)
 80007b4:	f002 fa88 	bl	8002cc8 <HAL_UART_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007be:	f000 f941 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	200004a8 	.word	0x200004a8
 80007cc:	40004800 	.word	0x40004800

080007d0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007d4:	4b14      	ldr	r3, [pc, #80]	@ (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80007da:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80007dc:	4b12      	ldr	r3, [pc, #72]	@ (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007de:	2204      	movs	r2, #4
 80007e0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007e2:	4b11      	ldr	r3, [pc, #68]	@ (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e4:	2202      	movs	r2, #2
 80007e6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f0:	2202      	movs	r2, #2
 80007f2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000800:	4b09      	ldr	r3, [pc, #36]	@ (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000802:	2200      	movs	r2, #0
 8000804:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000806:	4b08      	ldr	r3, [pc, #32]	@ (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000808:	2201      	movs	r2, #1
 800080a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800080c:	4b06      	ldr	r3, [pc, #24]	@ (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800080e:	2200      	movs	r2, #0
 8000810:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	@ (8000828 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000814:	f001 f9e3 	bl	8001bde <HAL_PCD_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800081e:	f000 f911 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	200004f0 	.word	0x200004f0

0800082c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08c      	sub	sp, #48	@ 0x30
 8000830:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	61bb      	str	r3, [r7, #24]
 8000846:	4b4c      	ldr	r3, [pc, #304]	@ (8000978 <MX_GPIO_Init+0x14c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a4b      	ldr	r2, [pc, #300]	@ (8000978 <MX_GPIO_Init+0x14c>)
 800084c:	f043 0304 	orr.w	r3, r3, #4
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b49      	ldr	r3, [pc, #292]	@ (8000978 <MX_GPIO_Init+0x14c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f003 0304 	and.w	r3, r3, #4
 800085a:	61bb      	str	r3, [r7, #24]
 800085c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]
 8000862:	4b45      	ldr	r3, [pc, #276]	@ (8000978 <MX_GPIO_Init+0x14c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a44      	ldr	r2, [pc, #272]	@ (8000978 <MX_GPIO_Init+0x14c>)
 8000868:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b42      	ldr	r3, [pc, #264]	@ (8000978 <MX_GPIO_Init+0x14c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000876:	617b      	str	r3, [r7, #20]
 8000878:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]
 800087e:	4b3e      	ldr	r3, [pc, #248]	@ (8000978 <MX_GPIO_Init+0x14c>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	4a3d      	ldr	r2, [pc, #244]	@ (8000978 <MX_GPIO_Init+0x14c>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	6313      	str	r3, [r2, #48]	@ 0x30
 800088a:	4b3b      	ldr	r3, [pc, #236]	@ (8000978 <MX_GPIO_Init+0x14c>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	4b37      	ldr	r3, [pc, #220]	@ (8000978 <MX_GPIO_Init+0x14c>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	4a36      	ldr	r2, [pc, #216]	@ (8000978 <MX_GPIO_Init+0x14c>)
 80008a0:	f043 0302 	orr.w	r3, r3, #2
 80008a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a6:	4b34      	ldr	r3, [pc, #208]	@ (8000978 <MX_GPIO_Init+0x14c>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	f003 0302 	and.w	r3, r3, #2
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	4b30      	ldr	r3, [pc, #192]	@ (8000978 <MX_GPIO_Init+0x14c>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	4a2f      	ldr	r2, [pc, #188]	@ (8000978 <MX_GPIO_Init+0x14c>)
 80008bc:	f043 0308 	orr.w	r3, r3, #8
 80008c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c2:	4b2d      	ldr	r3, [pc, #180]	@ (8000978 <MX_GPIO_Init+0x14c>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	f003 0308 	and.w	r3, r3, #8
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	4b29      	ldr	r3, [pc, #164]	@ (8000978 <MX_GPIO_Init+0x14c>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	4a28      	ldr	r2, [pc, #160]	@ (8000978 <MX_GPIO_Init+0x14c>)
 80008d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008de:	4b26      	ldr	r3, [pc, #152]	@ (8000978 <MX_GPIO_Init+0x14c>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	f244 0181 	movw	r1, #16513	@ 0x4081
 80008f0:	4822      	ldr	r0, [pc, #136]	@ (800097c <MX_GPIO_Init+0x150>)
 80008f2:	f001 f95b 	bl	8001bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2140      	movs	r1, #64	@ 0x40
 80008fa:	4821      	ldr	r0, [pc, #132]	@ (8000980 <MX_GPIO_Init+0x154>)
 80008fc:	f001 f956 	bl	8001bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000900:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000906:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800090a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4619      	mov	r1, r3
 8000916:	481b      	ldr	r0, [pc, #108]	@ (8000984 <MX_GPIO_Init+0x158>)
 8000918:	f000 ff9c 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800091c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000922:	2301      	movs	r3, #1
 8000924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	4811      	ldr	r0, [pc, #68]	@ (800097c <MX_GPIO_Init+0x150>)
 8000936:	f000 ff8d 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800093a:	2340      	movs	r3, #64	@ 0x40
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093e:	2301      	movs	r3, #1
 8000940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	4619      	mov	r1, r3
 8000950:	480b      	ldr	r0, [pc, #44]	@ (8000980 <MX_GPIO_Init+0x154>)
 8000952:	f000 ff7f 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000956:	2380      	movs	r3, #128	@ 0x80
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095a:	2300      	movs	r3, #0
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000962:	f107 031c 	add.w	r3, r7, #28
 8000966:	4619      	mov	r1, r3
 8000968:	4805      	ldr	r0, [pc, #20]	@ (8000980 <MX_GPIO_Init+0x154>)
 800096a:	f000 ff73 	bl	8001854 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800096e:	bf00      	nop
 8000970:	3730      	adds	r7, #48	@ 0x30
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40023800 	.word	0x40023800
 800097c:	40020400 	.word	0x40020400
 8000980:	40021800 	.word	0x40021800
 8000984:	40020800 	.word	0x40020800

08000988 <print_uart>:

/* USER CODE BEGIN 4 */

void print_uart(const char *str)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  if (str != NULL && huart3.Instance != NULL)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d00e      	beq.n	80009b4 <print_uart+0x2c>
 8000996:	4b09      	ldr	r3, [pc, #36]	@ (80009bc <print_uart+0x34>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d00a      	beq.n	80009b4 <print_uart+0x2c>
  {
    HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	f7ff fc26 	bl	80001f0 <strlen>
 80009a4:	4603      	mov	r3, r0
 80009a6:	b29a      	uxth	r2, r3
 80009a8:	f04f 33ff 	mov.w	r3, #4294967295
 80009ac:	6879      	ldr	r1, [r7, #4]
 80009ae:	4803      	ldr	r0, [pc, #12]	@ (80009bc <print_uart+0x34>)
 80009b0:	f002 f9da 	bl	8002d68 <HAL_UART_Transmit>
  }
}
 80009b4:	bf00      	nop
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	200004a8 	.word	0x200004a8

080009c0 <Task01_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task01_init */
void Task01_init(void const * argument)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task01_init */
  /* Infinite loop */
  for(;;)
  {
    print_uart("Task 01 is running\r\n");
 80009c8:	4804      	ldr	r0, [pc, #16]	@ (80009dc <Task01_init+0x1c>)
 80009ca:	f7ff ffdd 	bl	8000988 <print_uart>
    osDelay(1000);
 80009ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009d2:	f003 f8f6 	bl	8003bc2 <osDelay>
    print_uart("Task 01 is running\r\n");
 80009d6:	bf00      	nop
 80009d8:	e7f6      	b.n	80009c8 <Task01_init+0x8>
 80009da:	bf00      	nop
 80009dc:	08005080 	.word	0x08005080

080009e0 <Task02_init>:
  /* USER CODE END Task01_init */
}

/* USER CODE END Header_Task02_init */
void Task02_init(void const * argument)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task01_init */
  /* Infinite loop */
  for(;;){
    print_uart("Task 02 is running\r\n");
 80009e8:	4804      	ldr	r0, [pc, #16]	@ (80009fc <Task02_init+0x1c>)
 80009ea:	f7ff ffcd 	bl	8000988 <print_uart>
    osDelay(1000);
 80009ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009f2:	f003 f8e6 	bl	8003bc2 <osDelay>
    print_uart("Task 02 is running\r\n");
 80009f6:	bf00      	nop
 80009f8:	e7f6      	b.n	80009e8 <Task02_init+0x8>
 80009fa:	bf00      	nop
 80009fc:	08005098 	.word	0x08005098

08000a00 <Task03_init>:
/* USER CODE END Task01_init */


/* USER CODE END Header_Task01_init */
void Task03_init(void const * argument)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task01_init */
  /* Infinite loop */
  for(;;){
    print_uart("Task 03 is running\r\n");
 8000a08:	4804      	ldr	r0, [pc, #16]	@ (8000a1c <Task03_init+0x1c>)
 8000a0a:	f7ff ffbd 	bl	8000988 <print_uart>
    osDelay(1000);
 8000a0e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a12:	f003 f8d6 	bl	8003bc2 <osDelay>
    print_uart("Task 03 is running\r\n");
 8000a16:	bf00      	nop
 8000a18:	e7f6      	b.n	8000a08 <Task03_init+0x8>
 8000a1a:	bf00      	nop
 8000a1c:	080050b0 	.word	0x080050b0

08000a20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a04      	ldr	r2, [pc, #16]	@ (8000a40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d101      	bne.n	8000a36 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a32:	f000 fa99 	bl	8000f68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40010000 	.word	0x40010000

08000a44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a48:	b672      	cpsid	i
}
 8000a4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <Error_Handler+0x8>

08000a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	4b12      	ldr	r3, [pc, #72]	@ (8000aa4 <HAL_MspInit+0x54>)
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a5e:	4a11      	ldr	r2, [pc, #68]	@ (8000aa4 <HAL_MspInit+0x54>)
 8000a60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a64:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a66:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa4 <HAL_MspInit+0x54>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	603b      	str	r3, [r7, #0]
 8000a76:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa4 <HAL_MspInit+0x54>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa4 <HAL_MspInit+0x54>)
 8000a7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a80:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a82:	4b08      	ldr	r3, [pc, #32]	@ (8000aa4 <HAL_MspInit+0x54>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	210f      	movs	r1, #15
 8000a92:	f06f 0001 	mvn.w	r0, #1
 8000a96:	f000 fb63 	bl	8001160 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40023800 	.word	0x40023800

08000aa8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08e      	sub	sp, #56	@ 0x38
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a55      	ldr	r2, [pc, #340]	@ (8000c1c <HAL_ETH_MspInit+0x174>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	f040 80a4 	bne.w	8000c14 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000acc:	2300      	movs	r3, #0
 8000ace:	623b      	str	r3, [r7, #32]
 8000ad0:	4b53      	ldr	r3, [pc, #332]	@ (8000c20 <HAL_ETH_MspInit+0x178>)
 8000ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad4:	4a52      	ldr	r2, [pc, #328]	@ (8000c20 <HAL_ETH_MspInit+0x178>)
 8000ad6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ada:	6313      	str	r3, [r2, #48]	@ 0x30
 8000adc:	4b50      	ldr	r3, [pc, #320]	@ (8000c20 <HAL_ETH_MspInit+0x178>)
 8000ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ae4:	623b      	str	r3, [r7, #32]
 8000ae6:	6a3b      	ldr	r3, [r7, #32]
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61fb      	str	r3, [r7, #28]
 8000aec:	4b4c      	ldr	r3, [pc, #304]	@ (8000c20 <HAL_ETH_MspInit+0x178>)
 8000aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af0:	4a4b      	ldr	r2, [pc, #300]	@ (8000c20 <HAL_ETH_MspInit+0x178>)
 8000af2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000af6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af8:	4b49      	ldr	r3, [pc, #292]	@ (8000c20 <HAL_ETH_MspInit+0x178>)
 8000afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000b00:	61fb      	str	r3, [r7, #28]
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	2300      	movs	r3, #0
 8000b06:	61bb      	str	r3, [r7, #24]
 8000b08:	4b45      	ldr	r3, [pc, #276]	@ (8000c20 <HAL_ETH_MspInit+0x178>)
 8000b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0c:	4a44      	ldr	r2, [pc, #272]	@ (8000c20 <HAL_ETH_MspInit+0x178>)
 8000b0e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000b12:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b14:	4b42      	ldr	r3, [pc, #264]	@ (8000c20 <HAL_ETH_MspInit+0x178>)
 8000b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000b1c:	61bb      	str	r3, [r7, #24]
 8000b1e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]
 8000b24:	4b3e      	ldr	r3, [pc, #248]	@ (8000c20 <HAL_ETH_MspInit+0x178>)
 8000b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b28:	4a3d      	ldr	r2, [pc, #244]	@ (8000c20 <HAL_ETH_MspInit+0x178>)
 8000b2a:	f043 0304 	orr.w	r3, r3, #4
 8000b2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b30:	4b3b      	ldr	r3, [pc, #236]	@ (8000c20 <HAL_ETH_MspInit+0x178>)
 8000b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b34:	f003 0304 	and.w	r3, r3, #4
 8000b38:	617b      	str	r3, [r7, #20]
 8000b3a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	4b37      	ldr	r3, [pc, #220]	@ (8000c20 <HAL_ETH_MspInit+0x178>)
 8000b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b44:	4a36      	ldr	r2, [pc, #216]	@ (8000c20 <HAL_ETH_MspInit+0x178>)
 8000b46:	f043 0301 	orr.w	r3, r3, #1
 8000b4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4c:	4b34      	ldr	r3, [pc, #208]	@ (8000c20 <HAL_ETH_MspInit+0x178>)
 8000b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b50:	f003 0301 	and.w	r3, r3, #1
 8000b54:	613b      	str	r3, [r7, #16]
 8000b56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	4b30      	ldr	r3, [pc, #192]	@ (8000c20 <HAL_ETH_MspInit+0x178>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b60:	4a2f      	ldr	r2, [pc, #188]	@ (8000c20 <HAL_ETH_MspInit+0x178>)
 8000b62:	f043 0302 	orr.w	r3, r3, #2
 8000b66:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b68:	4b2d      	ldr	r3, [pc, #180]	@ (8000c20 <HAL_ETH_MspInit+0x178>)
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6c:	f003 0302 	and.w	r3, r3, #2
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b74:	2300      	movs	r3, #0
 8000b76:	60bb      	str	r3, [r7, #8]
 8000b78:	4b29      	ldr	r3, [pc, #164]	@ (8000c20 <HAL_ETH_MspInit+0x178>)
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7c:	4a28      	ldr	r2, [pc, #160]	@ (8000c20 <HAL_ETH_MspInit+0x178>)
 8000b7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b82:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b84:	4b26      	ldr	r3, [pc, #152]	@ (8000c20 <HAL_ETH_MspInit+0x178>)
 8000b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b8c:	60bb      	str	r3, [r7, #8]
 8000b8e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b90:	2332      	movs	r3, #50	@ 0x32
 8000b92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b94:	2302      	movs	r3, #2
 8000b96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ba0:	230b      	movs	r3, #11
 8000ba2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba8:	4619      	mov	r1, r3
 8000baa:	481e      	ldr	r0, [pc, #120]	@ (8000c24 <HAL_ETH_MspInit+0x17c>)
 8000bac:	f000 fe52 	bl	8001854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000bb0:	2386      	movs	r3, #134	@ 0x86
 8000bb2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bc0:	230b      	movs	r3, #11
 8000bc2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4817      	ldr	r0, [pc, #92]	@ (8000c28 <HAL_ETH_MspInit+0x180>)
 8000bcc:	f000 fe42 	bl	8001854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bd0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bd4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bde:	2303      	movs	r3, #3
 8000be0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000be2:	230b      	movs	r3, #11
 8000be4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000be6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bea:	4619      	mov	r1, r3
 8000bec:	480f      	ldr	r0, [pc, #60]	@ (8000c2c <HAL_ETH_MspInit+0x184>)
 8000bee:	f000 fe31 	bl	8001854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000bf2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000bf6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c00:	2303      	movs	r3, #3
 8000c02:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c04:	230b      	movs	r3, #11
 8000c06:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4808      	ldr	r0, [pc, #32]	@ (8000c30 <HAL_ETH_MspInit+0x188>)
 8000c10:	f000 fe20 	bl	8001854 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000c14:	bf00      	nop
 8000c16:	3738      	adds	r7, #56	@ 0x38
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40028000 	.word	0x40028000
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40020800 	.word	0x40020800
 8000c28:	40020000 	.word	0x40020000
 8000c2c:	40020400 	.word	0x40020400
 8000c30:	40021800 	.word	0x40021800

08000c34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08a      	sub	sp, #40	@ 0x28
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a19      	ldr	r2, [pc, #100]	@ (8000cb8 <HAL_UART_MspInit+0x84>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d12c      	bne.n	8000cb0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	4b18      	ldr	r3, [pc, #96]	@ (8000cbc <HAL_UART_MspInit+0x88>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5e:	4a17      	ldr	r2, [pc, #92]	@ (8000cbc <HAL_UART_MspInit+0x88>)
 8000c60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c64:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c66:	4b15      	ldr	r3, [pc, #84]	@ (8000cbc <HAL_UART_MspInit+0x88>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	4b11      	ldr	r3, [pc, #68]	@ (8000cbc <HAL_UART_MspInit+0x88>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7a:	4a10      	ldr	r2, [pc, #64]	@ (8000cbc <HAL_UART_MspInit+0x88>)
 8000c7c:	f043 0308 	orr.w	r3, r3, #8
 8000c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c82:	4b0e      	ldr	r3, [pc, #56]	@ (8000cbc <HAL_UART_MspInit+0x88>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	f003 0308 	and.w	r3, r3, #8
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c8e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c94:	2302      	movs	r3, #2
 8000c96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ca0:	2307      	movs	r3, #7
 8000ca2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4805      	ldr	r0, [pc, #20]	@ (8000cc0 <HAL_UART_MspInit+0x8c>)
 8000cac:	f000 fdd2 	bl	8001854 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000cb0:	bf00      	nop
 8000cb2:	3728      	adds	r7, #40	@ 0x28
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40004800 	.word	0x40004800
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40020c00 	.word	0x40020c00

08000cc4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08a      	sub	sp, #40	@ 0x28
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000ce4:	d13f      	bne.n	8000d66 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	4b21      	ldr	r3, [pc, #132]	@ (8000d70 <HAL_PCD_MspInit+0xac>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cee:	4a20      	ldr	r2, [pc, #128]	@ (8000d70 <HAL_PCD_MspInit+0xac>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf6:	4b1e      	ldr	r3, [pc, #120]	@ (8000d70 <HAL_PCD_MspInit+0xac>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	613b      	str	r3, [r7, #16]
 8000d00:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d02:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d10:	2303      	movs	r3, #3
 8000d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d14:	230a      	movs	r3, #10
 8000d16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4815      	ldr	r0, [pc, #84]	@ (8000d74 <HAL_PCD_MspInit+0xb0>)
 8000d20:	f000 fd98 	bl	8001854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	4619      	mov	r1, r3
 8000d38:	480e      	ldr	r0, [pc, #56]	@ (8000d74 <HAL_PCD_MspInit+0xb0>)
 8000d3a:	f000 fd8b 	bl	8001854 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d70 <HAL_PCD_MspInit+0xac>)
 8000d40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d42:	4a0b      	ldr	r2, [pc, #44]	@ (8000d70 <HAL_PCD_MspInit+0xac>)
 8000d44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d48:	6353      	str	r3, [r2, #52]	@ 0x34
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	4b08      	ldr	r3, [pc, #32]	@ (8000d70 <HAL_PCD_MspInit+0xac>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d52:	4a07      	ldr	r2, [pc, #28]	@ (8000d70 <HAL_PCD_MspInit+0xac>)
 8000d54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d58:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d5a:	4b05      	ldr	r3, [pc, #20]	@ (8000d70 <HAL_PCD_MspInit+0xac>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000d66:	bf00      	nop
 8000d68:	3728      	adds	r7, #40	@ 0x28
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40020000 	.word	0x40020000

08000d78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08c      	sub	sp, #48	@ 0x30
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000d80:	2300      	movs	r3, #0
 8000d82:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000d84:	2300      	movs	r3, #0
 8000d86:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	4b2f      	ldr	r3, [pc, #188]	@ (8000e4c <HAL_InitTick+0xd4>)
 8000d8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d90:	4a2e      	ldr	r2, [pc, #184]	@ (8000e4c <HAL_InitTick+0xd4>)
 8000d92:	f043 0301 	orr.w	r3, r3, #1
 8000d96:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d98:	4b2c      	ldr	r3, [pc, #176]	@ (8000e4c <HAL_InitTick+0xd4>)
 8000d9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d9c:	f003 0301 	and.w	r3, r3, #1
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000da4:	f107 020c 	add.w	r2, r7, #12
 8000da8:	f107 0310 	add.w	r3, r7, #16
 8000dac:	4611      	mov	r1, r2
 8000dae:	4618      	mov	r0, r3
 8000db0:	f001 fcbc 	bl	800272c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000db4:	f001 fca6 	bl	8002704 <HAL_RCC_GetPCLK2Freq>
 8000db8:	4603      	mov	r3, r0
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dc0:	4a23      	ldr	r2, [pc, #140]	@ (8000e50 <HAL_InitTick+0xd8>)
 8000dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc6:	0c9b      	lsrs	r3, r3, #18
 8000dc8:	3b01      	subs	r3, #1
 8000dca:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000dcc:	4b21      	ldr	r3, [pc, #132]	@ (8000e54 <HAL_InitTick+0xdc>)
 8000dce:	4a22      	ldr	r2, [pc, #136]	@ (8000e58 <HAL_InitTick+0xe0>)
 8000dd0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000dd2:	4b20      	ldr	r3, [pc, #128]	@ (8000e54 <HAL_InitTick+0xdc>)
 8000dd4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000dd8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000dda:	4a1e      	ldr	r2, [pc, #120]	@ (8000e54 <HAL_InitTick+0xdc>)
 8000ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dde:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000de0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e54 <HAL_InitTick+0xdc>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de6:	4b1b      	ldr	r3, [pc, #108]	@ (8000e54 <HAL_InitTick+0xdc>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dec:	4b19      	ldr	r3, [pc, #100]	@ (8000e54 <HAL_InitTick+0xdc>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000df2:	4818      	ldr	r0, [pc, #96]	@ (8000e54 <HAL_InitTick+0xdc>)
 8000df4:	f001 fccc 	bl	8002790 <HAL_TIM_Base_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000dfe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d11b      	bne.n	8000e3e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000e06:	4813      	ldr	r0, [pc, #76]	@ (8000e54 <HAL_InitTick+0xdc>)
 8000e08:	f001 fd1c 	bl	8002844 <HAL_TIM_Base_Start_IT>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000e12:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d111      	bne.n	8000e3e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000e1a:	2019      	movs	r0, #25
 8000e1c:	f000 f9bc 	bl	8001198 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2b0f      	cmp	r3, #15
 8000e24:	d808      	bhi.n	8000e38 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000e26:	2200      	movs	r2, #0
 8000e28:	6879      	ldr	r1, [r7, #4]
 8000e2a:	2019      	movs	r0, #25
 8000e2c:	f000 f998 	bl	8001160 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e30:	4a0a      	ldr	r2, [pc, #40]	@ (8000e5c <HAL_InitTick+0xe4>)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6013      	str	r3, [r2, #0]
 8000e36:	e002      	b.n	8000e3e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000e3e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3730      	adds	r7, #48	@ 0x30
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	431bde83 	.word	0x431bde83
 8000e54:	200009e8 	.word	0x200009e8
 8000e58:	40010000 	.word	0x40010000
 8000e5c:	20000004 	.word	0x20000004

08000e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e64:	bf00      	nop
 8000e66:	e7fd      	b.n	8000e64 <NMI_Handler+0x4>

08000e68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <HardFault_Handler+0x4>

08000e70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <MemManage_Handler+0x4>

08000e78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <BusFault_Handler+0x4>

08000e80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e84:	bf00      	nop
 8000e86:	e7fd      	b.n	8000e84 <UsageFault_Handler+0x4>

08000e88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
	...

08000e98 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e9c:	4802      	ldr	r0, [pc, #8]	@ (8000ea8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e9e:	f001 fd41 	bl	8002924 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	200009e8 	.word	0x200009e8

08000eac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ecc <SystemInit+0x20>)
 8000eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000eb6:	4a05      	ldr	r2, [pc, #20]	@ (8000ecc <SystemInit+0x20>)
 8000eb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ebc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000ed0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f08 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ed4:	f7ff ffea 	bl	8000eac <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ed8:	480c      	ldr	r0, [pc, #48]	@ (8000f0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000eda:	490d      	ldr	r1, [pc, #52]	@ (8000f10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000edc:	4a0d      	ldr	r2, [pc, #52]	@ (8000f14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ede:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee0:	e002      	b.n	8000ee8 <LoopCopyDataInit>

08000ee2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ee2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ee6:	3304      	adds	r3, #4

08000ee8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eec:	d3f9      	bcc.n	8000ee2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eee:	4a0a      	ldr	r2, [pc, #40]	@ (8000f18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ef0:	4c0a      	ldr	r4, [pc, #40]	@ (8000f1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ef2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef4:	e001      	b.n	8000efa <LoopFillZerobss>

08000ef6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ef6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef8:	3204      	adds	r2, #4

08000efa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000efa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000efc:	d3fb      	bcc.n	8000ef6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000efe:	f004 f859 	bl	8004fb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f02:	f7ff fb2d 	bl	8000560 <main>
  bx  lr    
 8000f06:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f08:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000f0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f10:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f14:	080050f8 	.word	0x080050f8
  ldr r2, =_sbss
 8000f18:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000f1c:	20004788 	.word	0x20004788

08000f20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f20:	e7fe      	b.n	8000f20 <ADC_IRQHandler>
	...

08000f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f28:	4b0e      	ldr	r3, [pc, #56]	@ (8000f64 <HAL_Init+0x40>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f64 <HAL_Init+0x40>)
 8000f2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f34:	4b0b      	ldr	r3, [pc, #44]	@ (8000f64 <HAL_Init+0x40>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a0a      	ldr	r2, [pc, #40]	@ (8000f64 <HAL_Init+0x40>)
 8000f3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f40:	4b08      	ldr	r3, [pc, #32]	@ (8000f64 <HAL_Init+0x40>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a07      	ldr	r2, [pc, #28]	@ (8000f64 <HAL_Init+0x40>)
 8000f46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f4c:	2003      	movs	r0, #3
 8000f4e:	f000 f8fc 	bl	800114a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f52:	200f      	movs	r0, #15
 8000f54:	f7ff ff10 	bl	8000d78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f58:	f7ff fd7a 	bl	8000a50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40023c00 	.word	0x40023c00

08000f68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	@ (8000f88 <HAL_IncTick+0x20>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <HAL_IncTick+0x24>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4413      	add	r3, r2
 8000f78:	4a04      	ldr	r2, [pc, #16]	@ (8000f8c <HAL_IncTick+0x24>)
 8000f7a:	6013      	str	r3, [r2, #0]
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	20000008 	.word	0x20000008
 8000f8c:	20000a30 	.word	0x20000a30

08000f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return uwTick;
 8000f94:	4b03      	ldr	r3, [pc, #12]	@ (8000fa4 <HAL_GetTick+0x14>)
 8000f96:	681b      	ldr	r3, [r3, #0]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	20000a30 	.word	0x20000a30

08000fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb0:	f7ff ffee 	bl	8000f90 <HAL_GetTick>
 8000fb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc0:	d005      	beq.n	8000fce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000fec <HAL_Delay+0x44>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4413      	add	r3, r2
 8000fcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fce:	bf00      	nop
 8000fd0:	f7ff ffde 	bl	8000f90 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	68fa      	ldr	r2, [r7, #12]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d8f7      	bhi.n	8000fd0 <HAL_Delay+0x28>
  {
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000008 	.word	0x20000008

08000ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001000:	4b0c      	ldr	r3, [pc, #48]	@ (8001034 <__NVIC_SetPriorityGrouping+0x44>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001006:	68ba      	ldr	r2, [r7, #8]
 8001008:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800100c:	4013      	ands	r3, r2
 800100e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001018:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800101c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001022:	4a04      	ldr	r2, [pc, #16]	@ (8001034 <__NVIC_SetPriorityGrouping+0x44>)
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	60d3      	str	r3, [r2, #12]
}
 8001028:	bf00      	nop
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800103c:	4b04      	ldr	r3, [pc, #16]	@ (8001050 <__NVIC_GetPriorityGrouping+0x18>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	0a1b      	lsrs	r3, r3, #8
 8001042:	f003 0307 	and.w	r3, r3, #7
}
 8001046:	4618      	mov	r0, r3
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	2b00      	cmp	r3, #0
 8001064:	db0b      	blt.n	800107e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	f003 021f 	and.w	r2, r3, #31
 800106c:	4907      	ldr	r1, [pc, #28]	@ (800108c <__NVIC_EnableIRQ+0x38>)
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	095b      	lsrs	r3, r3, #5
 8001074:	2001      	movs	r0, #1
 8001076:	fa00 f202 	lsl.w	r2, r0, r2
 800107a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	e000e100 	.word	0xe000e100

08001090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	6039      	str	r1, [r7, #0]
 800109a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800109c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	db0a      	blt.n	80010ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	490c      	ldr	r1, [pc, #48]	@ (80010dc <__NVIC_SetPriority+0x4c>)
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	0112      	lsls	r2, r2, #4
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	440b      	add	r3, r1
 80010b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b8:	e00a      	b.n	80010d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	4908      	ldr	r1, [pc, #32]	@ (80010e0 <__NVIC_SetPriority+0x50>)
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	f003 030f 	and.w	r3, r3, #15
 80010c6:	3b04      	subs	r3, #4
 80010c8:	0112      	lsls	r2, r2, #4
 80010ca:	b2d2      	uxtb	r2, r2
 80010cc:	440b      	add	r3, r1
 80010ce:	761a      	strb	r2, [r3, #24]
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000e100 	.word	0xe000e100
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b089      	sub	sp, #36	@ 0x24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	f1c3 0307 	rsb	r3, r3, #7
 80010fe:	2b04      	cmp	r3, #4
 8001100:	bf28      	it	cs
 8001102:	2304      	movcs	r3, #4
 8001104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3304      	adds	r3, #4
 800110a:	2b06      	cmp	r3, #6
 800110c:	d902      	bls.n	8001114 <NVIC_EncodePriority+0x30>
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3b03      	subs	r3, #3
 8001112:	e000      	b.n	8001116 <NVIC_EncodePriority+0x32>
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	f04f 32ff 	mov.w	r2, #4294967295
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43da      	mvns	r2, r3
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	401a      	ands	r2, r3
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800112c:	f04f 31ff 	mov.w	r1, #4294967295
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	fa01 f303 	lsl.w	r3, r1, r3
 8001136:	43d9      	mvns	r1, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800113c:	4313      	orrs	r3, r2
         );
}
 800113e:	4618      	mov	r0, r3
 8001140:	3724      	adds	r7, #36	@ 0x24
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff ff4c 	bl	8000ff0 <__NVIC_SetPriorityGrouping>
}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
 800116c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001172:	f7ff ff61 	bl	8001038 <__NVIC_GetPriorityGrouping>
 8001176:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	68b9      	ldr	r1, [r7, #8]
 800117c:	6978      	ldr	r0, [r7, #20]
 800117e:	f7ff ffb1 	bl	80010e4 <NVIC_EncodePriority>
 8001182:	4602      	mov	r2, r0
 8001184:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001188:	4611      	mov	r1, r2
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff ff80 	bl	8001090 <__NVIC_SetPriority>
}
 8001190:	bf00      	nop
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff ff54 	bl	8001054 <__NVIC_EnableIRQ>
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d101      	bne.n	80011c6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e08a      	b.n	80012dc <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d106      	bne.n	80011de <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2220      	movs	r2, #32
 80011d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff fc65 	bl	8000aa8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60bb      	str	r3, [r7, #8]
 80011e2:	4b40      	ldr	r3, [pc, #256]	@ (80012e4 <HAL_ETH_Init+0x130>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e6:	4a3f      	ldr	r2, [pc, #252]	@ (80012e4 <HAL_ETH_Init+0x130>)
 80011e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80011ee:	4b3d      	ldr	r3, [pc, #244]	@ (80012e4 <HAL_ETH_Init+0x130>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011f6:	60bb      	str	r3, [r7, #8]
 80011f8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80011fa:	4b3b      	ldr	r3, [pc, #236]	@ (80012e8 <HAL_ETH_Init+0x134>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	4a3a      	ldr	r2, [pc, #232]	@ (80012e8 <HAL_ETH_Init+0x134>)
 8001200:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001204:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001206:	4b38      	ldr	r3, [pc, #224]	@ (80012e8 <HAL_ETH_Init+0x134>)
 8001208:	685a      	ldr	r2, [r3, #4]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	4936      	ldr	r1, [pc, #216]	@ (80012e8 <HAL_ETH_Init+0x134>)
 8001210:	4313      	orrs	r3, r2
 8001212:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001214:	4b34      	ldr	r3, [pc, #208]	@ (80012e8 <HAL_ETH_Init+0x134>)
 8001216:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	6812      	ldr	r2, [r2, #0]
 8001226:	f043 0301 	orr.w	r3, r3, #1
 800122a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800122e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001230:	f7ff feae 	bl	8000f90 <HAL_GetTick>
 8001234:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001236:	e011      	b.n	800125c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001238:	f7ff feaa 	bl	8000f90 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001246:	d909      	bls.n	800125c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2204      	movs	r2, #4
 800124c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	22e0      	movs	r2, #224	@ 0xe0
 8001254:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e03f      	b.n	80012dc <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1e4      	bne.n	8001238 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f000 f97a 	bl	8001568 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f000 fa25 	bl	80016c4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f000 fa7b 	bl	8001776 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	461a      	mov	r2, r3
 8001286:	2100      	movs	r1, #0
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f000 f9e3 	bl	8001654 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 800129c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	6812      	ldr	r2, [r2, #0]
 80012aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012ae:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80012b2:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80012c6:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2210      	movs	r2, #16
 80012d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80012da:	2300      	movs	r3, #0
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40013800 	.word	0x40013800

080012ec <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	4b53      	ldr	r3, [pc, #332]	@ (8001450 <ETH_SetMACConfig+0x164>)
 8001302:	4013      	ands	r3, r2
 8001304:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	7b9b      	ldrb	r3, [r3, #14]
 800130a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800130c:	683a      	ldr	r2, [r7, #0]
 800130e:	7c12      	ldrb	r2, [r2, #16]
 8001310:	2a00      	cmp	r2, #0
 8001312:	d102      	bne.n	800131a <ETH_SetMACConfig+0x2e>
 8001314:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001318:	e000      	b.n	800131c <ETH_SetMACConfig+0x30>
 800131a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800131c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800131e:	683a      	ldr	r2, [r7, #0]
 8001320:	7c52      	ldrb	r2, [r2, #17]
 8001322:	2a00      	cmp	r2, #0
 8001324:	d102      	bne.n	800132c <ETH_SetMACConfig+0x40>
 8001326:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800132a:	e000      	b.n	800132e <ETH_SetMACConfig+0x42>
 800132c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800132e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001334:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	7fdb      	ldrb	r3, [r3, #31]
 800133a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800133c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001342:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	7f92      	ldrb	r2, [r2, #30]
 8001348:	2a00      	cmp	r2, #0
 800134a:	d102      	bne.n	8001352 <ETH_SetMACConfig+0x66>
 800134c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001350:	e000      	b.n	8001354 <ETH_SetMACConfig+0x68>
 8001352:	2200      	movs	r2, #0
                        macconf->Speed |
 8001354:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	7f1b      	ldrb	r3, [r3, #28]
 800135a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800135c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001362:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	791b      	ldrb	r3, [r3, #4]
 8001368:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800136a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001372:	2a00      	cmp	r2, #0
 8001374:	d102      	bne.n	800137c <ETH_SetMACConfig+0x90>
 8001376:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800137a:	e000      	b.n	800137e <ETH_SetMACConfig+0x92>
 800137c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800137e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	7bdb      	ldrb	r3, [r3, #15]
 8001384:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001386:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800138c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001394:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001396:	4313      	orrs	r3, r2
 8001398:	68fa      	ldr	r2, [r7, #12]
 800139a:	4313      	orrs	r3, r2
 800139c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	68fa      	ldr	r2, [r7, #12]
 80013a4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80013ae:	2001      	movs	r0, #1
 80013b0:	f7ff fdfa 	bl	8000fa8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	68fa      	ldr	r2, [r7, #12]
 80013ba:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80013c4:	68fa      	ldr	r2, [r7, #12]
 80013c6:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80013ca:	4013      	ands	r3, r2
 80013cc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013d2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80013d4:	683a      	ldr	r2, [r7, #0]
 80013d6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80013da:	2a00      	cmp	r2, #0
 80013dc:	d101      	bne.n	80013e2 <ETH_SetMACConfig+0xf6>
 80013de:	2280      	movs	r2, #128	@ 0x80
 80013e0:	e000      	b.n	80013e4 <ETH_SetMACConfig+0xf8>
 80013e2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80013e4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80013ea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80013ec:	683a      	ldr	r2, [r7, #0]
 80013ee:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80013f2:	2a01      	cmp	r2, #1
 80013f4:	d101      	bne.n	80013fa <ETH_SetMACConfig+0x10e>
 80013f6:	2208      	movs	r2, #8
 80013f8:	e000      	b.n	80013fc <ETH_SetMACConfig+0x110>
 80013fa:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80013fc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80013fe:	683a      	ldr	r2, [r7, #0]
 8001400:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001404:	2a01      	cmp	r2, #1
 8001406:	d101      	bne.n	800140c <ETH_SetMACConfig+0x120>
 8001408:	2204      	movs	r2, #4
 800140a:	e000      	b.n	800140e <ETH_SetMACConfig+0x122>
 800140c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800140e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001416:	2a01      	cmp	r2, #1
 8001418:	d101      	bne.n	800141e <ETH_SetMACConfig+0x132>
 800141a:	2202      	movs	r2, #2
 800141c:	e000      	b.n	8001420 <ETH_SetMACConfig+0x134>
 800141e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001420:	4313      	orrs	r3, r2
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	4313      	orrs	r3, r2
 8001426:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	68fa      	ldr	r2, [r7, #12]
 800142e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001438:	2001      	movs	r0, #1
 800143a:	f7ff fdb5 	bl	8000fa8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	68fa      	ldr	r2, [r7, #12]
 8001444:	619a      	str	r2, [r3, #24]
}
 8001446:	bf00      	nop
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	fd20810f 	.word	0xfd20810f

08001454 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	4b3d      	ldr	r3, [pc, #244]	@ (8001564 <ETH_SetDMAConfig+0x110>)
 800146e:	4013      	ands	r3, r2
 8001470:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	7b1b      	ldrb	r3, [r3, #12]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d102      	bne.n	8001480 <ETH_SetDMAConfig+0x2c>
 800147a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800147e:	e000      	b.n	8001482 <ETH_SetDMAConfig+0x2e>
 8001480:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	7b5b      	ldrb	r3, [r3, #13]
 8001486:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001488:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800148a:	683a      	ldr	r2, [r7, #0]
 800148c:	7f52      	ldrb	r2, [r2, #29]
 800148e:	2a00      	cmp	r2, #0
 8001490:	d102      	bne.n	8001498 <ETH_SetDMAConfig+0x44>
 8001492:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001496:	e000      	b.n	800149a <ETH_SetDMAConfig+0x46>
 8001498:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800149a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	7b9b      	ldrb	r3, [r3, #14]
 80014a0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80014a2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80014a8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	7f1b      	ldrb	r3, [r3, #28]
 80014ae:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80014b0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	7f9b      	ldrb	r3, [r3, #30]
 80014b6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80014b8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80014be:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80014c6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80014c8:	4313      	orrs	r3, r2
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014d8:	461a      	mov	r2, r3
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014ea:	2001      	movs	r0, #1
 80014ec:	f7ff fd5c 	bl	8000fa8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014f8:	461a      	mov	r2, r3
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	791b      	ldrb	r3, [r3, #4]
 8001502:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001508:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800150e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001514:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800151c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800151e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001524:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001526:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800152c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	6812      	ldr	r2, [r2, #0]
 8001532:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001536:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800153a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001548:	2001      	movs	r0, #1
 800154a:	f7ff fd2d 	bl	8000fa8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001556:	461a      	mov	r2, r3
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	6013      	str	r3, [r2, #0]
}
 800155c:	bf00      	nop
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	f8de3f23 	.word	0xf8de3f23

08001568 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b0a6      	sub	sp, #152	@ 0x98
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001570:	2301      	movs	r3, #1
 8001572:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001576:	2301      	movs	r3, #1
 8001578:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800157c:	2300      	movs	r3, #0
 800157e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001580:	2300      	movs	r3, #0
 8001582:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001586:	2301      	movs	r3, #1
 8001588:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800158c:	2300      	movs	r3, #0
 800158e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001592:	2301      	movs	r3, #1
 8001594:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8001598:	2301      	movs	r3, #1
 800159a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80015a4:	2300      	movs	r3, #0
 80015a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80015aa:	2300      	movs	r3, #0
 80015ac:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80015ae:	2300      	movs	r3, #0
 80015b0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80015b4:	2300      	movs	r3, #0
 80015b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80015be:	2300      	movs	r3, #0
 80015c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80015d0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80015d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80015d6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80015da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80015dc:	2300      	movs	r3, #0
 80015de:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80015e2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80015e6:	4619      	mov	r1, r3
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7ff fe7f 	bl	80012ec <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80015ee:	2301      	movs	r3, #1
 80015f0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80015f2:	2301      	movs	r3, #1
 80015f4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80015f6:	2301      	movs	r3, #1
 80015f8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80015fc:	2301      	movs	r3, #1
 80015fe:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001600:	2300      	movs	r3, #0
 8001602:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001604:	2300      	movs	r3, #0
 8001606:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800160a:	2300      	movs	r3, #0
 800160c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001610:	2300      	movs	r3, #0
 8001612:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001614:	2301      	movs	r3, #1
 8001616:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800161a:	2301      	movs	r3, #1
 800161c:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800161e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001622:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001624:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001628:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800162a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800162e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001630:	2301      	movs	r3, #1
 8001632:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001636:	2300      	movs	r3, #0
 8001638:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800163a:	2300      	movs	r3, #0
 800163c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800163e:	f107 0308 	add.w	r3, r7, #8
 8001642:	4619      	mov	r1, r3
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f7ff ff05 	bl	8001454 <ETH_SetDMAConfig>
}
 800164a:	bf00      	nop
 800164c:	3798      	adds	r7, #152	@ 0x98
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001654:	b480      	push	{r7}
 8001656:	b087      	sub	sp, #28
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3305      	adds	r3, #5
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	021b      	lsls	r3, r3, #8
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	3204      	adds	r2, #4
 800166c:	7812      	ldrb	r2, [r2, #0]
 800166e:	4313      	orrs	r3, r2
 8001670:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001672:	68ba      	ldr	r2, [r7, #8]
 8001674:	4b11      	ldr	r3, [pc, #68]	@ (80016bc <ETH_MACAddressConfig+0x68>)
 8001676:	4413      	add	r3, r2
 8001678:	461a      	mov	r2, r3
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	3303      	adds	r3, #3
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	061a      	lsls	r2, r3, #24
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3302      	adds	r3, #2
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	041b      	lsls	r3, r3, #16
 800168e:	431a      	orrs	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3301      	adds	r3, #1
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	021b      	lsls	r3, r3, #8
 8001698:	4313      	orrs	r3, r2
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	7812      	ldrb	r2, [r2, #0]
 800169e:	4313      	orrs	r3, r2
 80016a0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80016a2:	68ba      	ldr	r2, [r7, #8]
 80016a4:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <ETH_MACAddressConfig+0x6c>)
 80016a6:	4413      	add	r3, r2
 80016a8:	461a      	mov	r2, r3
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	6013      	str	r3, [r2, #0]
}
 80016ae:	bf00      	nop
 80016b0:	371c      	adds	r7, #28
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	40028040 	.word	0x40028040
 80016c0:	40028044 	.word	0x40028044

080016c4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	e03e      	b.n	8001750 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	68d9      	ldr	r1, [r3, #12]
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	4613      	mov	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	4413      	add	r3, r2
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	440b      	add	r3, r1
 80016e2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	2200      	movs	r2, #0
 80016ee:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	2200      	movs	r2, #0
 80016fa:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80016fc:	68b9      	ldr	r1, [r7, #8]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	3206      	adds	r2, #6
 8001704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2b02      	cmp	r3, #2
 8001718:	d80c      	bhi.n	8001734 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	68d9      	ldr	r1, [r3, #12]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	1c5a      	adds	r2, r3, #1
 8001722:	4613      	mov	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	440b      	add	r3, r1
 800172c:	461a      	mov	r2, r3
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	e004      	b.n	800173e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	461a      	mov	r2, r3
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	3301      	adds	r3, #1
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2b03      	cmp	r3, #3
 8001754:	d9bd      	bls.n	80016d2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	68da      	ldr	r2, [r3, #12]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001768:	611a      	str	r2, [r3, #16]
}
 800176a:	bf00      	nop
 800176c:	3714      	adds	r7, #20
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001776:	b480      	push	{r7}
 8001778:	b085      	sub	sp, #20
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800177e:	2300      	movs	r3, #0
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	e048      	b.n	8001816 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6919      	ldr	r1, [r3, #16]
 8001788:	68fa      	ldr	r2, [r7, #12]
 800178a:	4613      	mov	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	440b      	add	r3, r1
 8001794:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	2200      	movs	r2, #0
 80017a0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	2200      	movs	r2, #0
 80017a6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	2200      	movs	r2, #0
 80017ac:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	2200      	movs	r2, #0
 80017b2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	2200      	movs	r2, #0
 80017b8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80017c0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	695b      	ldr	r3, [r3, #20]
 80017c6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80017da:	68b9      	ldr	r1, [r7, #8]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	3212      	adds	r2, #18
 80017e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d80c      	bhi.n	8001806 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6919      	ldr	r1, [r3, #16]
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	1c5a      	adds	r2, r3, #1
 80017f4:	4613      	mov	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4413      	add	r3, r2
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	440b      	add	r3, r1
 80017fe:	461a      	mov	r2, r3
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	60da      	str	r2, [r3, #12]
 8001804:	e004      	b.n	8001810 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	691b      	ldr	r3, [r3, #16]
 800180a:	461a      	mov	r2, r3
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	3301      	adds	r3, #1
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2b03      	cmp	r3, #3
 800181a:	d9b3      	bls.n	8001784 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	691a      	ldr	r2, [r3, #16]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001846:	60da      	str	r2, [r3, #12]
}
 8001848:	bf00      	nop
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001854:	b480      	push	{r7}
 8001856:	b089      	sub	sp, #36	@ 0x24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800185e:	2300      	movs	r3, #0
 8001860:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001866:	2300      	movs	r3, #0
 8001868:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800186a:	2300      	movs	r3, #0
 800186c:	61fb      	str	r3, [r7, #28]
 800186e:	e177      	b.n	8001b60 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001870:	2201      	movs	r2, #1
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	4013      	ands	r3, r2
 8001882:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	429a      	cmp	r2, r3
 800188a:	f040 8166 	bne.w	8001b5a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f003 0303 	and.w	r3, r3, #3
 8001896:	2b01      	cmp	r3, #1
 8001898:	d005      	beq.n	80018a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d130      	bne.n	8001908 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	2203      	movs	r2, #3
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43db      	mvns	r3, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4013      	ands	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	68da      	ldr	r2, [r3, #12]
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018dc:	2201      	movs	r2, #1
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4013      	ands	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	091b      	lsrs	r3, r3, #4
 80018f2:	f003 0201 	and.w	r2, r3, #1
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4313      	orrs	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f003 0303 	and.w	r3, r3, #3
 8001910:	2b03      	cmp	r3, #3
 8001912:	d017      	beq.n	8001944 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	2203      	movs	r2, #3
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4013      	ands	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	689a      	ldr	r2, [r3, #8]
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	4313      	orrs	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f003 0303 	and.w	r3, r3, #3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d123      	bne.n	8001998 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	08da      	lsrs	r2, r3, #3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3208      	adds	r2, #8
 8001958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800195c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	f003 0307 	and.w	r3, r3, #7
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	220f      	movs	r2, #15
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4013      	ands	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	691a      	ldr	r2, [r3, #16]
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4313      	orrs	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	08da      	lsrs	r2, r3, #3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	3208      	adds	r2, #8
 8001992:	69b9      	ldr	r1, [r7, #24]
 8001994:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	2203      	movs	r2, #3
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4013      	ands	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f003 0203 	and.w	r2, r3, #3
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f000 80c0 	beq.w	8001b5a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	4b66      	ldr	r3, [pc, #408]	@ (8001b78 <HAL_GPIO_Init+0x324>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e2:	4a65      	ldr	r2, [pc, #404]	@ (8001b78 <HAL_GPIO_Init+0x324>)
 80019e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80019ea:	4b63      	ldr	r3, [pc, #396]	@ (8001b78 <HAL_GPIO_Init+0x324>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019f6:	4a61      	ldr	r2, [pc, #388]	@ (8001b7c <HAL_GPIO_Init+0x328>)
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	089b      	lsrs	r3, r3, #2
 80019fc:	3302      	adds	r3, #2
 80019fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	f003 0303 	and.w	r3, r3, #3
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	220f      	movs	r2, #15
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43db      	mvns	r3, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4013      	ands	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a58      	ldr	r2, [pc, #352]	@ (8001b80 <HAL_GPIO_Init+0x32c>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d037      	beq.n	8001a92 <HAL_GPIO_Init+0x23e>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a57      	ldr	r2, [pc, #348]	@ (8001b84 <HAL_GPIO_Init+0x330>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d031      	beq.n	8001a8e <HAL_GPIO_Init+0x23a>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a56      	ldr	r2, [pc, #344]	@ (8001b88 <HAL_GPIO_Init+0x334>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d02b      	beq.n	8001a8a <HAL_GPIO_Init+0x236>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a55      	ldr	r2, [pc, #340]	@ (8001b8c <HAL_GPIO_Init+0x338>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d025      	beq.n	8001a86 <HAL_GPIO_Init+0x232>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a54      	ldr	r2, [pc, #336]	@ (8001b90 <HAL_GPIO_Init+0x33c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d01f      	beq.n	8001a82 <HAL_GPIO_Init+0x22e>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a53      	ldr	r2, [pc, #332]	@ (8001b94 <HAL_GPIO_Init+0x340>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d019      	beq.n	8001a7e <HAL_GPIO_Init+0x22a>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a52      	ldr	r2, [pc, #328]	@ (8001b98 <HAL_GPIO_Init+0x344>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d013      	beq.n	8001a7a <HAL_GPIO_Init+0x226>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a51      	ldr	r2, [pc, #324]	@ (8001b9c <HAL_GPIO_Init+0x348>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d00d      	beq.n	8001a76 <HAL_GPIO_Init+0x222>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a50      	ldr	r2, [pc, #320]	@ (8001ba0 <HAL_GPIO_Init+0x34c>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d007      	beq.n	8001a72 <HAL_GPIO_Init+0x21e>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a4f      	ldr	r2, [pc, #316]	@ (8001ba4 <HAL_GPIO_Init+0x350>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d101      	bne.n	8001a6e <HAL_GPIO_Init+0x21a>
 8001a6a:	2309      	movs	r3, #9
 8001a6c:	e012      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a6e:	230a      	movs	r3, #10
 8001a70:	e010      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a72:	2308      	movs	r3, #8
 8001a74:	e00e      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a76:	2307      	movs	r3, #7
 8001a78:	e00c      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a7a:	2306      	movs	r3, #6
 8001a7c:	e00a      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a7e:	2305      	movs	r3, #5
 8001a80:	e008      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a82:	2304      	movs	r3, #4
 8001a84:	e006      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a86:	2303      	movs	r3, #3
 8001a88:	e004      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	e002      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e000      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a92:	2300      	movs	r3, #0
 8001a94:	69fa      	ldr	r2, [r7, #28]
 8001a96:	f002 0203 	and.w	r2, r2, #3
 8001a9a:	0092      	lsls	r2, r2, #2
 8001a9c:	4093      	lsls	r3, r2
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001aa4:	4935      	ldr	r1, [pc, #212]	@ (8001b7c <HAL_GPIO_Init+0x328>)
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	089b      	lsrs	r3, r3, #2
 8001aaa:	3302      	adds	r3, #2
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ab2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ba8 <HAL_GPIO_Init+0x354>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	43db      	mvns	r3, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ad6:	4a34      	ldr	r2, [pc, #208]	@ (8001ba8 <HAL_GPIO_Init+0x354>)
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001adc:	4b32      	ldr	r3, [pc, #200]	@ (8001ba8 <HAL_GPIO_Init+0x354>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b00:	4a29      	ldr	r2, [pc, #164]	@ (8001ba8 <HAL_GPIO_Init+0x354>)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b06:	4b28      	ldr	r3, [pc, #160]	@ (8001ba8 <HAL_GPIO_Init+0x354>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4013      	ands	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b2a:	4a1f      	ldr	r2, [pc, #124]	@ (8001ba8 <HAL_GPIO_Init+0x354>)
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b30:	4b1d      	ldr	r3, [pc, #116]	@ (8001ba8 <HAL_GPIO_Init+0x354>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b54:	4a14      	ldr	r2, [pc, #80]	@ (8001ba8 <HAL_GPIO_Init+0x354>)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	61fb      	str	r3, [r7, #28]
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	2b0f      	cmp	r3, #15
 8001b64:	f67f ae84 	bls.w	8001870 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b68:	bf00      	nop
 8001b6a:	bf00      	nop
 8001b6c:	3724      	adds	r7, #36	@ 0x24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40013800 	.word	0x40013800
 8001b80:	40020000 	.word	0x40020000
 8001b84:	40020400 	.word	0x40020400
 8001b88:	40020800 	.word	0x40020800
 8001b8c:	40020c00 	.word	0x40020c00
 8001b90:	40021000 	.word	0x40021000
 8001b94:	40021400 	.word	0x40021400
 8001b98:	40021800 	.word	0x40021800
 8001b9c:	40021c00 	.word	0x40021c00
 8001ba0:	40022000 	.word	0x40022000
 8001ba4:	40022400 	.word	0x40022400
 8001ba8:	40013c00 	.word	0x40013c00

08001bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	807b      	strh	r3, [r7, #2]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bbc:	787b      	ldrb	r3, [r7, #1]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bc2:	887a      	ldrh	r2, [r7, #2]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bc8:	e003      	b.n	8001bd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bca:	887b      	ldrh	r3, [r7, #2]
 8001bcc:	041a      	lsls	r2, r3, #16
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	619a      	str	r2, [r3, #24]
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b086      	sub	sp, #24
 8001be2:	af02      	add	r7, sp, #8
 8001be4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d101      	bne.n	8001bf0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e101      	b.n	8001df4 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d106      	bne.n	8001c10 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f7ff f85a 	bl	8000cc4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2203      	movs	r2, #3
 8001c14:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c1e:	d102      	bne.n	8001c26 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f001 fcbc 	bl	80035a8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6818      	ldr	r0, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	7c1a      	ldrb	r2, [r3, #16]
 8001c38:	f88d 2000 	strb.w	r2, [sp]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c40:	f001 fc4e 	bl	80034e0 <USB_CoreInit>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d005      	beq.n	8001c56 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2202      	movs	r2, #2
 8001c4e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e0ce      	b.n	8001df4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f001 fcb4 	bl	80035ca <USB_SetCurrentMode>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d005      	beq.n	8001c74 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e0bf      	b.n	8001df4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c74:	2300      	movs	r3, #0
 8001c76:	73fb      	strb	r3, [r7, #15]
 8001c78:	e04a      	b.n	8001d10 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c7a:	7bfa      	ldrb	r2, [r7, #15]
 8001c7c:	6879      	ldr	r1, [r7, #4]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	4413      	add	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	440b      	add	r3, r1
 8001c88:	3315      	adds	r3, #21
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c8e:	7bfa      	ldrb	r2, [r7, #15]
 8001c90:	6879      	ldr	r1, [r7, #4]
 8001c92:	4613      	mov	r3, r2
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	4413      	add	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	440b      	add	r3, r1
 8001c9c:	3314      	adds	r3, #20
 8001c9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ca0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ca2:	7bfa      	ldrb	r2, [r7, #15]
 8001ca4:	7bfb      	ldrb	r3, [r7, #15]
 8001ca6:	b298      	uxth	r0, r3
 8001ca8:	6879      	ldr	r1, [r7, #4]
 8001caa:	4613      	mov	r3, r2
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	4413      	add	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	440b      	add	r3, r1
 8001cb4:	332e      	adds	r3, #46	@ 0x2e
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cba:	7bfa      	ldrb	r2, [r7, #15]
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	4413      	add	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	3318      	adds	r3, #24
 8001cca:	2200      	movs	r2, #0
 8001ccc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001cce:	7bfa      	ldrb	r2, [r7, #15]
 8001cd0:	6879      	ldr	r1, [r7, #4]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	4413      	add	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	440b      	add	r3, r1
 8001cdc:	331c      	adds	r3, #28
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ce2:	7bfa      	ldrb	r2, [r7, #15]
 8001ce4:	6879      	ldr	r1, [r7, #4]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	4413      	add	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	440b      	add	r3, r1
 8001cf0:	3320      	adds	r3, #32
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001cf6:	7bfa      	ldrb	r2, [r7, #15]
 8001cf8:	6879      	ldr	r1, [r7, #4]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	4413      	add	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	440b      	add	r3, r1
 8001d04:	3324      	adds	r3, #36	@ 0x24
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d0a:	7bfb      	ldrb	r3, [r7, #15]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	73fb      	strb	r3, [r7, #15]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	791b      	ldrb	r3, [r3, #4]
 8001d14:	7bfa      	ldrb	r2, [r7, #15]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d3af      	bcc.n	8001c7a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	73fb      	strb	r3, [r7, #15]
 8001d1e:	e044      	b.n	8001daa <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d20:	7bfa      	ldrb	r2, [r7, #15]
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	4613      	mov	r3, r2
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	4413      	add	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001d32:	2200      	movs	r2, #0
 8001d34:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d36:	7bfa      	ldrb	r2, [r7, #15]
 8001d38:	6879      	ldr	r1, [r7, #4]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	4413      	add	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	440b      	add	r3, r1
 8001d44:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001d48:	7bfa      	ldrb	r2, [r7, #15]
 8001d4a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d4c:	7bfa      	ldrb	r2, [r7, #15]
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	4613      	mov	r3, r2
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	4413      	add	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	440b      	add	r3, r1
 8001d5a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001d5e:	2200      	movs	r2, #0
 8001d60:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d62:	7bfa      	ldrb	r2, [r7, #15]
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	4613      	mov	r3, r2
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	440b      	add	r3, r1
 8001d70:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d78:	7bfa      	ldrb	r2, [r7, #15]
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	4413      	add	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	440b      	add	r3, r1
 8001d86:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d8e:	7bfa      	ldrb	r2, [r7, #15]
 8001d90:	6879      	ldr	r1, [r7, #4]
 8001d92:	4613      	mov	r3, r2
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	4413      	add	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	440b      	add	r3, r1
 8001d9c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001da4:	7bfb      	ldrb	r3, [r7, #15]
 8001da6:	3301      	adds	r3, #1
 8001da8:	73fb      	strb	r3, [r7, #15]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	791b      	ldrb	r3, [r3, #4]
 8001dae:	7bfa      	ldrb	r2, [r7, #15]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d3b5      	bcc.n	8001d20 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6818      	ldr	r0, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	7c1a      	ldrb	r2, [r3, #16]
 8001dbc:	f88d 2000 	strb.w	r2, [sp]
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dc4:	f001 fc4e 	bl	8003664 <USB_DevInit>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d005      	beq.n	8001dda <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e00c      	b.n	8001df4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f001 fe16 	bl	8003a1e <USB_DevDisconnect>

  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e267      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d075      	beq.n	8001f06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001e1a:	4b88      	ldr	r3, [pc, #544]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 030c 	and.w	r3, r3, #12
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	d00c      	beq.n	8001e40 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e26:	4b85      	ldr	r3, [pc, #532]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001e2e:	2b08      	cmp	r3, #8
 8001e30:	d112      	bne.n	8001e58 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e32:	4b82      	ldr	r3, [pc, #520]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e3e:	d10b      	bne.n	8001e58 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e40:	4b7e      	ldr	r3, [pc, #504]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d05b      	beq.n	8001f04 <HAL_RCC_OscConfig+0x108>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d157      	bne.n	8001f04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e242      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e60:	d106      	bne.n	8001e70 <HAL_RCC_OscConfig+0x74>
 8001e62:	4b76      	ldr	r3, [pc, #472]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a75      	ldr	r2, [pc, #468]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001e68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	e01d      	b.n	8001eac <HAL_RCC_OscConfig+0xb0>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e78:	d10c      	bne.n	8001e94 <HAL_RCC_OscConfig+0x98>
 8001e7a:	4b70      	ldr	r3, [pc, #448]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a6f      	ldr	r2, [pc, #444]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001e80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e84:	6013      	str	r3, [r2, #0]
 8001e86:	4b6d      	ldr	r3, [pc, #436]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a6c      	ldr	r2, [pc, #432]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001e8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	e00b      	b.n	8001eac <HAL_RCC_OscConfig+0xb0>
 8001e94:	4b69      	ldr	r3, [pc, #420]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a68      	ldr	r2, [pc, #416]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001e9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e9e:	6013      	str	r3, [r2, #0]
 8001ea0:	4b66      	ldr	r3, [pc, #408]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a65      	ldr	r2, [pc, #404]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001ea6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001eaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d013      	beq.n	8001edc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb4:	f7ff f86c 	bl	8000f90 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ebc:	f7ff f868 	bl	8000f90 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b64      	cmp	r3, #100	@ 0x64
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e207      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ece:	4b5b      	ldr	r3, [pc, #364]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0f0      	beq.n	8001ebc <HAL_RCC_OscConfig+0xc0>
 8001eda:	e014      	b.n	8001f06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001edc:	f7ff f858 	bl	8000f90 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ee4:	f7ff f854 	bl	8000f90 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b64      	cmp	r3, #100	@ 0x64
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e1f3      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ef6:	4b51      	ldr	r3, [pc, #324]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f0      	bne.n	8001ee4 <HAL_RCC_OscConfig+0xe8>
 8001f02:	e000      	b.n	8001f06 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d063      	beq.n	8001fda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001f12:	4b4a      	ldr	r3, [pc, #296]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 030c 	and.w	r3, r3, #12
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00b      	beq.n	8001f36 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f1e:	4b47      	ldr	r3, [pc, #284]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001f26:	2b08      	cmp	r3, #8
 8001f28:	d11c      	bne.n	8001f64 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f2a:	4b44      	ldr	r3, [pc, #272]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d116      	bne.n	8001f64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f36:	4b41      	ldr	r3, [pc, #260]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d005      	beq.n	8001f4e <HAL_RCC_OscConfig+0x152>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d001      	beq.n	8001f4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e1c7      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f4e:	4b3b      	ldr	r3, [pc, #236]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	4937      	ldr	r1, [pc, #220]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f62:	e03a      	b.n	8001fda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d020      	beq.n	8001fae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f6c:	4b34      	ldr	r3, [pc, #208]	@ (8002040 <HAL_RCC_OscConfig+0x244>)
 8001f6e:	2201      	movs	r2, #1
 8001f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f72:	f7ff f80d 	bl	8000f90 <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f78:	e008      	b.n	8001f8c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f7a:	f7ff f809 	bl	8000f90 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e1a8      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f8c:	4b2b      	ldr	r3, [pc, #172]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d0f0      	beq.n	8001f7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f98:	4b28      	ldr	r3, [pc, #160]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	4925      	ldr	r1, [pc, #148]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	600b      	str	r3, [r1, #0]
 8001fac:	e015      	b.n	8001fda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fae:	4b24      	ldr	r3, [pc, #144]	@ (8002040 <HAL_RCC_OscConfig+0x244>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb4:	f7fe ffec 	bl	8000f90 <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fbc:	f7fe ffe8 	bl	8000f90 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e187      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fce:	4b1b      	ldr	r3, [pc, #108]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1f0      	bne.n	8001fbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0308 	and.w	r3, r3, #8
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d036      	beq.n	8002054 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d016      	beq.n	800201c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fee:	4b15      	ldr	r3, [pc, #84]	@ (8002044 <HAL_RCC_OscConfig+0x248>)
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff4:	f7fe ffcc 	bl	8000f90 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ffc:	f7fe ffc8 	bl	8000f90 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e167      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800200e:	4b0b      	ldr	r3, [pc, #44]	@ (800203c <HAL_RCC_OscConfig+0x240>)
 8002010:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0f0      	beq.n	8001ffc <HAL_RCC_OscConfig+0x200>
 800201a:	e01b      	b.n	8002054 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800201c:	4b09      	ldr	r3, [pc, #36]	@ (8002044 <HAL_RCC_OscConfig+0x248>)
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002022:	f7fe ffb5 	bl	8000f90 <HAL_GetTick>
 8002026:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002028:	e00e      	b.n	8002048 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800202a:	f7fe ffb1 	bl	8000f90 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d907      	bls.n	8002048 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e150      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
 800203c:	40023800 	.word	0x40023800
 8002040:	42470000 	.word	0x42470000
 8002044:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002048:	4b88      	ldr	r3, [pc, #544]	@ (800226c <HAL_RCC_OscConfig+0x470>)
 800204a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1ea      	bne.n	800202a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	f000 8097 	beq.w	8002190 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002062:	2300      	movs	r3, #0
 8002064:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002066:	4b81      	ldr	r3, [pc, #516]	@ (800226c <HAL_RCC_OscConfig+0x470>)
 8002068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d10f      	bne.n	8002092 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	60bb      	str	r3, [r7, #8]
 8002076:	4b7d      	ldr	r3, [pc, #500]	@ (800226c <HAL_RCC_OscConfig+0x470>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207a:	4a7c      	ldr	r2, [pc, #496]	@ (800226c <HAL_RCC_OscConfig+0x470>)
 800207c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002080:	6413      	str	r3, [r2, #64]	@ 0x40
 8002082:	4b7a      	ldr	r3, [pc, #488]	@ (800226c <HAL_RCC_OscConfig+0x470>)
 8002084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002086:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800208a:	60bb      	str	r3, [r7, #8]
 800208c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800208e:	2301      	movs	r3, #1
 8002090:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002092:	4b77      	ldr	r3, [pc, #476]	@ (8002270 <HAL_RCC_OscConfig+0x474>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800209a:	2b00      	cmp	r3, #0
 800209c:	d118      	bne.n	80020d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800209e:	4b74      	ldr	r3, [pc, #464]	@ (8002270 <HAL_RCC_OscConfig+0x474>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a73      	ldr	r2, [pc, #460]	@ (8002270 <HAL_RCC_OscConfig+0x474>)
 80020a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020aa:	f7fe ff71 	bl	8000f90 <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020b2:	f7fe ff6d 	bl	8000f90 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e10c      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c4:	4b6a      	ldr	r3, [pc, #424]	@ (8002270 <HAL_RCC_OscConfig+0x474>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0f0      	beq.n	80020b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d106      	bne.n	80020e6 <HAL_RCC_OscConfig+0x2ea>
 80020d8:	4b64      	ldr	r3, [pc, #400]	@ (800226c <HAL_RCC_OscConfig+0x470>)
 80020da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020dc:	4a63      	ldr	r2, [pc, #396]	@ (800226c <HAL_RCC_OscConfig+0x470>)
 80020de:	f043 0301 	orr.w	r3, r3, #1
 80020e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80020e4:	e01c      	b.n	8002120 <HAL_RCC_OscConfig+0x324>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	2b05      	cmp	r3, #5
 80020ec:	d10c      	bne.n	8002108 <HAL_RCC_OscConfig+0x30c>
 80020ee:	4b5f      	ldr	r3, [pc, #380]	@ (800226c <HAL_RCC_OscConfig+0x470>)
 80020f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020f2:	4a5e      	ldr	r2, [pc, #376]	@ (800226c <HAL_RCC_OscConfig+0x470>)
 80020f4:	f043 0304 	orr.w	r3, r3, #4
 80020f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80020fa:	4b5c      	ldr	r3, [pc, #368]	@ (800226c <HAL_RCC_OscConfig+0x470>)
 80020fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020fe:	4a5b      	ldr	r2, [pc, #364]	@ (800226c <HAL_RCC_OscConfig+0x470>)
 8002100:	f043 0301 	orr.w	r3, r3, #1
 8002104:	6713      	str	r3, [r2, #112]	@ 0x70
 8002106:	e00b      	b.n	8002120 <HAL_RCC_OscConfig+0x324>
 8002108:	4b58      	ldr	r3, [pc, #352]	@ (800226c <HAL_RCC_OscConfig+0x470>)
 800210a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800210c:	4a57      	ldr	r2, [pc, #348]	@ (800226c <HAL_RCC_OscConfig+0x470>)
 800210e:	f023 0301 	bic.w	r3, r3, #1
 8002112:	6713      	str	r3, [r2, #112]	@ 0x70
 8002114:	4b55      	ldr	r3, [pc, #340]	@ (800226c <HAL_RCC_OscConfig+0x470>)
 8002116:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002118:	4a54      	ldr	r2, [pc, #336]	@ (800226c <HAL_RCC_OscConfig+0x470>)
 800211a:	f023 0304 	bic.w	r3, r3, #4
 800211e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d015      	beq.n	8002154 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002128:	f7fe ff32 	bl	8000f90 <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800212e:	e00a      	b.n	8002146 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002130:	f7fe ff2e 	bl	8000f90 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800213e:	4293      	cmp	r3, r2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e0cb      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002146:	4b49      	ldr	r3, [pc, #292]	@ (800226c <HAL_RCC_OscConfig+0x470>)
 8002148:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0ee      	beq.n	8002130 <HAL_RCC_OscConfig+0x334>
 8002152:	e014      	b.n	800217e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002154:	f7fe ff1c 	bl	8000f90 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800215a:	e00a      	b.n	8002172 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800215c:	f7fe ff18 	bl	8000f90 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	f241 3288 	movw	r2, #5000	@ 0x1388
 800216a:	4293      	cmp	r3, r2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e0b5      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002172:	4b3e      	ldr	r3, [pc, #248]	@ (800226c <HAL_RCC_OscConfig+0x470>)
 8002174:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1ee      	bne.n	800215c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800217e:	7dfb      	ldrb	r3, [r7, #23]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d105      	bne.n	8002190 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002184:	4b39      	ldr	r3, [pc, #228]	@ (800226c <HAL_RCC_OscConfig+0x470>)
 8002186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002188:	4a38      	ldr	r2, [pc, #224]	@ (800226c <HAL_RCC_OscConfig+0x470>)
 800218a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800218e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	2b00      	cmp	r3, #0
 8002196:	f000 80a1 	beq.w	80022dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800219a:	4b34      	ldr	r3, [pc, #208]	@ (800226c <HAL_RCC_OscConfig+0x470>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 030c 	and.w	r3, r3, #12
 80021a2:	2b08      	cmp	r3, #8
 80021a4:	d05c      	beq.n	8002260 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d141      	bne.n	8002232 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ae:	4b31      	ldr	r3, [pc, #196]	@ (8002274 <HAL_RCC_OscConfig+0x478>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b4:	f7fe feec 	bl	8000f90 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021bc:	f7fe fee8 	bl	8000f90 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e087      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ce:	4b27      	ldr	r3, [pc, #156]	@ (800226c <HAL_RCC_OscConfig+0x470>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f0      	bne.n	80021bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69da      	ldr	r2, [r3, #28]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	431a      	orrs	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e8:	019b      	lsls	r3, r3, #6
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f0:	085b      	lsrs	r3, r3, #1
 80021f2:	3b01      	subs	r3, #1
 80021f4:	041b      	lsls	r3, r3, #16
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021fc:	061b      	lsls	r3, r3, #24
 80021fe:	491b      	ldr	r1, [pc, #108]	@ (800226c <HAL_RCC_OscConfig+0x470>)
 8002200:	4313      	orrs	r3, r2
 8002202:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002204:	4b1b      	ldr	r3, [pc, #108]	@ (8002274 <HAL_RCC_OscConfig+0x478>)
 8002206:	2201      	movs	r2, #1
 8002208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220a:	f7fe fec1 	bl	8000f90 <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002210:	e008      	b.n	8002224 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002212:	f7fe febd 	bl	8000f90 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e05c      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002224:	4b11      	ldr	r3, [pc, #68]	@ (800226c <HAL_RCC_OscConfig+0x470>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d0f0      	beq.n	8002212 <HAL_RCC_OscConfig+0x416>
 8002230:	e054      	b.n	80022dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002232:	4b10      	ldr	r3, [pc, #64]	@ (8002274 <HAL_RCC_OscConfig+0x478>)
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002238:	f7fe feaa 	bl	8000f90 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002240:	f7fe fea6 	bl	8000f90 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e045      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002252:	4b06      	ldr	r3, [pc, #24]	@ (800226c <HAL_RCC_OscConfig+0x470>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f0      	bne.n	8002240 <HAL_RCC_OscConfig+0x444>
 800225e:	e03d      	b.n	80022dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d107      	bne.n	8002278 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e038      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
 800226c:	40023800 	.word	0x40023800
 8002270:	40007000 	.word	0x40007000
 8002274:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002278:	4b1b      	ldr	r3, [pc, #108]	@ (80022e8 <HAL_RCC_OscConfig+0x4ec>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d028      	beq.n	80022d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002290:	429a      	cmp	r2, r3
 8002292:	d121      	bne.n	80022d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800229e:	429a      	cmp	r2, r3
 80022a0:	d11a      	bne.n	80022d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80022a8:	4013      	ands	r3, r2
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80022ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d111      	bne.n	80022d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022be:	085b      	lsrs	r3, r3, #1
 80022c0:	3b01      	subs	r3, #1
 80022c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d107      	bne.n	80022d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d001      	beq.n	80022dc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e000      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3718      	adds	r7, #24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40023800 	.word	0x40023800

080022ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e0cc      	b.n	800249a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002300:	4b68      	ldr	r3, [pc, #416]	@ (80024a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 030f 	and.w	r3, r3, #15
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d90c      	bls.n	8002328 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230e:	4b65      	ldr	r3, [pc, #404]	@ (80024a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	b2d2      	uxtb	r2, r2
 8002314:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002316:	4b63      	ldr	r3, [pc, #396]	@ (80024a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	429a      	cmp	r2, r3
 8002322:	d001      	beq.n	8002328 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e0b8      	b.n	800249a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d020      	beq.n	8002376 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b00      	cmp	r3, #0
 800233e:	d005      	beq.n	800234c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002340:	4b59      	ldr	r3, [pc, #356]	@ (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	4a58      	ldr	r2, [pc, #352]	@ (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800234a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0308 	and.w	r3, r3, #8
 8002354:	2b00      	cmp	r3, #0
 8002356:	d005      	beq.n	8002364 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002358:	4b53      	ldr	r3, [pc, #332]	@ (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	4a52      	ldr	r2, [pc, #328]	@ (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 800235e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002362:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002364:	4b50      	ldr	r3, [pc, #320]	@ (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	494d      	ldr	r1, [pc, #308]	@ (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	4313      	orrs	r3, r2
 8002374:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b00      	cmp	r3, #0
 8002380:	d044      	beq.n	800240c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d107      	bne.n	800239a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800238a:	4b47      	ldr	r3, [pc, #284]	@ (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d119      	bne.n	80023ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e07f      	b.n	800249a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d003      	beq.n	80023aa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023a6:	2b03      	cmp	r3, #3
 80023a8:	d107      	bne.n	80023ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023aa:	4b3f      	ldr	r3, [pc, #252]	@ (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d109      	bne.n	80023ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e06f      	b.n	800249a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ba:	4b3b      	ldr	r3, [pc, #236]	@ (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e067      	b.n	800249a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ca:	4b37      	ldr	r3, [pc, #220]	@ (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f023 0203 	bic.w	r2, r3, #3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	4934      	ldr	r1, [pc, #208]	@ (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023dc:	f7fe fdd8 	bl	8000f90 <HAL_GetTick>
 80023e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e2:	e00a      	b.n	80023fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e4:	f7fe fdd4 	bl	8000f90 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e04f      	b.n	800249a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fa:	4b2b      	ldr	r3, [pc, #172]	@ (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 020c 	and.w	r2, r3, #12
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	429a      	cmp	r2, r3
 800240a:	d1eb      	bne.n	80023e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800240c:	4b25      	ldr	r3, [pc, #148]	@ (80024a4 <HAL_RCC_ClockConfig+0x1b8>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 030f 	and.w	r3, r3, #15
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	429a      	cmp	r2, r3
 8002418:	d20c      	bcs.n	8002434 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241a:	4b22      	ldr	r3, [pc, #136]	@ (80024a4 <HAL_RCC_ClockConfig+0x1b8>)
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002422:	4b20      	ldr	r3, [pc, #128]	@ (80024a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	429a      	cmp	r2, r3
 800242e:	d001      	beq.n	8002434 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e032      	b.n	800249a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	d008      	beq.n	8002452 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002440:	4b19      	ldr	r3, [pc, #100]	@ (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	4916      	ldr	r1, [pc, #88]	@ (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 800244e:	4313      	orrs	r3, r2
 8002450:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0308 	and.w	r3, r3, #8
 800245a:	2b00      	cmp	r3, #0
 800245c:	d009      	beq.n	8002472 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800245e:	4b12      	ldr	r3, [pc, #72]	@ (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	490e      	ldr	r1, [pc, #56]	@ (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 800246e:	4313      	orrs	r3, r2
 8002470:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002472:	f000 f821 	bl	80024b8 <HAL_RCC_GetSysClockFreq>
 8002476:	4602      	mov	r2, r0
 8002478:	4b0b      	ldr	r3, [pc, #44]	@ (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	091b      	lsrs	r3, r3, #4
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	490a      	ldr	r1, [pc, #40]	@ (80024ac <HAL_RCC_ClockConfig+0x1c0>)
 8002484:	5ccb      	ldrb	r3, [r1, r3]
 8002486:	fa22 f303 	lsr.w	r3, r2, r3
 800248a:	4a09      	ldr	r2, [pc, #36]	@ (80024b0 <HAL_RCC_ClockConfig+0x1c4>)
 800248c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800248e:	4b09      	ldr	r3, [pc, #36]	@ (80024b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f7fe fc70 	bl	8000d78 <HAL_InitTick>

  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40023c00 	.word	0x40023c00
 80024a8:	40023800 	.word	0x40023800
 80024ac:	080050d0 	.word	0x080050d0
 80024b0:	20000000 	.word	0x20000000
 80024b4:	20000004 	.word	0x20000004

080024b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024bc:	b094      	sub	sp, #80	@ 0x50
 80024be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80024c0:	2300      	movs	r3, #0
 80024c2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80024c4:	2300      	movs	r3, #0
 80024c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80024c8:	2300      	movs	r3, #0
 80024ca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80024cc:	2300      	movs	r3, #0
 80024ce:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024d0:	4b79      	ldr	r3, [pc, #484]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f003 030c 	and.w	r3, r3, #12
 80024d8:	2b08      	cmp	r3, #8
 80024da:	d00d      	beq.n	80024f8 <HAL_RCC_GetSysClockFreq+0x40>
 80024dc:	2b08      	cmp	r3, #8
 80024de:	f200 80e1 	bhi.w	80026a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d002      	beq.n	80024ec <HAL_RCC_GetSysClockFreq+0x34>
 80024e6:	2b04      	cmp	r3, #4
 80024e8:	d003      	beq.n	80024f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80024ea:	e0db      	b.n	80026a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024ec:	4b73      	ldr	r3, [pc, #460]	@ (80026bc <HAL_RCC_GetSysClockFreq+0x204>)
 80024ee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80024f0:	e0db      	b.n	80026aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024f2:	4b73      	ldr	r3, [pc, #460]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80024f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80024f6:	e0d8      	b.n	80026aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024f8:	4b6f      	ldr	r3, [pc, #444]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002500:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002502:	4b6d      	ldr	r3, [pc, #436]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d063      	beq.n	80025d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800250e:	4b6a      	ldr	r3, [pc, #424]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	099b      	lsrs	r3, r3, #6
 8002514:	2200      	movs	r2, #0
 8002516:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002518:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800251a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800251c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002520:	633b      	str	r3, [r7, #48]	@ 0x30
 8002522:	2300      	movs	r3, #0
 8002524:	637b      	str	r3, [r7, #52]	@ 0x34
 8002526:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800252a:	4622      	mov	r2, r4
 800252c:	462b      	mov	r3, r5
 800252e:	f04f 0000 	mov.w	r0, #0
 8002532:	f04f 0100 	mov.w	r1, #0
 8002536:	0159      	lsls	r1, r3, #5
 8002538:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800253c:	0150      	lsls	r0, r2, #5
 800253e:	4602      	mov	r2, r0
 8002540:	460b      	mov	r3, r1
 8002542:	4621      	mov	r1, r4
 8002544:	1a51      	subs	r1, r2, r1
 8002546:	6139      	str	r1, [r7, #16]
 8002548:	4629      	mov	r1, r5
 800254a:	eb63 0301 	sbc.w	r3, r3, r1
 800254e:	617b      	str	r3, [r7, #20]
 8002550:	f04f 0200 	mov.w	r2, #0
 8002554:	f04f 0300 	mov.w	r3, #0
 8002558:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800255c:	4659      	mov	r1, fp
 800255e:	018b      	lsls	r3, r1, #6
 8002560:	4651      	mov	r1, sl
 8002562:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002566:	4651      	mov	r1, sl
 8002568:	018a      	lsls	r2, r1, #6
 800256a:	4651      	mov	r1, sl
 800256c:	ebb2 0801 	subs.w	r8, r2, r1
 8002570:	4659      	mov	r1, fp
 8002572:	eb63 0901 	sbc.w	r9, r3, r1
 8002576:	f04f 0200 	mov.w	r2, #0
 800257a:	f04f 0300 	mov.w	r3, #0
 800257e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002582:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002586:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800258a:	4690      	mov	r8, r2
 800258c:	4699      	mov	r9, r3
 800258e:	4623      	mov	r3, r4
 8002590:	eb18 0303 	adds.w	r3, r8, r3
 8002594:	60bb      	str	r3, [r7, #8]
 8002596:	462b      	mov	r3, r5
 8002598:	eb49 0303 	adc.w	r3, r9, r3
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	f04f 0200 	mov.w	r2, #0
 80025a2:	f04f 0300 	mov.w	r3, #0
 80025a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80025aa:	4629      	mov	r1, r5
 80025ac:	024b      	lsls	r3, r1, #9
 80025ae:	4621      	mov	r1, r4
 80025b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025b4:	4621      	mov	r1, r4
 80025b6:	024a      	lsls	r2, r1, #9
 80025b8:	4610      	mov	r0, r2
 80025ba:	4619      	mov	r1, r3
 80025bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025be:	2200      	movs	r2, #0
 80025c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80025c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80025c8:	f7fd fe1a 	bl	8000200 <__aeabi_uldivmod>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	4613      	mov	r3, r2
 80025d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025d4:	e058      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025d6:	4b38      	ldr	r3, [pc, #224]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	099b      	lsrs	r3, r3, #6
 80025dc:	2200      	movs	r2, #0
 80025de:	4618      	mov	r0, r3
 80025e0:	4611      	mov	r1, r2
 80025e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025e6:	623b      	str	r3, [r7, #32]
 80025e8:	2300      	movs	r3, #0
 80025ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80025ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80025f0:	4642      	mov	r2, r8
 80025f2:	464b      	mov	r3, r9
 80025f4:	f04f 0000 	mov.w	r0, #0
 80025f8:	f04f 0100 	mov.w	r1, #0
 80025fc:	0159      	lsls	r1, r3, #5
 80025fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002602:	0150      	lsls	r0, r2, #5
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	4641      	mov	r1, r8
 800260a:	ebb2 0a01 	subs.w	sl, r2, r1
 800260e:	4649      	mov	r1, r9
 8002610:	eb63 0b01 	sbc.w	fp, r3, r1
 8002614:	f04f 0200 	mov.w	r2, #0
 8002618:	f04f 0300 	mov.w	r3, #0
 800261c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002620:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002624:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002628:	ebb2 040a 	subs.w	r4, r2, sl
 800262c:	eb63 050b 	sbc.w	r5, r3, fp
 8002630:	f04f 0200 	mov.w	r2, #0
 8002634:	f04f 0300 	mov.w	r3, #0
 8002638:	00eb      	lsls	r3, r5, #3
 800263a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800263e:	00e2      	lsls	r2, r4, #3
 8002640:	4614      	mov	r4, r2
 8002642:	461d      	mov	r5, r3
 8002644:	4643      	mov	r3, r8
 8002646:	18e3      	adds	r3, r4, r3
 8002648:	603b      	str	r3, [r7, #0]
 800264a:	464b      	mov	r3, r9
 800264c:	eb45 0303 	adc.w	r3, r5, r3
 8002650:	607b      	str	r3, [r7, #4]
 8002652:	f04f 0200 	mov.w	r2, #0
 8002656:	f04f 0300 	mov.w	r3, #0
 800265a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800265e:	4629      	mov	r1, r5
 8002660:	028b      	lsls	r3, r1, #10
 8002662:	4621      	mov	r1, r4
 8002664:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002668:	4621      	mov	r1, r4
 800266a:	028a      	lsls	r2, r1, #10
 800266c:	4610      	mov	r0, r2
 800266e:	4619      	mov	r1, r3
 8002670:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002672:	2200      	movs	r2, #0
 8002674:	61bb      	str	r3, [r7, #24]
 8002676:	61fa      	str	r2, [r7, #28]
 8002678:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800267c:	f7fd fdc0 	bl	8000200 <__aeabi_uldivmod>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	4613      	mov	r3, r2
 8002686:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002688:	4b0b      	ldr	r3, [pc, #44]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	0c1b      	lsrs	r3, r3, #16
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	3301      	adds	r3, #1
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002698:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800269a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800269c:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80026a2:	e002      	b.n	80026aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026a4:	4b05      	ldr	r3, [pc, #20]	@ (80026bc <HAL_RCC_GetSysClockFreq+0x204>)
 80026a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80026a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3750      	adds	r7, #80	@ 0x50
 80026b0:	46bd      	mov	sp, r7
 80026b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026b6:	bf00      	nop
 80026b8:	40023800 	.word	0x40023800
 80026bc:	00f42400 	.word	0x00f42400
 80026c0:	007a1200 	.word	0x007a1200

080026c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026c8:	4b03      	ldr	r3, [pc, #12]	@ (80026d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80026ca:	681b      	ldr	r3, [r3, #0]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	20000000 	.word	0x20000000

080026dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026e0:	f7ff fff0 	bl	80026c4 <HAL_RCC_GetHCLKFreq>
 80026e4:	4602      	mov	r2, r0
 80026e6:	4b05      	ldr	r3, [pc, #20]	@ (80026fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	0a9b      	lsrs	r3, r3, #10
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	4903      	ldr	r1, [pc, #12]	@ (8002700 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026f2:	5ccb      	ldrb	r3, [r1, r3]
 80026f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40023800 	.word	0x40023800
 8002700:	080050e0 	.word	0x080050e0

08002704 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002708:	f7ff ffdc 	bl	80026c4 <HAL_RCC_GetHCLKFreq>
 800270c:	4602      	mov	r2, r0
 800270e:	4b05      	ldr	r3, [pc, #20]	@ (8002724 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	0b5b      	lsrs	r3, r3, #13
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	4903      	ldr	r1, [pc, #12]	@ (8002728 <HAL_RCC_GetPCLK2Freq+0x24>)
 800271a:	5ccb      	ldrb	r3, [r1, r3]
 800271c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002720:	4618      	mov	r0, r3
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40023800 	.word	0x40023800
 8002728:	080050e0 	.word	0x080050e0

0800272c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	220f      	movs	r2, #15
 800273a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800273c:	4b12      	ldr	r3, [pc, #72]	@ (8002788 <HAL_RCC_GetClockConfig+0x5c>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f003 0203 	and.w	r2, r3, #3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002748:	4b0f      	ldr	r3, [pc, #60]	@ (8002788 <HAL_RCC_GetClockConfig+0x5c>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002754:	4b0c      	ldr	r3, [pc, #48]	@ (8002788 <HAL_RCC_GetClockConfig+0x5c>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002760:	4b09      	ldr	r3, [pc, #36]	@ (8002788 <HAL_RCC_GetClockConfig+0x5c>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	08db      	lsrs	r3, r3, #3
 8002766:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800276e:	4b07      	ldr	r3, [pc, #28]	@ (800278c <HAL_RCC_GetClockConfig+0x60>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 020f 	and.w	r2, r3, #15
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	601a      	str	r2, [r3, #0]
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	40023800 	.word	0x40023800
 800278c:	40023c00 	.word	0x40023c00

08002790 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e041      	b.n	8002826 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d106      	bne.n	80027bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f839 	bl	800282e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2202      	movs	r2, #2
 80027c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3304      	adds	r3, #4
 80027cc:	4619      	mov	r1, r3
 80027ce:	4610      	mov	r0, r2
 80027d0:	f000 f9c0 	bl	8002b54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800282e:	b480      	push	{r7}
 8002830:	b083      	sub	sp, #12
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
	...

08002844 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b01      	cmp	r3, #1
 8002856:	d001      	beq.n	800285c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e04e      	b.n	80028fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2202      	movs	r2, #2
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68da      	ldr	r2, [r3, #12]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f042 0201 	orr.w	r2, r2, #1
 8002872:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a23      	ldr	r2, [pc, #140]	@ (8002908 <HAL_TIM_Base_Start_IT+0xc4>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d022      	beq.n	80028c4 <HAL_TIM_Base_Start_IT+0x80>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002886:	d01d      	beq.n	80028c4 <HAL_TIM_Base_Start_IT+0x80>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a1f      	ldr	r2, [pc, #124]	@ (800290c <HAL_TIM_Base_Start_IT+0xc8>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d018      	beq.n	80028c4 <HAL_TIM_Base_Start_IT+0x80>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a1e      	ldr	r2, [pc, #120]	@ (8002910 <HAL_TIM_Base_Start_IT+0xcc>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d013      	beq.n	80028c4 <HAL_TIM_Base_Start_IT+0x80>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a1c      	ldr	r2, [pc, #112]	@ (8002914 <HAL_TIM_Base_Start_IT+0xd0>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d00e      	beq.n	80028c4 <HAL_TIM_Base_Start_IT+0x80>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a1b      	ldr	r2, [pc, #108]	@ (8002918 <HAL_TIM_Base_Start_IT+0xd4>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d009      	beq.n	80028c4 <HAL_TIM_Base_Start_IT+0x80>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a19      	ldr	r2, [pc, #100]	@ (800291c <HAL_TIM_Base_Start_IT+0xd8>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d004      	beq.n	80028c4 <HAL_TIM_Base_Start_IT+0x80>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a18      	ldr	r2, [pc, #96]	@ (8002920 <HAL_TIM_Base_Start_IT+0xdc>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d111      	bne.n	80028e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2b06      	cmp	r3, #6
 80028d4:	d010      	beq.n	80028f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f042 0201 	orr.w	r2, r2, #1
 80028e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028e6:	e007      	b.n	80028f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 0201 	orr.w	r2, r2, #1
 80028f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3714      	adds	r7, #20
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	40010000 	.word	0x40010000
 800290c:	40000400 	.word	0x40000400
 8002910:	40000800 	.word	0x40000800
 8002914:	40000c00 	.word	0x40000c00
 8002918:	40010400 	.word	0x40010400
 800291c:	40014000 	.word	0x40014000
 8002920:	40001800 	.word	0x40001800

08002924 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d020      	beq.n	8002988 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d01b      	beq.n	8002988 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f06f 0202 	mvn.w	r2, #2
 8002958:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	f003 0303 	and.w	r3, r3, #3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f8d2 	bl	8002b18 <HAL_TIM_IC_CaptureCallback>
 8002974:	e005      	b.n	8002982 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 f8c4 	bl	8002b04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f8d5 	bl	8002b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	f003 0304 	and.w	r3, r3, #4
 800298e:	2b00      	cmp	r3, #0
 8002990:	d020      	beq.n	80029d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	2b00      	cmp	r3, #0
 800299a:	d01b      	beq.n	80029d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f06f 0204 	mvn.w	r2, #4
 80029a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2202      	movs	r2, #2
 80029aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 f8ac 	bl	8002b18 <HAL_TIM_IC_CaptureCallback>
 80029c0:	e005      	b.n	80029ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f89e 	bl	8002b04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 f8af 	bl	8002b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	f003 0308 	and.w	r3, r3, #8
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d020      	beq.n	8002a20 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f003 0308 	and.w	r3, r3, #8
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d01b      	beq.n	8002a20 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f06f 0208 	mvn.w	r2, #8
 80029f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2204      	movs	r2, #4
 80029f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	f003 0303 	and.w	r3, r3, #3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f886 	bl	8002b18 <HAL_TIM_IC_CaptureCallback>
 8002a0c:	e005      	b.n	8002a1a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 f878 	bl	8002b04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 f889 	bl	8002b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	f003 0310 	and.w	r3, r3, #16
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d020      	beq.n	8002a6c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f003 0310 	and.w	r3, r3, #16
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d01b      	beq.n	8002a6c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f06f 0210 	mvn.w	r2, #16
 8002a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2208      	movs	r2, #8
 8002a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f860 	bl	8002b18 <HAL_TIM_IC_CaptureCallback>
 8002a58:	e005      	b.n	8002a66 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 f852 	bl	8002b04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 f863 	bl	8002b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00c      	beq.n	8002a90 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d007      	beq.n	8002a90 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f06f 0201 	mvn.w	r2, #1
 8002a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7fd ffc8 	bl	8000a20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00c      	beq.n	8002ab4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d007      	beq.n	8002ab4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f900 	bl	8002cb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00c      	beq.n	8002ad8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d007      	beq.n	8002ad8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f834 	bl	8002b40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	f003 0320 	and.w	r3, r3, #32
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00c      	beq.n	8002afc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f003 0320 	and.w	r3, r3, #32
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d007      	beq.n	8002afc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f06f 0220 	mvn.w	r2, #32
 8002af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f8d2 	bl	8002ca0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002afc:	bf00      	nop
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a43      	ldr	r2, [pc, #268]	@ (8002c74 <TIM_Base_SetConfig+0x120>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d013      	beq.n	8002b94 <TIM_Base_SetConfig+0x40>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b72:	d00f      	beq.n	8002b94 <TIM_Base_SetConfig+0x40>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a40      	ldr	r2, [pc, #256]	@ (8002c78 <TIM_Base_SetConfig+0x124>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d00b      	beq.n	8002b94 <TIM_Base_SetConfig+0x40>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a3f      	ldr	r2, [pc, #252]	@ (8002c7c <TIM_Base_SetConfig+0x128>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d007      	beq.n	8002b94 <TIM_Base_SetConfig+0x40>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a3e      	ldr	r2, [pc, #248]	@ (8002c80 <TIM_Base_SetConfig+0x12c>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d003      	beq.n	8002b94 <TIM_Base_SetConfig+0x40>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a3d      	ldr	r2, [pc, #244]	@ (8002c84 <TIM_Base_SetConfig+0x130>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d108      	bne.n	8002ba6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a32      	ldr	r2, [pc, #200]	@ (8002c74 <TIM_Base_SetConfig+0x120>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d02b      	beq.n	8002c06 <TIM_Base_SetConfig+0xb2>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bb4:	d027      	beq.n	8002c06 <TIM_Base_SetConfig+0xb2>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a2f      	ldr	r2, [pc, #188]	@ (8002c78 <TIM_Base_SetConfig+0x124>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d023      	beq.n	8002c06 <TIM_Base_SetConfig+0xb2>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a2e      	ldr	r2, [pc, #184]	@ (8002c7c <TIM_Base_SetConfig+0x128>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d01f      	beq.n	8002c06 <TIM_Base_SetConfig+0xb2>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a2d      	ldr	r2, [pc, #180]	@ (8002c80 <TIM_Base_SetConfig+0x12c>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d01b      	beq.n	8002c06 <TIM_Base_SetConfig+0xb2>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a2c      	ldr	r2, [pc, #176]	@ (8002c84 <TIM_Base_SetConfig+0x130>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d017      	beq.n	8002c06 <TIM_Base_SetConfig+0xb2>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a2b      	ldr	r2, [pc, #172]	@ (8002c88 <TIM_Base_SetConfig+0x134>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d013      	beq.n	8002c06 <TIM_Base_SetConfig+0xb2>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a2a      	ldr	r2, [pc, #168]	@ (8002c8c <TIM_Base_SetConfig+0x138>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d00f      	beq.n	8002c06 <TIM_Base_SetConfig+0xb2>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a29      	ldr	r2, [pc, #164]	@ (8002c90 <TIM_Base_SetConfig+0x13c>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d00b      	beq.n	8002c06 <TIM_Base_SetConfig+0xb2>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a28      	ldr	r2, [pc, #160]	@ (8002c94 <TIM_Base_SetConfig+0x140>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d007      	beq.n	8002c06 <TIM_Base_SetConfig+0xb2>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a27      	ldr	r2, [pc, #156]	@ (8002c98 <TIM_Base_SetConfig+0x144>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d003      	beq.n	8002c06 <TIM_Base_SetConfig+0xb2>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a26      	ldr	r2, [pc, #152]	@ (8002c9c <TIM_Base_SetConfig+0x148>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d108      	bne.n	8002c18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	689a      	ldr	r2, [r3, #8]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a0e      	ldr	r2, [pc, #56]	@ (8002c74 <TIM_Base_SetConfig+0x120>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d003      	beq.n	8002c46 <TIM_Base_SetConfig+0xf2>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a10      	ldr	r2, [pc, #64]	@ (8002c84 <TIM_Base_SetConfig+0x130>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d103      	bne.n	8002c4e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	691a      	ldr	r2, [r3, #16]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f043 0204 	orr.w	r2, r3, #4
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	601a      	str	r2, [r3, #0]
}
 8002c66:	bf00      	nop
 8002c68:	3714      	adds	r7, #20
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	40010000 	.word	0x40010000
 8002c78:	40000400 	.word	0x40000400
 8002c7c:	40000800 	.word	0x40000800
 8002c80:	40000c00 	.word	0x40000c00
 8002c84:	40010400 	.word	0x40010400
 8002c88:	40014000 	.word	0x40014000
 8002c8c:	40014400 	.word	0x40014400
 8002c90:	40014800 	.word	0x40014800
 8002c94:	40001800 	.word	0x40001800
 8002c98:	40001c00 	.word	0x40001c00
 8002c9c:	40002000 	.word	0x40002000

08002ca0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e042      	b.n	8002d60 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d106      	bne.n	8002cf4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7fd ffa0 	bl	8000c34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2224      	movs	r2, #36	@ 0x24
 8002cf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68da      	ldr	r2, [r3, #12]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 f973 	bl	8002ff8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	691a      	ldr	r2, [r3, #16]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	695a      	ldr	r2, [r3, #20]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68da      	ldr	r2, [r3, #12]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2220      	movs	r2, #32
 8002d54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b08a      	sub	sp, #40	@ 0x28
 8002d6c:	af02      	add	r7, sp, #8
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	603b      	str	r3, [r7, #0]
 8002d74:	4613      	mov	r3, r2
 8002d76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2b20      	cmp	r3, #32
 8002d86:	d175      	bne.n	8002e74 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d002      	beq.n	8002d94 <HAL_UART_Transmit+0x2c>
 8002d8e:	88fb      	ldrh	r3, [r7, #6]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e06e      	b.n	8002e76 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2221      	movs	r2, #33	@ 0x21
 8002da2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002da6:	f7fe f8f3 	bl	8000f90 <HAL_GetTick>
 8002daa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	88fa      	ldrh	r2, [r7, #6]
 8002db0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	88fa      	ldrh	r2, [r7, #6]
 8002db6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dc0:	d108      	bne.n	8002dd4 <HAL_UART_Transmit+0x6c>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d104      	bne.n	8002dd4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	61bb      	str	r3, [r7, #24]
 8002dd2:	e003      	b.n	8002ddc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ddc:	e02e      	b.n	8002e3c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	2200      	movs	r2, #0
 8002de6:	2180      	movs	r1, #128	@ 0x80
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f000 f848 	bl	8002e7e <UART_WaitOnFlagUntilTimeout>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d005      	beq.n	8002e00 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2220      	movs	r2, #32
 8002df8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e03a      	b.n	8002e76 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10b      	bne.n	8002e1e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	881b      	ldrh	r3, [r3, #0]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	3302      	adds	r3, #2
 8002e1a:	61bb      	str	r3, [r7, #24]
 8002e1c:	e007      	b.n	8002e2e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	781a      	ldrb	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	3b01      	subs	r3, #1
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1cb      	bne.n	8002dde <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	2140      	movs	r1, #64	@ 0x40
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f000 f814 	bl	8002e7e <UART_WaitOnFlagUntilTimeout>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d005      	beq.n	8002e68 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2220      	movs	r2, #32
 8002e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e006      	b.n	8002e76 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002e70:	2300      	movs	r3, #0
 8002e72:	e000      	b.n	8002e76 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002e74:	2302      	movs	r3, #2
  }
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3720      	adds	r7, #32
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b086      	sub	sp, #24
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	60f8      	str	r0, [r7, #12]
 8002e86:	60b9      	str	r1, [r7, #8]
 8002e88:	603b      	str	r3, [r7, #0]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e8e:	e03b      	b.n	8002f08 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e96:	d037      	beq.n	8002f08 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e98:	f7fe f87a 	bl	8000f90 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	6a3a      	ldr	r2, [r7, #32]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d302      	bcc.n	8002eae <UART_WaitOnFlagUntilTimeout+0x30>
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e03a      	b.n	8002f28 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d023      	beq.n	8002f08 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	2b80      	cmp	r3, #128	@ 0x80
 8002ec4:	d020      	beq.n	8002f08 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	2b40      	cmp	r3, #64	@ 0x40
 8002eca:	d01d      	beq.n	8002f08 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0308 	and.w	r3, r3, #8
 8002ed6:	2b08      	cmp	r3, #8
 8002ed8:	d116      	bne.n	8002f08 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	617b      	str	r3, [r7, #20]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	617b      	str	r3, [r7, #20]
 8002eee:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f000 f81d 	bl	8002f30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2208      	movs	r2, #8
 8002efa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e00f      	b.n	8002f28 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	4013      	ands	r3, r2
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	bf0c      	ite	eq
 8002f18:	2301      	moveq	r3, #1
 8002f1a:	2300      	movne	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	461a      	mov	r2, r3
 8002f20:	79fb      	ldrb	r3, [r7, #7]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d0b4      	beq.n	8002e90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3718      	adds	r7, #24
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b095      	sub	sp, #84	@ 0x54
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	330c      	adds	r3, #12
 8002f3e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f42:	e853 3f00 	ldrex	r3, [r3]
 8002f46:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f4a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	330c      	adds	r3, #12
 8002f56:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f58:	643a      	str	r2, [r7, #64]	@ 0x40
 8002f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f5c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f5e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002f60:	e841 2300 	strex	r3, r2, [r1]
 8002f64:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1e5      	bne.n	8002f38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	3314      	adds	r3, #20
 8002f72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f74:	6a3b      	ldr	r3, [r7, #32]
 8002f76:	e853 3f00 	ldrex	r3, [r3]
 8002f7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	f023 0301 	bic.w	r3, r3, #1
 8002f82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	3314      	adds	r3, #20
 8002f8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f94:	e841 2300 	strex	r3, r2, [r1]
 8002f98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1e5      	bne.n	8002f6c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d119      	bne.n	8002fdc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	330c      	adds	r3, #12
 8002fae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	e853 3f00 	ldrex	r3, [r3]
 8002fb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	f023 0310 	bic.w	r3, r3, #16
 8002fbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	330c      	adds	r3, #12
 8002fc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002fc8:	61ba      	str	r2, [r7, #24]
 8002fca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fcc:	6979      	ldr	r1, [r7, #20]
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	e841 2300 	strex	r3, r2, [r1]
 8002fd4:	613b      	str	r3, [r7, #16]
   return(result);
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1e5      	bne.n	8002fa8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002fea:	bf00      	nop
 8002fec:	3754      	adds	r7, #84	@ 0x54
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
	...

08002ff8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ff8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ffc:	b0c0      	sub	sp, #256	@ 0x100
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003014:	68d9      	ldr	r1, [r3, #12]
 8003016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	ea40 0301 	orr.w	r3, r0, r1
 8003020:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	431a      	orrs	r2, r3
 8003030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	431a      	orrs	r2, r3
 8003038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	4313      	orrs	r3, r2
 8003040:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003050:	f021 010c 	bic.w	r1, r1, #12
 8003054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800305e:	430b      	orrs	r3, r1
 8003060:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800306e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003072:	6999      	ldr	r1, [r3, #24]
 8003074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	ea40 0301 	orr.w	r3, r0, r1
 800307e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	4b8f      	ldr	r3, [pc, #572]	@ (80032c4 <UART_SetConfig+0x2cc>)
 8003088:	429a      	cmp	r2, r3
 800308a:	d005      	beq.n	8003098 <UART_SetConfig+0xa0>
 800308c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	4b8d      	ldr	r3, [pc, #564]	@ (80032c8 <UART_SetConfig+0x2d0>)
 8003094:	429a      	cmp	r2, r3
 8003096:	d104      	bne.n	80030a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003098:	f7ff fb34 	bl	8002704 <HAL_RCC_GetPCLK2Freq>
 800309c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80030a0:	e003      	b.n	80030aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030a2:	f7ff fb1b 	bl	80026dc <HAL_RCC_GetPCLK1Freq>
 80030a6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030ae:	69db      	ldr	r3, [r3, #28]
 80030b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030b4:	f040 810c 	bne.w	80032d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030bc:	2200      	movs	r2, #0
 80030be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80030c2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80030c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80030ca:	4622      	mov	r2, r4
 80030cc:	462b      	mov	r3, r5
 80030ce:	1891      	adds	r1, r2, r2
 80030d0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80030d2:	415b      	adcs	r3, r3
 80030d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80030d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80030da:	4621      	mov	r1, r4
 80030dc:	eb12 0801 	adds.w	r8, r2, r1
 80030e0:	4629      	mov	r1, r5
 80030e2:	eb43 0901 	adc.w	r9, r3, r1
 80030e6:	f04f 0200 	mov.w	r2, #0
 80030ea:	f04f 0300 	mov.w	r3, #0
 80030ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030fa:	4690      	mov	r8, r2
 80030fc:	4699      	mov	r9, r3
 80030fe:	4623      	mov	r3, r4
 8003100:	eb18 0303 	adds.w	r3, r8, r3
 8003104:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003108:	462b      	mov	r3, r5
 800310a:	eb49 0303 	adc.w	r3, r9, r3
 800310e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800311e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003122:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003126:	460b      	mov	r3, r1
 8003128:	18db      	adds	r3, r3, r3
 800312a:	653b      	str	r3, [r7, #80]	@ 0x50
 800312c:	4613      	mov	r3, r2
 800312e:	eb42 0303 	adc.w	r3, r2, r3
 8003132:	657b      	str	r3, [r7, #84]	@ 0x54
 8003134:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003138:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800313c:	f7fd f860 	bl	8000200 <__aeabi_uldivmod>
 8003140:	4602      	mov	r2, r0
 8003142:	460b      	mov	r3, r1
 8003144:	4b61      	ldr	r3, [pc, #388]	@ (80032cc <UART_SetConfig+0x2d4>)
 8003146:	fba3 2302 	umull	r2, r3, r3, r2
 800314a:	095b      	lsrs	r3, r3, #5
 800314c:	011c      	lsls	r4, r3, #4
 800314e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003152:	2200      	movs	r2, #0
 8003154:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003158:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800315c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003160:	4642      	mov	r2, r8
 8003162:	464b      	mov	r3, r9
 8003164:	1891      	adds	r1, r2, r2
 8003166:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003168:	415b      	adcs	r3, r3
 800316a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800316c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003170:	4641      	mov	r1, r8
 8003172:	eb12 0a01 	adds.w	sl, r2, r1
 8003176:	4649      	mov	r1, r9
 8003178:	eb43 0b01 	adc.w	fp, r3, r1
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	f04f 0300 	mov.w	r3, #0
 8003184:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003188:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800318c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003190:	4692      	mov	sl, r2
 8003192:	469b      	mov	fp, r3
 8003194:	4643      	mov	r3, r8
 8003196:	eb1a 0303 	adds.w	r3, sl, r3
 800319a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800319e:	464b      	mov	r3, r9
 80031a0:	eb4b 0303 	adc.w	r3, fp, r3
 80031a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80031a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80031b4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80031b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80031bc:	460b      	mov	r3, r1
 80031be:	18db      	adds	r3, r3, r3
 80031c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80031c2:	4613      	mov	r3, r2
 80031c4:	eb42 0303 	adc.w	r3, r2, r3
 80031c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80031ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80031ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80031d2:	f7fd f815 	bl	8000200 <__aeabi_uldivmod>
 80031d6:	4602      	mov	r2, r0
 80031d8:	460b      	mov	r3, r1
 80031da:	4611      	mov	r1, r2
 80031dc:	4b3b      	ldr	r3, [pc, #236]	@ (80032cc <UART_SetConfig+0x2d4>)
 80031de:	fba3 2301 	umull	r2, r3, r3, r1
 80031e2:	095b      	lsrs	r3, r3, #5
 80031e4:	2264      	movs	r2, #100	@ 0x64
 80031e6:	fb02 f303 	mul.w	r3, r2, r3
 80031ea:	1acb      	subs	r3, r1, r3
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80031f2:	4b36      	ldr	r3, [pc, #216]	@ (80032cc <UART_SetConfig+0x2d4>)
 80031f4:	fba3 2302 	umull	r2, r3, r3, r2
 80031f8:	095b      	lsrs	r3, r3, #5
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003200:	441c      	add	r4, r3
 8003202:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003206:	2200      	movs	r2, #0
 8003208:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800320c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003210:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003214:	4642      	mov	r2, r8
 8003216:	464b      	mov	r3, r9
 8003218:	1891      	adds	r1, r2, r2
 800321a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800321c:	415b      	adcs	r3, r3
 800321e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003220:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003224:	4641      	mov	r1, r8
 8003226:	1851      	adds	r1, r2, r1
 8003228:	6339      	str	r1, [r7, #48]	@ 0x30
 800322a:	4649      	mov	r1, r9
 800322c:	414b      	adcs	r3, r1
 800322e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	f04f 0300 	mov.w	r3, #0
 8003238:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800323c:	4659      	mov	r1, fp
 800323e:	00cb      	lsls	r3, r1, #3
 8003240:	4651      	mov	r1, sl
 8003242:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003246:	4651      	mov	r1, sl
 8003248:	00ca      	lsls	r2, r1, #3
 800324a:	4610      	mov	r0, r2
 800324c:	4619      	mov	r1, r3
 800324e:	4603      	mov	r3, r0
 8003250:	4642      	mov	r2, r8
 8003252:	189b      	adds	r3, r3, r2
 8003254:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003258:	464b      	mov	r3, r9
 800325a:	460a      	mov	r2, r1
 800325c:	eb42 0303 	adc.w	r3, r2, r3
 8003260:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003270:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003274:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003278:	460b      	mov	r3, r1
 800327a:	18db      	adds	r3, r3, r3
 800327c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800327e:	4613      	mov	r3, r2
 8003280:	eb42 0303 	adc.w	r3, r2, r3
 8003284:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003286:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800328a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800328e:	f7fc ffb7 	bl	8000200 <__aeabi_uldivmod>
 8003292:	4602      	mov	r2, r0
 8003294:	460b      	mov	r3, r1
 8003296:	4b0d      	ldr	r3, [pc, #52]	@ (80032cc <UART_SetConfig+0x2d4>)
 8003298:	fba3 1302 	umull	r1, r3, r3, r2
 800329c:	095b      	lsrs	r3, r3, #5
 800329e:	2164      	movs	r1, #100	@ 0x64
 80032a0:	fb01 f303 	mul.w	r3, r1, r3
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	3332      	adds	r3, #50	@ 0x32
 80032aa:	4a08      	ldr	r2, [pc, #32]	@ (80032cc <UART_SetConfig+0x2d4>)
 80032ac:	fba2 2303 	umull	r2, r3, r2, r3
 80032b0:	095b      	lsrs	r3, r3, #5
 80032b2:	f003 0207 	and.w	r2, r3, #7
 80032b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4422      	add	r2, r4
 80032be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80032c0:	e106      	b.n	80034d0 <UART_SetConfig+0x4d8>
 80032c2:	bf00      	nop
 80032c4:	40011000 	.word	0x40011000
 80032c8:	40011400 	.word	0x40011400
 80032cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032d4:	2200      	movs	r2, #0
 80032d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80032da:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80032de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80032e2:	4642      	mov	r2, r8
 80032e4:	464b      	mov	r3, r9
 80032e6:	1891      	adds	r1, r2, r2
 80032e8:	6239      	str	r1, [r7, #32]
 80032ea:	415b      	adcs	r3, r3
 80032ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80032ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032f2:	4641      	mov	r1, r8
 80032f4:	1854      	adds	r4, r2, r1
 80032f6:	4649      	mov	r1, r9
 80032f8:	eb43 0501 	adc.w	r5, r3, r1
 80032fc:	f04f 0200 	mov.w	r2, #0
 8003300:	f04f 0300 	mov.w	r3, #0
 8003304:	00eb      	lsls	r3, r5, #3
 8003306:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800330a:	00e2      	lsls	r2, r4, #3
 800330c:	4614      	mov	r4, r2
 800330e:	461d      	mov	r5, r3
 8003310:	4643      	mov	r3, r8
 8003312:	18e3      	adds	r3, r4, r3
 8003314:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003318:	464b      	mov	r3, r9
 800331a:	eb45 0303 	adc.w	r3, r5, r3
 800331e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800332e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003332:	f04f 0200 	mov.w	r2, #0
 8003336:	f04f 0300 	mov.w	r3, #0
 800333a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800333e:	4629      	mov	r1, r5
 8003340:	008b      	lsls	r3, r1, #2
 8003342:	4621      	mov	r1, r4
 8003344:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003348:	4621      	mov	r1, r4
 800334a:	008a      	lsls	r2, r1, #2
 800334c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003350:	f7fc ff56 	bl	8000200 <__aeabi_uldivmod>
 8003354:	4602      	mov	r2, r0
 8003356:	460b      	mov	r3, r1
 8003358:	4b60      	ldr	r3, [pc, #384]	@ (80034dc <UART_SetConfig+0x4e4>)
 800335a:	fba3 2302 	umull	r2, r3, r3, r2
 800335e:	095b      	lsrs	r3, r3, #5
 8003360:	011c      	lsls	r4, r3, #4
 8003362:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003366:	2200      	movs	r2, #0
 8003368:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800336c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003370:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003374:	4642      	mov	r2, r8
 8003376:	464b      	mov	r3, r9
 8003378:	1891      	adds	r1, r2, r2
 800337a:	61b9      	str	r1, [r7, #24]
 800337c:	415b      	adcs	r3, r3
 800337e:	61fb      	str	r3, [r7, #28]
 8003380:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003384:	4641      	mov	r1, r8
 8003386:	1851      	adds	r1, r2, r1
 8003388:	6139      	str	r1, [r7, #16]
 800338a:	4649      	mov	r1, r9
 800338c:	414b      	adcs	r3, r1
 800338e:	617b      	str	r3, [r7, #20]
 8003390:	f04f 0200 	mov.w	r2, #0
 8003394:	f04f 0300 	mov.w	r3, #0
 8003398:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800339c:	4659      	mov	r1, fp
 800339e:	00cb      	lsls	r3, r1, #3
 80033a0:	4651      	mov	r1, sl
 80033a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033a6:	4651      	mov	r1, sl
 80033a8:	00ca      	lsls	r2, r1, #3
 80033aa:	4610      	mov	r0, r2
 80033ac:	4619      	mov	r1, r3
 80033ae:	4603      	mov	r3, r0
 80033b0:	4642      	mov	r2, r8
 80033b2:	189b      	adds	r3, r3, r2
 80033b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80033b8:	464b      	mov	r3, r9
 80033ba:	460a      	mov	r2, r1
 80033bc:	eb42 0303 	adc.w	r3, r2, r3
 80033c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80033c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80033ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80033d0:	f04f 0200 	mov.w	r2, #0
 80033d4:	f04f 0300 	mov.w	r3, #0
 80033d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80033dc:	4649      	mov	r1, r9
 80033de:	008b      	lsls	r3, r1, #2
 80033e0:	4641      	mov	r1, r8
 80033e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033e6:	4641      	mov	r1, r8
 80033e8:	008a      	lsls	r2, r1, #2
 80033ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80033ee:	f7fc ff07 	bl	8000200 <__aeabi_uldivmod>
 80033f2:	4602      	mov	r2, r0
 80033f4:	460b      	mov	r3, r1
 80033f6:	4611      	mov	r1, r2
 80033f8:	4b38      	ldr	r3, [pc, #224]	@ (80034dc <UART_SetConfig+0x4e4>)
 80033fa:	fba3 2301 	umull	r2, r3, r3, r1
 80033fe:	095b      	lsrs	r3, r3, #5
 8003400:	2264      	movs	r2, #100	@ 0x64
 8003402:	fb02 f303 	mul.w	r3, r2, r3
 8003406:	1acb      	subs	r3, r1, r3
 8003408:	011b      	lsls	r3, r3, #4
 800340a:	3332      	adds	r3, #50	@ 0x32
 800340c:	4a33      	ldr	r2, [pc, #204]	@ (80034dc <UART_SetConfig+0x4e4>)
 800340e:	fba2 2303 	umull	r2, r3, r2, r3
 8003412:	095b      	lsrs	r3, r3, #5
 8003414:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003418:	441c      	add	r4, r3
 800341a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800341e:	2200      	movs	r2, #0
 8003420:	673b      	str	r3, [r7, #112]	@ 0x70
 8003422:	677a      	str	r2, [r7, #116]	@ 0x74
 8003424:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003428:	4642      	mov	r2, r8
 800342a:	464b      	mov	r3, r9
 800342c:	1891      	adds	r1, r2, r2
 800342e:	60b9      	str	r1, [r7, #8]
 8003430:	415b      	adcs	r3, r3
 8003432:	60fb      	str	r3, [r7, #12]
 8003434:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003438:	4641      	mov	r1, r8
 800343a:	1851      	adds	r1, r2, r1
 800343c:	6039      	str	r1, [r7, #0]
 800343e:	4649      	mov	r1, r9
 8003440:	414b      	adcs	r3, r1
 8003442:	607b      	str	r3, [r7, #4]
 8003444:	f04f 0200 	mov.w	r2, #0
 8003448:	f04f 0300 	mov.w	r3, #0
 800344c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003450:	4659      	mov	r1, fp
 8003452:	00cb      	lsls	r3, r1, #3
 8003454:	4651      	mov	r1, sl
 8003456:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800345a:	4651      	mov	r1, sl
 800345c:	00ca      	lsls	r2, r1, #3
 800345e:	4610      	mov	r0, r2
 8003460:	4619      	mov	r1, r3
 8003462:	4603      	mov	r3, r0
 8003464:	4642      	mov	r2, r8
 8003466:	189b      	adds	r3, r3, r2
 8003468:	66bb      	str	r3, [r7, #104]	@ 0x68
 800346a:	464b      	mov	r3, r9
 800346c:	460a      	mov	r2, r1
 800346e:	eb42 0303 	adc.w	r3, r2, r3
 8003472:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	663b      	str	r3, [r7, #96]	@ 0x60
 800347e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003480:	f04f 0200 	mov.w	r2, #0
 8003484:	f04f 0300 	mov.w	r3, #0
 8003488:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800348c:	4649      	mov	r1, r9
 800348e:	008b      	lsls	r3, r1, #2
 8003490:	4641      	mov	r1, r8
 8003492:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003496:	4641      	mov	r1, r8
 8003498:	008a      	lsls	r2, r1, #2
 800349a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800349e:	f7fc feaf 	bl	8000200 <__aeabi_uldivmod>
 80034a2:	4602      	mov	r2, r0
 80034a4:	460b      	mov	r3, r1
 80034a6:	4b0d      	ldr	r3, [pc, #52]	@ (80034dc <UART_SetConfig+0x4e4>)
 80034a8:	fba3 1302 	umull	r1, r3, r3, r2
 80034ac:	095b      	lsrs	r3, r3, #5
 80034ae:	2164      	movs	r1, #100	@ 0x64
 80034b0:	fb01 f303 	mul.w	r3, r1, r3
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	011b      	lsls	r3, r3, #4
 80034b8:	3332      	adds	r3, #50	@ 0x32
 80034ba:	4a08      	ldr	r2, [pc, #32]	@ (80034dc <UART_SetConfig+0x4e4>)
 80034bc:	fba2 2303 	umull	r2, r3, r2, r3
 80034c0:	095b      	lsrs	r3, r3, #5
 80034c2:	f003 020f 	and.w	r2, r3, #15
 80034c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4422      	add	r2, r4
 80034ce:	609a      	str	r2, [r3, #8]
}
 80034d0:	bf00      	nop
 80034d2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80034d6:	46bd      	mov	sp, r7
 80034d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034dc:	51eb851f 	.word	0x51eb851f

080034e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80034e0:	b084      	sub	sp, #16
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b084      	sub	sp, #16
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
 80034ea:	f107 001c 	add.w	r0, r7, #28
 80034ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80034f2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d123      	bne.n	8003542 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034fe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800350e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003522:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003526:	2b01      	cmp	r3, #1
 8003528:	d105      	bne.n	8003536 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 faa0 	bl	8003a7c <USB_CoreReset>
 800353c:	4603      	mov	r3, r0
 800353e:	73fb      	strb	r3, [r7, #15]
 8003540:	e01b      	b.n	800357a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 fa94 	bl	8003a7c <USB_CoreReset>
 8003554:	4603      	mov	r3, r0
 8003556:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003558:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800355c:	2b00      	cmp	r3, #0
 800355e:	d106      	bne.n	800356e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003564:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	639a      	str	r2, [r3, #56]	@ 0x38
 800356c:	e005      	b.n	800357a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003572:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800357a:	7fbb      	ldrb	r3, [r7, #30]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d10b      	bne.n	8003598 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f043 0206 	orr.w	r2, r3, #6
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f043 0220 	orr.w	r2, r3, #32
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003598:	7bfb      	ldrb	r3, [r7, #15]
}
 800359a:	4618      	mov	r0, r3
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80035a4:	b004      	add	sp, #16
 80035a6:	4770      	bx	lr

080035a8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f023 0201 	bic.w	r2, r3, #1
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b084      	sub	sp, #16
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
 80035d2:	460b      	mov	r3, r1
 80035d4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80035d6:	2300      	movs	r3, #0
 80035d8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80035e6:	78fb      	ldrb	r3, [r7, #3]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d115      	bne.n	8003618 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80035f8:	200a      	movs	r0, #10
 80035fa:	f7fd fcd5 	bl	8000fa8 <HAL_Delay>
      ms += 10U;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	330a      	adds	r3, #10
 8003602:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 fa2b 	bl	8003a60 <USB_GetMode>
 800360a:	4603      	mov	r3, r0
 800360c:	2b01      	cmp	r3, #1
 800360e:	d01e      	beq.n	800364e <USB_SetCurrentMode+0x84>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2bc7      	cmp	r3, #199	@ 0xc7
 8003614:	d9f0      	bls.n	80035f8 <USB_SetCurrentMode+0x2e>
 8003616:	e01a      	b.n	800364e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003618:	78fb      	ldrb	r3, [r7, #3]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d115      	bne.n	800364a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800362a:	200a      	movs	r0, #10
 800362c:	f7fd fcbc 	bl	8000fa8 <HAL_Delay>
      ms += 10U;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	330a      	adds	r3, #10
 8003634:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 fa12 	bl	8003a60 <USB_GetMode>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d005      	beq.n	800364e <USB_SetCurrentMode+0x84>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2bc7      	cmp	r3, #199	@ 0xc7
 8003646:	d9f0      	bls.n	800362a <USB_SetCurrentMode+0x60>
 8003648:	e001      	b.n	800364e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e005      	b.n	800365a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2bc8      	cmp	r3, #200	@ 0xc8
 8003652:	d101      	bne.n	8003658 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e000      	b.n	800365a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
	...

08003664 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003664:	b084      	sub	sp, #16
 8003666:	b580      	push	{r7, lr}
 8003668:	b086      	sub	sp, #24
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
 800366e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003672:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003676:	2300      	movs	r3, #0
 8003678:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800367e:	2300      	movs	r3, #0
 8003680:	613b      	str	r3, [r7, #16]
 8003682:	e009      	b.n	8003698 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	3340      	adds	r3, #64	@ 0x40
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	4413      	add	r3, r2
 800368e:	2200      	movs	r2, #0
 8003690:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	3301      	adds	r3, #1
 8003696:	613b      	str	r3, [r7, #16]
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	2b0e      	cmp	r3, #14
 800369c:	d9f2      	bls.n	8003684 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800369e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d11c      	bne.n	80036e0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036b4:	f043 0302 	orr.w	r3, r3, #2
 80036b8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036be:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ca:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	639a      	str	r2, [r3, #56]	@ 0x38
 80036de:	e00b      	b.n	80036f8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036e4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80036fe:	461a      	mov	r2, r3
 8003700:	2300      	movs	r3, #0
 8003702:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003704:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003708:	2b01      	cmp	r3, #1
 800370a:	d10d      	bne.n	8003728 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800370c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003710:	2b00      	cmp	r3, #0
 8003712:	d104      	bne.n	800371e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003714:	2100      	movs	r1, #0
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 f968 	bl	80039ec <USB_SetDevSpeed>
 800371c:	e008      	b.n	8003730 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800371e:	2101      	movs	r1, #1
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 f963 	bl	80039ec <USB_SetDevSpeed>
 8003726:	e003      	b.n	8003730 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003728:	2103      	movs	r1, #3
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f95e 	bl	80039ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003730:	2110      	movs	r1, #16
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f8fa 	bl	800392c <USB_FlushTxFifo>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f924 	bl	8003990 <USB_FlushRxFifo>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003758:	461a      	mov	r2, r3
 800375a:	2300      	movs	r3, #0
 800375c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003764:	461a      	mov	r2, r3
 8003766:	2300      	movs	r3, #0
 8003768:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003770:	461a      	mov	r2, r3
 8003772:	2300      	movs	r3, #0
 8003774:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003776:	2300      	movs	r3, #0
 8003778:	613b      	str	r3, [r7, #16]
 800377a:	e043      	b.n	8003804 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	015a      	lsls	r2, r3, #5
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4413      	add	r3, r2
 8003784:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800378e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003792:	d118      	bne.n	80037c6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10a      	bne.n	80037b0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	015a      	lsls	r2, r3, #5
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	4413      	add	r3, r2
 80037a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037a6:	461a      	mov	r2, r3
 80037a8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80037ac:	6013      	str	r3, [r2, #0]
 80037ae:	e013      	b.n	80037d8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	015a      	lsls	r2, r3, #5
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	4413      	add	r3, r2
 80037b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037bc:	461a      	mov	r2, r3
 80037be:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80037c2:	6013      	str	r3, [r2, #0]
 80037c4:	e008      	b.n	80037d8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	015a      	lsls	r2, r3, #5
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	4413      	add	r3, r2
 80037ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037d2:	461a      	mov	r2, r3
 80037d4:	2300      	movs	r3, #0
 80037d6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	015a      	lsls	r2, r3, #5
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4413      	add	r3, r2
 80037e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037e4:	461a      	mov	r2, r3
 80037e6:	2300      	movs	r3, #0
 80037e8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	015a      	lsls	r2, r3, #5
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	4413      	add	r3, r2
 80037f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037f6:	461a      	mov	r2, r3
 80037f8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80037fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	3301      	adds	r3, #1
 8003802:	613b      	str	r3, [r7, #16]
 8003804:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003808:	461a      	mov	r2, r3
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	4293      	cmp	r3, r2
 800380e:	d3b5      	bcc.n	800377c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003810:	2300      	movs	r3, #0
 8003812:	613b      	str	r3, [r7, #16]
 8003814:	e043      	b.n	800389e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	015a      	lsls	r2, r3, #5
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	4413      	add	r3, r2
 800381e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003828:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800382c:	d118      	bne.n	8003860 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d10a      	bne.n	800384a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	015a      	lsls	r2, r3, #5
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	4413      	add	r3, r2
 800383c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003840:	461a      	mov	r2, r3
 8003842:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003846:	6013      	str	r3, [r2, #0]
 8003848:	e013      	b.n	8003872 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	015a      	lsls	r2, r3, #5
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	4413      	add	r3, r2
 8003852:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003856:	461a      	mov	r2, r3
 8003858:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	e008      	b.n	8003872 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	015a      	lsls	r2, r3, #5
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	4413      	add	r3, r2
 8003868:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800386c:	461a      	mov	r2, r3
 800386e:	2300      	movs	r3, #0
 8003870:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	015a      	lsls	r2, r3, #5
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	4413      	add	r3, r2
 800387a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800387e:	461a      	mov	r2, r3
 8003880:	2300      	movs	r3, #0
 8003882:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	015a      	lsls	r2, r3, #5
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4413      	add	r3, r2
 800388c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003890:	461a      	mov	r2, r3
 8003892:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003896:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	3301      	adds	r3, #1
 800389c:	613b      	str	r3, [r7, #16]
 800389e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80038a2:	461a      	mov	r2, r3
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d3b5      	bcc.n	8003816 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038bc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80038ca:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80038cc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d105      	bne.n	80038e0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	f043 0210 	orr.w	r2, r3, #16
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	699a      	ldr	r2, [r3, #24]
 80038e4:	4b10      	ldr	r3, [pc, #64]	@ (8003928 <USB_DevInit+0x2c4>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80038ec:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d005      	beq.n	8003900 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	f043 0208 	orr.w	r2, r3, #8
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003900:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003904:	2b01      	cmp	r3, #1
 8003906:	d107      	bne.n	8003918 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003910:	f043 0304 	orr.w	r3, r3, #4
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003918:	7dfb      	ldrb	r3, [r7, #23]
}
 800391a:	4618      	mov	r0, r3
 800391c:	3718      	adds	r7, #24
 800391e:	46bd      	mov	sp, r7
 8003920:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003924:	b004      	add	sp, #16
 8003926:	4770      	bx	lr
 8003928:	803c3800 	.word	0x803c3800

0800392c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003936:	2300      	movs	r3, #0
 8003938:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	3301      	adds	r3, #1
 800393e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003946:	d901      	bls.n	800394c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e01b      	b.n	8003984 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	2b00      	cmp	r3, #0
 8003952:	daf2      	bge.n	800393a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003954:	2300      	movs	r3, #0
 8003956:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	019b      	lsls	r3, r3, #6
 800395c:	f043 0220 	orr.w	r2, r3, #32
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	3301      	adds	r3, #1
 8003968:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003970:	d901      	bls.n	8003976 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e006      	b.n	8003984 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	f003 0320 	and.w	r3, r3, #32
 800397e:	2b20      	cmp	r3, #32
 8003980:	d0f0      	beq.n	8003964 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	4618      	mov	r0, r3
 8003986:	3714      	adds	r7, #20
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003998:	2300      	movs	r3, #0
 800399a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	3301      	adds	r3, #1
 80039a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80039a8:	d901      	bls.n	80039ae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e018      	b.n	80039e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	daf2      	bge.n	800399c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80039b6:	2300      	movs	r3, #0
 80039b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2210      	movs	r2, #16
 80039be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	3301      	adds	r3, #1
 80039c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80039cc:	d901      	bls.n	80039d2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e006      	b.n	80039e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	f003 0310 	and.w	r3, r3, #16
 80039da:	2b10      	cmp	r3, #16
 80039dc:	d0f0      	beq.n	80039c0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3714      	adds	r7, #20
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	460b      	mov	r3, r1
 80039f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	78fb      	ldrb	r3, [r7, #3]
 8003a06:	68f9      	ldr	r1, [r7, #12]
 8003a08:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3714      	adds	r7, #20
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr

08003a1e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b085      	sub	sp, #20
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003a38:	f023 0303 	bic.w	r3, r3, #3
 8003a3c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a4c:	f043 0302 	orr.w	r3, r3, #2
 8003a50:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3714      	adds	r7, #20
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	f003 0301 	and.w	r3, r3, #1
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003a84:	2300      	movs	r3, #0
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003a94:	d901      	bls.n	8003a9a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e022      	b.n	8003ae0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	daf2      	bge.n	8003a88 <USB_CoreReset+0xc>

  count = 10U;
 8003aa2:	230a      	movs	r3, #10
 8003aa4:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8003aa6:	e002      	b.n	8003aae <USB_CoreReset+0x32>
  {
    count--;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1f9      	bne.n	8003aa8 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	f043 0201 	orr.w	r2, r3, #1
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003acc:	d901      	bls.n	8003ad2 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e006      	b.n	8003ae0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d0f0      	beq.n	8003ac0 <USB_CoreReset+0x44>

  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3714      	adds	r7, #20
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	4603      	mov	r3, r0
 8003af4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003af6:	2300      	movs	r3, #0
 8003af8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003afa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003afe:	2b84      	cmp	r3, #132	@ 0x84
 8003b00:	d005      	beq.n	8003b0e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003b02:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	4413      	add	r3, r2
 8003b0a:	3303      	adds	r3, #3
 8003b0c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3714      	adds	r7, #20
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003b20:	f000 fae4 	bl	80040ec <vTaskStartScheduler>
  
  return osOK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003b2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b2c:	b089      	sub	sp, #36	@ 0x24
 8003b2e:	af04      	add	r7, sp, #16
 8003b30:	6078      	str	r0, [r7, #4]
 8003b32:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d020      	beq.n	8003b7e <osThreadCreate+0x54>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d01c      	beq.n	8003b7e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685c      	ldr	r4, [r3, #4]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	691e      	ldr	r6, [r3, #16]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7ff ffc8 	bl	8003aec <makeFreeRtosPriority>
 8003b5c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b66:	9202      	str	r2, [sp, #8]
 8003b68:	9301      	str	r3, [sp, #4]
 8003b6a:	9100      	str	r1, [sp, #0]
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	4632      	mov	r2, r6
 8003b70:	4629      	mov	r1, r5
 8003b72:	4620      	mov	r0, r4
 8003b74:	f000 f8ed 	bl	8003d52 <xTaskCreateStatic>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	60fb      	str	r3, [r7, #12]
 8003b7c:	e01c      	b.n	8003bb8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685c      	ldr	r4, [r3, #4]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b8a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7ff ffaa 	bl	8003aec <makeFreeRtosPriority>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	f107 030c 	add.w	r3, r7, #12
 8003b9e:	9301      	str	r3, [sp, #4]
 8003ba0:	9200      	str	r2, [sp, #0]
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	4632      	mov	r2, r6
 8003ba6:	4629      	mov	r1, r5
 8003ba8:	4620      	mov	r0, r4
 8003baa:	f000 f932 	bl	8003e12 <xTaskCreate>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d001      	beq.n	8003bb8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	e000      	b.n	8003bba <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3714      	adds	r7, #20
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bc2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b084      	sub	sp, #16
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d001      	beq.n	8003bd8 <osDelay+0x16>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	e000      	b.n	8003bda <osDelay+0x18>
 8003bd8:	2301      	movs	r3, #1
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f000 fa50 	bl	8004080 <vTaskDelay>
  
  return osOK;
 8003be0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003bea:	b480      	push	{r7}
 8003bec:	b083      	sub	sp, #12
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f103 0208 	add.w	r2, r3, #8
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8003c02:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f103 0208 	add.w	r2, r3, #8
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f103 0208 	add.w	r2, r3, #8
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c1e:	bf00      	nop
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b083      	sub	sp, #12
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c44:	b480      	push	{r7}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	689a      	ldr	r2, [r3, #8]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	1c5a      	adds	r2, r3, #1
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	601a      	str	r2, [r3, #0]
}
 8003c80:	bf00      	nop
 8003c82:	3714      	adds	r7, #20
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca2:	d103      	bne.n	8003cac <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	60fb      	str	r3, [r7, #12]
 8003caa:	e00c      	b.n	8003cc6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	3308      	adds	r3, #8
 8003cb0:	60fb      	str	r3, [r7, #12]
 8003cb2:	e002      	b.n	8003cba <vListInsert+0x2e>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	60fb      	str	r3, [r7, #12]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d2f6      	bcs.n	8003cb4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	1c5a      	adds	r2, r3, #1
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	601a      	str	r2, [r3, #0]
}
 8003cf2:	bf00      	nop
 8003cf4:	3714      	adds	r7, #20
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b085      	sub	sp, #20
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6892      	ldr	r2, [r2, #8]
 8003d14:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	6852      	ldr	r2, [r2, #4]
 8003d1e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d103      	bne.n	8003d32 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	689a      	ldr	r2, [r3, #8]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	1e5a      	subs	r2, r3, #1
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3714      	adds	r7, #20
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b08e      	sub	sp, #56	@ 0x38
 8003d56:	af04      	add	r7, sp, #16
 8003d58:	60f8      	str	r0, [r7, #12]
 8003d5a:	60b9      	str	r1, [r7, #8]
 8003d5c:	607a      	str	r2, [r7, #4]
 8003d5e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10b      	bne.n	8003d7e <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d6a:	f383 8811 	msr	BASEPRI, r3
 8003d6e:	f3bf 8f6f 	isb	sy
 8003d72:	f3bf 8f4f 	dsb	sy
 8003d76:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003d78:	bf00      	nop
 8003d7a:	bf00      	nop
 8003d7c:	e7fd      	b.n	8003d7a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d10b      	bne.n	8003d9c <xTaskCreateStatic+0x4a>
	__asm volatile
 8003d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d88:	f383 8811 	msr	BASEPRI, r3
 8003d8c:	f3bf 8f6f 	isb	sy
 8003d90:	f3bf 8f4f 	dsb	sy
 8003d94:	61fb      	str	r3, [r7, #28]
}
 8003d96:	bf00      	nop
 8003d98:	bf00      	nop
 8003d9a:	e7fd      	b.n	8003d98 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003d9c:	2354      	movs	r3, #84	@ 0x54
 8003d9e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	2b54      	cmp	r3, #84	@ 0x54
 8003da4:	d00b      	beq.n	8003dbe <xTaskCreateStatic+0x6c>
	__asm volatile
 8003da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003daa:	f383 8811 	msr	BASEPRI, r3
 8003dae:	f3bf 8f6f 	isb	sy
 8003db2:	f3bf 8f4f 	dsb	sy
 8003db6:	61bb      	str	r3, [r7, #24]
}
 8003db8:	bf00      	nop
 8003dba:	bf00      	nop
 8003dbc:	e7fd      	b.n	8003dba <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003dbe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d01e      	beq.n	8003e04 <xTaskCreateStatic+0xb2>
 8003dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d01b      	beq.n	8003e04 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dce:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003dd4:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd8:	2202      	movs	r2, #2
 8003dda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003dde:	2300      	movs	r3, #0
 8003de0:	9303      	str	r3, [sp, #12]
 8003de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de4:	9302      	str	r3, [sp, #8]
 8003de6:	f107 0314 	add.w	r3, r7, #20
 8003dea:	9301      	str	r3, [sp, #4]
 8003dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	68b9      	ldr	r1, [r7, #8]
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 f850 	bl	8003e9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003dfc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003dfe:	f000 f8d5 	bl	8003fac <prvAddNewTaskToReadyList>
 8003e02:	e001      	b.n	8003e08 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003e04:	2300      	movs	r3, #0
 8003e06:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003e08:	697b      	ldr	r3, [r7, #20]
	}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3728      	adds	r7, #40	@ 0x28
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b08c      	sub	sp, #48	@ 0x30
 8003e16:	af04      	add	r7, sp, #16
 8003e18:	60f8      	str	r0, [r7, #12]
 8003e1a:	60b9      	str	r1, [r7, #8]
 8003e1c:	603b      	str	r3, [r7, #0]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003e22:	88fb      	ldrh	r3, [r7, #6]
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	4618      	mov	r0, r3
 8003e28:	f000 fece 	bl	8004bc8 <pvPortMalloc>
 8003e2c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00e      	beq.n	8003e52 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003e34:	2054      	movs	r0, #84	@ 0x54
 8003e36:	f000 fec7 	bl	8004bc8 <pvPortMalloc>
 8003e3a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e48:	e005      	b.n	8003e56 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003e4a:	6978      	ldr	r0, [r7, #20]
 8003e4c:	f000 ff8a 	bl	8004d64 <vPortFree>
 8003e50:	e001      	b.n	8003e56 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003e52:	2300      	movs	r3, #0
 8003e54:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d017      	beq.n	8003e8c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003e64:	88fa      	ldrh	r2, [r7, #6]
 8003e66:	2300      	movs	r3, #0
 8003e68:	9303      	str	r3, [sp, #12]
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	9302      	str	r3, [sp, #8]
 8003e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e70:	9301      	str	r3, [sp, #4]
 8003e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	68b9      	ldr	r1, [r7, #8]
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f000 f80e 	bl	8003e9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e80:	69f8      	ldr	r0, [r7, #28]
 8003e82:	f000 f893 	bl	8003fac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003e86:	2301      	movs	r3, #1
 8003e88:	61bb      	str	r3, [r7, #24]
 8003e8a:	e002      	b.n	8003e92 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e90:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003e92:	69bb      	ldr	r3, [r7, #24]
	}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3720      	adds	r7, #32
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b088      	sub	sp, #32
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
 8003ea8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4413      	add	r3, r2
 8003eba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	f023 0307 	bic.w	r3, r3, #7
 8003ec2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	f003 0307 	and.w	r3, r3, #7
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00b      	beq.n	8003ee6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ed2:	f383 8811 	msr	BASEPRI, r3
 8003ed6:	f3bf 8f6f 	isb	sy
 8003eda:	f3bf 8f4f 	dsb	sy
 8003ede:	617b      	str	r3, [r7, #20]
}
 8003ee0:	bf00      	nop
 8003ee2:	bf00      	nop
 8003ee4:	e7fd      	b.n	8003ee2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d01f      	beq.n	8003f2c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003eec:	2300      	movs	r3, #0
 8003eee:	61fb      	str	r3, [r7, #28]
 8003ef0:	e012      	b.n	8003f18 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	7819      	ldrb	r1, [r3, #0]
 8003efa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	4413      	add	r3, r2
 8003f00:	3334      	adds	r3, #52	@ 0x34
 8003f02:	460a      	mov	r2, r1
 8003f04:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d006      	beq.n	8003f20 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	3301      	adds	r3, #1
 8003f16:	61fb      	str	r3, [r7, #28]
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	2b0f      	cmp	r3, #15
 8003f1c:	d9e9      	bls.n	8003ef2 <prvInitialiseNewTask+0x56>
 8003f1e:	e000      	b.n	8003f22 <prvInitialiseNewTask+0x86>
			{
				break;
 8003f20:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f2a:	e003      	b.n	8003f34 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f36:	2b06      	cmp	r3, #6
 8003f38:	d901      	bls.n	8003f3e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003f3a:	2306      	movs	r3, #6
 8003f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f42:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f48:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f52:	3304      	adds	r3, #4
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7ff fe68 	bl	8003c2a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f5c:	3318      	adds	r3, #24
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7ff fe63 	bl	8003c2a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f68:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f6c:	f1c3 0207 	rsb	r2, r3, #7
 8003f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f72:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f78:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	68f9      	ldr	r1, [r7, #12]
 8003f8c:	69b8      	ldr	r0, [r7, #24]
 8003f8e:	f000 fc0d 	bl	80047ac <pxPortInitialiseStack>
 8003f92:	4602      	mov	r2, r0
 8003f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f96:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d002      	beq.n	8003fa4 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fa0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fa2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003fa4:	bf00      	nop
 8003fa6:	3720      	adds	r7, #32
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003fb4:	f000 fd28 	bl	8004a08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003fb8:	4b2a      	ldr	r3, [pc, #168]	@ (8004064 <prvAddNewTaskToReadyList+0xb8>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	4a29      	ldr	r2, [pc, #164]	@ (8004064 <prvAddNewTaskToReadyList+0xb8>)
 8003fc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003fc2:	4b29      	ldr	r3, [pc, #164]	@ (8004068 <prvAddNewTaskToReadyList+0xbc>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d109      	bne.n	8003fde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003fca:	4a27      	ldr	r2, [pc, #156]	@ (8004068 <prvAddNewTaskToReadyList+0xbc>)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003fd0:	4b24      	ldr	r3, [pc, #144]	@ (8004064 <prvAddNewTaskToReadyList+0xb8>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d110      	bne.n	8003ffa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003fd8:	f000 fac4 	bl	8004564 <prvInitialiseTaskLists>
 8003fdc:	e00d      	b.n	8003ffa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003fde:	4b23      	ldr	r3, [pc, #140]	@ (800406c <prvAddNewTaskToReadyList+0xc0>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d109      	bne.n	8003ffa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003fe6:	4b20      	ldr	r3, [pc, #128]	@ (8004068 <prvAddNewTaskToReadyList+0xbc>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d802      	bhi.n	8003ffa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ff4:	4a1c      	ldr	r2, [pc, #112]	@ (8004068 <prvAddNewTaskToReadyList+0xbc>)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003ffa:	4b1d      	ldr	r3, [pc, #116]	@ (8004070 <prvAddNewTaskToReadyList+0xc4>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	3301      	adds	r3, #1
 8004000:	4a1b      	ldr	r2, [pc, #108]	@ (8004070 <prvAddNewTaskToReadyList+0xc4>)
 8004002:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004008:	2201      	movs	r2, #1
 800400a:	409a      	lsls	r2, r3
 800400c:	4b19      	ldr	r3, [pc, #100]	@ (8004074 <prvAddNewTaskToReadyList+0xc8>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4313      	orrs	r3, r2
 8004012:	4a18      	ldr	r2, [pc, #96]	@ (8004074 <prvAddNewTaskToReadyList+0xc8>)
 8004014:	6013      	str	r3, [r2, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800401a:	4613      	mov	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	4413      	add	r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	4a15      	ldr	r2, [pc, #84]	@ (8004078 <prvAddNewTaskToReadyList+0xcc>)
 8004024:	441a      	add	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	3304      	adds	r3, #4
 800402a:	4619      	mov	r1, r3
 800402c:	4610      	mov	r0, r2
 800402e:	f7ff fe09 	bl	8003c44 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004032:	f000 fd1b 	bl	8004a6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004036:	4b0d      	ldr	r3, [pc, #52]	@ (800406c <prvAddNewTaskToReadyList+0xc0>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00e      	beq.n	800405c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800403e:	4b0a      	ldr	r3, [pc, #40]	@ (8004068 <prvAddNewTaskToReadyList+0xbc>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004048:	429a      	cmp	r2, r3
 800404a:	d207      	bcs.n	800405c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800404c:	4b0b      	ldr	r3, [pc, #44]	@ (800407c <prvAddNewTaskToReadyList+0xd0>)
 800404e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	f3bf 8f4f 	dsb	sy
 8004058:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800405c:	bf00      	nop
 800405e:	3708      	adds	r7, #8
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	20000b34 	.word	0x20000b34
 8004068:	20000a34 	.word	0x20000a34
 800406c:	20000b40 	.word	0x20000b40
 8004070:	20000b50 	.word	0x20000b50
 8004074:	20000b3c 	.word	0x20000b3c
 8004078:	20000a38 	.word	0x20000a38
 800407c:	e000ed04 	.word	0xe000ed04

08004080 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004088:	2300      	movs	r3, #0
 800408a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d018      	beq.n	80040c4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004092:	4b14      	ldr	r3, [pc, #80]	@ (80040e4 <vTaskDelay+0x64>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00b      	beq.n	80040b2 <vTaskDelay+0x32>
	__asm volatile
 800409a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800409e:	f383 8811 	msr	BASEPRI, r3
 80040a2:	f3bf 8f6f 	isb	sy
 80040a6:	f3bf 8f4f 	dsb	sy
 80040aa:	60bb      	str	r3, [r7, #8]
}
 80040ac:	bf00      	nop
 80040ae:	bf00      	nop
 80040b0:	e7fd      	b.n	80040ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80040b2:	f000 f87d 	bl	80041b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80040b6:	2100      	movs	r1, #0
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 fb11 	bl	80046e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80040be:	f000 f885 	bl	80041cc <xTaskResumeAll>
 80040c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d107      	bne.n	80040da <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80040ca:	4b07      	ldr	r3, [pc, #28]	@ (80040e8 <vTaskDelay+0x68>)
 80040cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040d0:	601a      	str	r2, [r3, #0]
 80040d2:	f3bf 8f4f 	dsb	sy
 80040d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80040da:	bf00      	nop
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	20000b5c 	.word	0x20000b5c
 80040e8:	e000ed04 	.word	0xe000ed04

080040ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b08a      	sub	sp, #40	@ 0x28
 80040f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80040f2:	2300      	movs	r3, #0
 80040f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80040f6:	2300      	movs	r3, #0
 80040f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80040fa:	463a      	mov	r2, r7
 80040fc:	1d39      	adds	r1, r7, #4
 80040fe:	f107 0308 	add.w	r3, r7, #8
 8004102:	4618      	mov	r0, r3
 8004104:	f7fc fa12 	bl	800052c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004108:	6839      	ldr	r1, [r7, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68ba      	ldr	r2, [r7, #8]
 800410e:	9202      	str	r2, [sp, #8]
 8004110:	9301      	str	r3, [sp, #4]
 8004112:	2300      	movs	r3, #0
 8004114:	9300      	str	r3, [sp, #0]
 8004116:	2300      	movs	r3, #0
 8004118:	460a      	mov	r2, r1
 800411a:	491f      	ldr	r1, [pc, #124]	@ (8004198 <vTaskStartScheduler+0xac>)
 800411c:	481f      	ldr	r0, [pc, #124]	@ (800419c <vTaskStartScheduler+0xb0>)
 800411e:	f7ff fe18 	bl	8003d52 <xTaskCreateStatic>
 8004122:	4603      	mov	r3, r0
 8004124:	4a1e      	ldr	r2, [pc, #120]	@ (80041a0 <vTaskStartScheduler+0xb4>)
 8004126:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004128:	4b1d      	ldr	r3, [pc, #116]	@ (80041a0 <vTaskStartScheduler+0xb4>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d002      	beq.n	8004136 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004130:	2301      	movs	r3, #1
 8004132:	617b      	str	r3, [r7, #20]
 8004134:	e001      	b.n	800413a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004136:	2300      	movs	r3, #0
 8004138:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d116      	bne.n	800416e <vTaskStartScheduler+0x82>
	__asm volatile
 8004140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004144:	f383 8811 	msr	BASEPRI, r3
 8004148:	f3bf 8f6f 	isb	sy
 800414c:	f3bf 8f4f 	dsb	sy
 8004150:	613b      	str	r3, [r7, #16]
}
 8004152:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004154:	4b13      	ldr	r3, [pc, #76]	@ (80041a4 <vTaskStartScheduler+0xb8>)
 8004156:	f04f 32ff 	mov.w	r2, #4294967295
 800415a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800415c:	4b12      	ldr	r3, [pc, #72]	@ (80041a8 <vTaskStartScheduler+0xbc>)
 800415e:	2201      	movs	r2, #1
 8004160:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004162:	4b12      	ldr	r3, [pc, #72]	@ (80041ac <vTaskStartScheduler+0xc0>)
 8004164:	2200      	movs	r2, #0
 8004166:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004168:	f000 fbaa 	bl	80048c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800416c:	e00f      	b.n	800418e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004174:	d10b      	bne.n	800418e <vTaskStartScheduler+0xa2>
	__asm volatile
 8004176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800417a:	f383 8811 	msr	BASEPRI, r3
 800417e:	f3bf 8f6f 	isb	sy
 8004182:	f3bf 8f4f 	dsb	sy
 8004186:	60fb      	str	r3, [r7, #12]
}
 8004188:	bf00      	nop
 800418a:	bf00      	nop
 800418c:	e7fd      	b.n	800418a <vTaskStartScheduler+0x9e>
}
 800418e:	bf00      	nop
 8004190:	3718      	adds	r7, #24
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	080050c8 	.word	0x080050c8
 800419c:	08004535 	.word	0x08004535
 80041a0:	20000b58 	.word	0x20000b58
 80041a4:	20000b54 	.word	0x20000b54
 80041a8:	20000b40 	.word	0x20000b40
 80041ac:	20000b38 	.word	0x20000b38

080041b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80041b4:	4b04      	ldr	r3, [pc, #16]	@ (80041c8 <vTaskSuspendAll+0x18>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	3301      	adds	r3, #1
 80041ba:	4a03      	ldr	r2, [pc, #12]	@ (80041c8 <vTaskSuspendAll+0x18>)
 80041bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80041be:	bf00      	nop
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr
 80041c8:	20000b5c 	.word	0x20000b5c

080041cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80041d2:	2300      	movs	r3, #0
 80041d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80041d6:	2300      	movs	r3, #0
 80041d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80041da:	4b42      	ldr	r3, [pc, #264]	@ (80042e4 <xTaskResumeAll+0x118>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10b      	bne.n	80041fa <xTaskResumeAll+0x2e>
	__asm volatile
 80041e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041e6:	f383 8811 	msr	BASEPRI, r3
 80041ea:	f3bf 8f6f 	isb	sy
 80041ee:	f3bf 8f4f 	dsb	sy
 80041f2:	603b      	str	r3, [r7, #0]
}
 80041f4:	bf00      	nop
 80041f6:	bf00      	nop
 80041f8:	e7fd      	b.n	80041f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80041fa:	f000 fc05 	bl	8004a08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80041fe:	4b39      	ldr	r3, [pc, #228]	@ (80042e4 <xTaskResumeAll+0x118>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	3b01      	subs	r3, #1
 8004204:	4a37      	ldr	r2, [pc, #220]	@ (80042e4 <xTaskResumeAll+0x118>)
 8004206:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004208:	4b36      	ldr	r3, [pc, #216]	@ (80042e4 <xTaskResumeAll+0x118>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d161      	bne.n	80042d4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004210:	4b35      	ldr	r3, [pc, #212]	@ (80042e8 <xTaskResumeAll+0x11c>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d05d      	beq.n	80042d4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004218:	e02e      	b.n	8004278 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800421a:	4b34      	ldr	r3, [pc, #208]	@ (80042ec <xTaskResumeAll+0x120>)
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	3318      	adds	r3, #24
 8004226:	4618      	mov	r0, r3
 8004228:	f7ff fd69 	bl	8003cfe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	3304      	adds	r3, #4
 8004230:	4618      	mov	r0, r3
 8004232:	f7ff fd64 	bl	8003cfe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800423a:	2201      	movs	r2, #1
 800423c:	409a      	lsls	r2, r3
 800423e:	4b2c      	ldr	r3, [pc, #176]	@ (80042f0 <xTaskResumeAll+0x124>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4313      	orrs	r3, r2
 8004244:	4a2a      	ldr	r2, [pc, #168]	@ (80042f0 <xTaskResumeAll+0x124>)
 8004246:	6013      	str	r3, [r2, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800424c:	4613      	mov	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4413      	add	r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4a27      	ldr	r2, [pc, #156]	@ (80042f4 <xTaskResumeAll+0x128>)
 8004256:	441a      	add	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	3304      	adds	r3, #4
 800425c:	4619      	mov	r1, r3
 800425e:	4610      	mov	r0, r2
 8004260:	f7ff fcf0 	bl	8003c44 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004268:	4b23      	ldr	r3, [pc, #140]	@ (80042f8 <xTaskResumeAll+0x12c>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800426e:	429a      	cmp	r2, r3
 8004270:	d302      	bcc.n	8004278 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004272:	4b22      	ldr	r3, [pc, #136]	@ (80042fc <xTaskResumeAll+0x130>)
 8004274:	2201      	movs	r2, #1
 8004276:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004278:	4b1c      	ldr	r3, [pc, #112]	@ (80042ec <xTaskResumeAll+0x120>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1cc      	bne.n	800421a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004286:	f000 fa0b 	bl	80046a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800428a:	4b1d      	ldr	r3, [pc, #116]	@ (8004300 <xTaskResumeAll+0x134>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d010      	beq.n	80042b8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004296:	f000 f837 	bl	8004308 <xTaskIncrementTick>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d002      	beq.n	80042a6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80042a0:	4b16      	ldr	r3, [pc, #88]	@ (80042fc <xTaskResumeAll+0x130>)
 80042a2:	2201      	movs	r2, #1
 80042a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	3b01      	subs	r3, #1
 80042aa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1f1      	bne.n	8004296 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80042b2:	4b13      	ldr	r3, [pc, #76]	@ (8004300 <xTaskResumeAll+0x134>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80042b8:	4b10      	ldr	r3, [pc, #64]	@ (80042fc <xTaskResumeAll+0x130>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d009      	beq.n	80042d4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80042c0:	2301      	movs	r3, #1
 80042c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80042c4:	4b0f      	ldr	r3, [pc, #60]	@ (8004304 <xTaskResumeAll+0x138>)
 80042c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042ca:	601a      	str	r2, [r3, #0]
 80042cc:	f3bf 8f4f 	dsb	sy
 80042d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80042d4:	f000 fbca 	bl	8004a6c <vPortExitCritical>

	return xAlreadyYielded;
 80042d8:	68bb      	ldr	r3, [r7, #8]
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	20000b5c 	.word	0x20000b5c
 80042e8:	20000b34 	.word	0x20000b34
 80042ec:	20000af4 	.word	0x20000af4
 80042f0:	20000b3c 	.word	0x20000b3c
 80042f4:	20000a38 	.word	0x20000a38
 80042f8:	20000a34 	.word	0x20000a34
 80042fc:	20000b48 	.word	0x20000b48
 8004300:	20000b44 	.word	0x20000b44
 8004304:	e000ed04 	.word	0xe000ed04

08004308 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800430e:	2300      	movs	r3, #0
 8004310:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004312:	4b4f      	ldr	r3, [pc, #316]	@ (8004450 <xTaskIncrementTick+0x148>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	f040 808f 	bne.w	800443a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800431c:	4b4d      	ldr	r3, [pc, #308]	@ (8004454 <xTaskIncrementTick+0x14c>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	3301      	adds	r3, #1
 8004322:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004324:	4a4b      	ldr	r2, [pc, #300]	@ (8004454 <xTaskIncrementTick+0x14c>)
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d121      	bne.n	8004374 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004330:	4b49      	ldr	r3, [pc, #292]	@ (8004458 <xTaskIncrementTick+0x150>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00b      	beq.n	8004352 <xTaskIncrementTick+0x4a>
	__asm volatile
 800433a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800433e:	f383 8811 	msr	BASEPRI, r3
 8004342:	f3bf 8f6f 	isb	sy
 8004346:	f3bf 8f4f 	dsb	sy
 800434a:	603b      	str	r3, [r7, #0]
}
 800434c:	bf00      	nop
 800434e:	bf00      	nop
 8004350:	e7fd      	b.n	800434e <xTaskIncrementTick+0x46>
 8004352:	4b41      	ldr	r3, [pc, #260]	@ (8004458 <xTaskIncrementTick+0x150>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	60fb      	str	r3, [r7, #12]
 8004358:	4b40      	ldr	r3, [pc, #256]	@ (800445c <xTaskIncrementTick+0x154>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a3e      	ldr	r2, [pc, #248]	@ (8004458 <xTaskIncrementTick+0x150>)
 800435e:	6013      	str	r3, [r2, #0]
 8004360:	4a3e      	ldr	r2, [pc, #248]	@ (800445c <xTaskIncrementTick+0x154>)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6013      	str	r3, [r2, #0]
 8004366:	4b3e      	ldr	r3, [pc, #248]	@ (8004460 <xTaskIncrementTick+0x158>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	3301      	adds	r3, #1
 800436c:	4a3c      	ldr	r2, [pc, #240]	@ (8004460 <xTaskIncrementTick+0x158>)
 800436e:	6013      	str	r3, [r2, #0]
 8004370:	f000 f996 	bl	80046a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004374:	4b3b      	ldr	r3, [pc, #236]	@ (8004464 <xTaskIncrementTick+0x15c>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	429a      	cmp	r2, r3
 800437c:	d348      	bcc.n	8004410 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800437e:	4b36      	ldr	r3, [pc, #216]	@ (8004458 <xTaskIncrementTick+0x150>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d104      	bne.n	8004392 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004388:	4b36      	ldr	r3, [pc, #216]	@ (8004464 <xTaskIncrementTick+0x15c>)
 800438a:	f04f 32ff 	mov.w	r2, #4294967295
 800438e:	601a      	str	r2, [r3, #0]
					break;
 8004390:	e03e      	b.n	8004410 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004392:	4b31      	ldr	r3, [pc, #196]	@ (8004458 <xTaskIncrementTick+0x150>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d203      	bcs.n	80043b2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80043aa:	4a2e      	ldr	r2, [pc, #184]	@ (8004464 <xTaskIncrementTick+0x15c>)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80043b0:	e02e      	b.n	8004410 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	3304      	adds	r3, #4
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7ff fca1 	bl	8003cfe <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d004      	beq.n	80043ce <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	3318      	adds	r3, #24
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7ff fc98 	bl	8003cfe <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d2:	2201      	movs	r2, #1
 80043d4:	409a      	lsls	r2, r3
 80043d6:	4b24      	ldr	r3, [pc, #144]	@ (8004468 <xTaskIncrementTick+0x160>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4313      	orrs	r3, r2
 80043dc:	4a22      	ldr	r2, [pc, #136]	@ (8004468 <xTaskIncrementTick+0x160>)
 80043de:	6013      	str	r3, [r2, #0]
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043e4:	4613      	mov	r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4413      	add	r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	4a1f      	ldr	r2, [pc, #124]	@ (800446c <xTaskIncrementTick+0x164>)
 80043ee:	441a      	add	r2, r3
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	3304      	adds	r3, #4
 80043f4:	4619      	mov	r1, r3
 80043f6:	4610      	mov	r0, r2
 80043f8:	f7ff fc24 	bl	8003c44 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004400:	4b1b      	ldr	r3, [pc, #108]	@ (8004470 <xTaskIncrementTick+0x168>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004406:	429a      	cmp	r2, r3
 8004408:	d3b9      	bcc.n	800437e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800440a:	2301      	movs	r3, #1
 800440c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800440e:	e7b6      	b.n	800437e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004410:	4b17      	ldr	r3, [pc, #92]	@ (8004470 <xTaskIncrementTick+0x168>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004416:	4915      	ldr	r1, [pc, #84]	@ (800446c <xTaskIncrementTick+0x164>)
 8004418:	4613      	mov	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4413      	add	r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	440b      	add	r3, r1
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d901      	bls.n	800442c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004428:	2301      	movs	r3, #1
 800442a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800442c:	4b11      	ldr	r3, [pc, #68]	@ (8004474 <xTaskIncrementTick+0x16c>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d007      	beq.n	8004444 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004434:	2301      	movs	r3, #1
 8004436:	617b      	str	r3, [r7, #20]
 8004438:	e004      	b.n	8004444 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800443a:	4b0f      	ldr	r3, [pc, #60]	@ (8004478 <xTaskIncrementTick+0x170>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	3301      	adds	r3, #1
 8004440:	4a0d      	ldr	r2, [pc, #52]	@ (8004478 <xTaskIncrementTick+0x170>)
 8004442:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004444:	697b      	ldr	r3, [r7, #20]
}
 8004446:	4618      	mov	r0, r3
 8004448:	3718      	adds	r7, #24
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	20000b5c 	.word	0x20000b5c
 8004454:	20000b38 	.word	0x20000b38
 8004458:	20000aec 	.word	0x20000aec
 800445c:	20000af0 	.word	0x20000af0
 8004460:	20000b4c 	.word	0x20000b4c
 8004464:	20000b54 	.word	0x20000b54
 8004468:	20000b3c 	.word	0x20000b3c
 800446c:	20000a38 	.word	0x20000a38
 8004470:	20000a34 	.word	0x20000a34
 8004474:	20000b48 	.word	0x20000b48
 8004478:	20000b44 	.word	0x20000b44

0800447c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800447c:	b480      	push	{r7}
 800447e:	b087      	sub	sp, #28
 8004480:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004482:	4b27      	ldr	r3, [pc, #156]	@ (8004520 <vTaskSwitchContext+0xa4>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d003      	beq.n	8004492 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800448a:	4b26      	ldr	r3, [pc, #152]	@ (8004524 <vTaskSwitchContext+0xa8>)
 800448c:	2201      	movs	r2, #1
 800448e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004490:	e040      	b.n	8004514 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004492:	4b24      	ldr	r3, [pc, #144]	@ (8004524 <vTaskSwitchContext+0xa8>)
 8004494:	2200      	movs	r2, #0
 8004496:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004498:	4b23      	ldr	r3, [pc, #140]	@ (8004528 <vTaskSwitchContext+0xac>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	fab3 f383 	clz	r3, r3
 80044a4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80044a6:	7afb      	ldrb	r3, [r7, #11]
 80044a8:	f1c3 031f 	rsb	r3, r3, #31
 80044ac:	617b      	str	r3, [r7, #20]
 80044ae:	491f      	ldr	r1, [pc, #124]	@ (800452c <vTaskSwitchContext+0xb0>)
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	4613      	mov	r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	4413      	add	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	440b      	add	r3, r1
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10b      	bne.n	80044da <vTaskSwitchContext+0x5e>
	__asm volatile
 80044c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c6:	f383 8811 	msr	BASEPRI, r3
 80044ca:	f3bf 8f6f 	isb	sy
 80044ce:	f3bf 8f4f 	dsb	sy
 80044d2:	607b      	str	r3, [r7, #4]
}
 80044d4:	bf00      	nop
 80044d6:	bf00      	nop
 80044d8:	e7fd      	b.n	80044d6 <vTaskSwitchContext+0x5a>
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	4613      	mov	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4a11      	ldr	r2, [pc, #68]	@ (800452c <vTaskSwitchContext+0xb0>)
 80044e6:	4413      	add	r3, r2
 80044e8:	613b      	str	r3, [r7, #16]
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	685a      	ldr	r2, [r3, #4]
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	605a      	str	r2, [r3, #4]
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	3308      	adds	r3, #8
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d104      	bne.n	800450a <vTaskSwitchContext+0x8e>
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	685a      	ldr	r2, [r3, #4]
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	605a      	str	r2, [r3, #4]
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	4a07      	ldr	r2, [pc, #28]	@ (8004530 <vTaskSwitchContext+0xb4>)
 8004512:	6013      	str	r3, [r2, #0]
}
 8004514:	bf00      	nop
 8004516:	371c      	adds	r7, #28
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr
 8004520:	20000b5c 	.word	0x20000b5c
 8004524:	20000b48 	.word	0x20000b48
 8004528:	20000b3c 	.word	0x20000b3c
 800452c:	20000a38 	.word	0x20000a38
 8004530:	20000a34 	.word	0x20000a34

08004534 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800453c:	f000 f852 	bl	80045e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004540:	4b06      	ldr	r3, [pc, #24]	@ (800455c <prvIdleTask+0x28>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d9f9      	bls.n	800453c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004548:	4b05      	ldr	r3, [pc, #20]	@ (8004560 <prvIdleTask+0x2c>)
 800454a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	f3bf 8f4f 	dsb	sy
 8004554:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004558:	e7f0      	b.n	800453c <prvIdleTask+0x8>
 800455a:	bf00      	nop
 800455c:	20000a38 	.word	0x20000a38
 8004560:	e000ed04 	.word	0xe000ed04

08004564 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800456a:	2300      	movs	r3, #0
 800456c:	607b      	str	r3, [r7, #4]
 800456e:	e00c      	b.n	800458a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	4613      	mov	r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4413      	add	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	4a12      	ldr	r2, [pc, #72]	@ (80045c4 <prvInitialiseTaskLists+0x60>)
 800457c:	4413      	add	r3, r2
 800457e:	4618      	mov	r0, r3
 8004580:	f7ff fb33 	bl	8003bea <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	3301      	adds	r3, #1
 8004588:	607b      	str	r3, [r7, #4]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2b06      	cmp	r3, #6
 800458e:	d9ef      	bls.n	8004570 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004590:	480d      	ldr	r0, [pc, #52]	@ (80045c8 <prvInitialiseTaskLists+0x64>)
 8004592:	f7ff fb2a 	bl	8003bea <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004596:	480d      	ldr	r0, [pc, #52]	@ (80045cc <prvInitialiseTaskLists+0x68>)
 8004598:	f7ff fb27 	bl	8003bea <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800459c:	480c      	ldr	r0, [pc, #48]	@ (80045d0 <prvInitialiseTaskLists+0x6c>)
 800459e:	f7ff fb24 	bl	8003bea <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80045a2:	480c      	ldr	r0, [pc, #48]	@ (80045d4 <prvInitialiseTaskLists+0x70>)
 80045a4:	f7ff fb21 	bl	8003bea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80045a8:	480b      	ldr	r0, [pc, #44]	@ (80045d8 <prvInitialiseTaskLists+0x74>)
 80045aa:	f7ff fb1e 	bl	8003bea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80045ae:	4b0b      	ldr	r3, [pc, #44]	@ (80045dc <prvInitialiseTaskLists+0x78>)
 80045b0:	4a05      	ldr	r2, [pc, #20]	@ (80045c8 <prvInitialiseTaskLists+0x64>)
 80045b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80045b4:	4b0a      	ldr	r3, [pc, #40]	@ (80045e0 <prvInitialiseTaskLists+0x7c>)
 80045b6:	4a05      	ldr	r2, [pc, #20]	@ (80045cc <prvInitialiseTaskLists+0x68>)
 80045b8:	601a      	str	r2, [r3, #0]
}
 80045ba:	bf00      	nop
 80045bc:	3708      	adds	r7, #8
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	20000a38 	.word	0x20000a38
 80045c8:	20000ac4 	.word	0x20000ac4
 80045cc:	20000ad8 	.word	0x20000ad8
 80045d0:	20000af4 	.word	0x20000af4
 80045d4:	20000b08 	.word	0x20000b08
 80045d8:	20000b20 	.word	0x20000b20
 80045dc:	20000aec 	.word	0x20000aec
 80045e0:	20000af0 	.word	0x20000af0

080045e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045ea:	e019      	b.n	8004620 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80045ec:	f000 fa0c 	bl	8004a08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045f0:	4b10      	ldr	r3, [pc, #64]	@ (8004634 <prvCheckTasksWaitingTermination+0x50>)
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	3304      	adds	r3, #4
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7ff fb7e 	bl	8003cfe <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004602:	4b0d      	ldr	r3, [pc, #52]	@ (8004638 <prvCheckTasksWaitingTermination+0x54>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	3b01      	subs	r3, #1
 8004608:	4a0b      	ldr	r2, [pc, #44]	@ (8004638 <prvCheckTasksWaitingTermination+0x54>)
 800460a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800460c:	4b0b      	ldr	r3, [pc, #44]	@ (800463c <prvCheckTasksWaitingTermination+0x58>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	3b01      	subs	r3, #1
 8004612:	4a0a      	ldr	r2, [pc, #40]	@ (800463c <prvCheckTasksWaitingTermination+0x58>)
 8004614:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004616:	f000 fa29 	bl	8004a6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f810 	bl	8004640 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004620:	4b06      	ldr	r3, [pc, #24]	@ (800463c <prvCheckTasksWaitingTermination+0x58>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1e1      	bne.n	80045ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004628:	bf00      	nop
 800462a:	bf00      	nop
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	20000b08 	.word	0x20000b08
 8004638:	20000b34 	.word	0x20000b34
 800463c:	20000b1c 	.word	0x20000b1c

08004640 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800464e:	2b00      	cmp	r3, #0
 8004650:	d108      	bne.n	8004664 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004656:	4618      	mov	r0, r3
 8004658:	f000 fb84 	bl	8004d64 <vPortFree>
				vPortFree( pxTCB );
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 fb81 	bl	8004d64 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004662:	e019      	b.n	8004698 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800466a:	2b01      	cmp	r3, #1
 800466c:	d103      	bne.n	8004676 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 fb78 	bl	8004d64 <vPortFree>
	}
 8004674:	e010      	b.n	8004698 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800467c:	2b02      	cmp	r3, #2
 800467e:	d00b      	beq.n	8004698 <prvDeleteTCB+0x58>
	__asm volatile
 8004680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004684:	f383 8811 	msr	BASEPRI, r3
 8004688:	f3bf 8f6f 	isb	sy
 800468c:	f3bf 8f4f 	dsb	sy
 8004690:	60fb      	str	r3, [r7, #12]
}
 8004692:	bf00      	nop
 8004694:	bf00      	nop
 8004696:	e7fd      	b.n	8004694 <prvDeleteTCB+0x54>
	}
 8004698:	bf00      	nop
 800469a:	3710      	adds	r7, #16
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046a6:	4b0c      	ldr	r3, [pc, #48]	@ (80046d8 <prvResetNextTaskUnblockTime+0x38>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d104      	bne.n	80046ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80046b0:	4b0a      	ldr	r3, [pc, #40]	@ (80046dc <prvResetNextTaskUnblockTime+0x3c>)
 80046b2:	f04f 32ff 	mov.w	r2, #4294967295
 80046b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80046b8:	e008      	b.n	80046cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046ba:	4b07      	ldr	r3, [pc, #28]	@ (80046d8 <prvResetNextTaskUnblockTime+0x38>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	4a04      	ldr	r2, [pc, #16]	@ (80046dc <prvResetNextTaskUnblockTime+0x3c>)
 80046ca:	6013      	str	r3, [r2, #0]
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr
 80046d8:	20000aec 	.word	0x20000aec
 80046dc:	20000b54 	.word	0x20000b54

080046e0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80046ea:	4b29      	ldr	r3, [pc, #164]	@ (8004790 <prvAddCurrentTaskToDelayedList+0xb0>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046f0:	4b28      	ldr	r3, [pc, #160]	@ (8004794 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	3304      	adds	r3, #4
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7ff fb01 	bl	8003cfe <uxListRemove>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10b      	bne.n	800471a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004702:	4b24      	ldr	r3, [pc, #144]	@ (8004794 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004708:	2201      	movs	r2, #1
 800470a:	fa02 f303 	lsl.w	r3, r2, r3
 800470e:	43da      	mvns	r2, r3
 8004710:	4b21      	ldr	r3, [pc, #132]	@ (8004798 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4013      	ands	r3, r2
 8004716:	4a20      	ldr	r2, [pc, #128]	@ (8004798 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004718:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004720:	d10a      	bne.n	8004738 <prvAddCurrentTaskToDelayedList+0x58>
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d007      	beq.n	8004738 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004728:	4b1a      	ldr	r3, [pc, #104]	@ (8004794 <prvAddCurrentTaskToDelayedList+0xb4>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	3304      	adds	r3, #4
 800472e:	4619      	mov	r1, r3
 8004730:	481a      	ldr	r0, [pc, #104]	@ (800479c <prvAddCurrentTaskToDelayedList+0xbc>)
 8004732:	f7ff fa87 	bl	8003c44 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004736:	e026      	b.n	8004786 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4413      	add	r3, r2
 800473e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004740:	4b14      	ldr	r3, [pc, #80]	@ (8004794 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004748:	68ba      	ldr	r2, [r7, #8]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	429a      	cmp	r2, r3
 800474e:	d209      	bcs.n	8004764 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004750:	4b13      	ldr	r3, [pc, #76]	@ (80047a0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	4b0f      	ldr	r3, [pc, #60]	@ (8004794 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	3304      	adds	r3, #4
 800475a:	4619      	mov	r1, r3
 800475c:	4610      	mov	r0, r2
 800475e:	f7ff fa95 	bl	8003c8c <vListInsert>
}
 8004762:	e010      	b.n	8004786 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004764:	4b0f      	ldr	r3, [pc, #60]	@ (80047a4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	4b0a      	ldr	r3, [pc, #40]	@ (8004794 <prvAddCurrentTaskToDelayedList+0xb4>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	3304      	adds	r3, #4
 800476e:	4619      	mov	r1, r3
 8004770:	4610      	mov	r0, r2
 8004772:	f7ff fa8b 	bl	8003c8c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004776:	4b0c      	ldr	r3, [pc, #48]	@ (80047a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	429a      	cmp	r2, r3
 800477e:	d202      	bcs.n	8004786 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004780:	4a09      	ldr	r2, [pc, #36]	@ (80047a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	6013      	str	r3, [r2, #0]
}
 8004786:	bf00      	nop
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	20000b38 	.word	0x20000b38
 8004794:	20000a34 	.word	0x20000a34
 8004798:	20000b3c 	.word	0x20000b3c
 800479c:	20000b20 	.word	0x20000b20
 80047a0:	20000af0 	.word	0x20000af0
 80047a4:	20000aec 	.word	0x20000aec
 80047a8:	20000b54 	.word	0x20000b54

080047ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	3b04      	subs	r3, #4
 80047bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80047c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	3b04      	subs	r3, #4
 80047ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	f023 0201 	bic.w	r2, r3, #1
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	3b04      	subs	r3, #4
 80047da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80047dc:	4a0c      	ldr	r2, [pc, #48]	@ (8004810 <pxPortInitialiseStack+0x64>)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	3b14      	subs	r3, #20
 80047e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	3b04      	subs	r3, #4
 80047f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f06f 0202 	mvn.w	r2, #2
 80047fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	3b20      	subs	r3, #32
 8004800:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004802:	68fb      	ldr	r3, [r7, #12]
}
 8004804:	4618      	mov	r0, r3
 8004806:	3714      	adds	r7, #20
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr
 8004810:	08004815 	.word	0x08004815

08004814 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800481a:	2300      	movs	r3, #0
 800481c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800481e:	4b13      	ldr	r3, [pc, #76]	@ (800486c <prvTaskExitError+0x58>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004826:	d00b      	beq.n	8004840 <prvTaskExitError+0x2c>
	__asm volatile
 8004828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800482c:	f383 8811 	msr	BASEPRI, r3
 8004830:	f3bf 8f6f 	isb	sy
 8004834:	f3bf 8f4f 	dsb	sy
 8004838:	60fb      	str	r3, [r7, #12]
}
 800483a:	bf00      	nop
 800483c:	bf00      	nop
 800483e:	e7fd      	b.n	800483c <prvTaskExitError+0x28>
	__asm volatile
 8004840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004844:	f383 8811 	msr	BASEPRI, r3
 8004848:	f3bf 8f6f 	isb	sy
 800484c:	f3bf 8f4f 	dsb	sy
 8004850:	60bb      	str	r3, [r7, #8]
}
 8004852:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004854:	bf00      	nop
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d0fc      	beq.n	8004856 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800485c:	bf00      	nop
 800485e:	bf00      	nop
 8004860:	3714      	adds	r7, #20
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	2000000c 	.word	0x2000000c

08004870 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004870:	4b07      	ldr	r3, [pc, #28]	@ (8004890 <pxCurrentTCBConst2>)
 8004872:	6819      	ldr	r1, [r3, #0]
 8004874:	6808      	ldr	r0, [r1, #0]
 8004876:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800487a:	f380 8809 	msr	PSP, r0
 800487e:	f3bf 8f6f 	isb	sy
 8004882:	f04f 0000 	mov.w	r0, #0
 8004886:	f380 8811 	msr	BASEPRI, r0
 800488a:	4770      	bx	lr
 800488c:	f3af 8000 	nop.w

08004890 <pxCurrentTCBConst2>:
 8004890:	20000a34 	.word	0x20000a34
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004894:	bf00      	nop
 8004896:	bf00      	nop

08004898 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004898:	4808      	ldr	r0, [pc, #32]	@ (80048bc <prvPortStartFirstTask+0x24>)
 800489a:	6800      	ldr	r0, [r0, #0]
 800489c:	6800      	ldr	r0, [r0, #0]
 800489e:	f380 8808 	msr	MSP, r0
 80048a2:	f04f 0000 	mov.w	r0, #0
 80048a6:	f380 8814 	msr	CONTROL, r0
 80048aa:	b662      	cpsie	i
 80048ac:	b661      	cpsie	f
 80048ae:	f3bf 8f4f 	dsb	sy
 80048b2:	f3bf 8f6f 	isb	sy
 80048b6:	df00      	svc	0
 80048b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80048ba:	bf00      	nop
 80048bc:	e000ed08 	.word	0xe000ed08

080048c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b086      	sub	sp, #24
 80048c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80048c6:	4b47      	ldr	r3, [pc, #284]	@ (80049e4 <xPortStartScheduler+0x124>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a47      	ldr	r2, [pc, #284]	@ (80049e8 <xPortStartScheduler+0x128>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d10b      	bne.n	80048e8 <xPortStartScheduler+0x28>
	__asm volatile
 80048d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048d4:	f383 8811 	msr	BASEPRI, r3
 80048d8:	f3bf 8f6f 	isb	sy
 80048dc:	f3bf 8f4f 	dsb	sy
 80048e0:	60fb      	str	r3, [r7, #12]
}
 80048e2:	bf00      	nop
 80048e4:	bf00      	nop
 80048e6:	e7fd      	b.n	80048e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80048e8:	4b3e      	ldr	r3, [pc, #248]	@ (80049e4 <xPortStartScheduler+0x124>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a3f      	ldr	r2, [pc, #252]	@ (80049ec <xPortStartScheduler+0x12c>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d10b      	bne.n	800490a <xPortStartScheduler+0x4a>
	__asm volatile
 80048f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048f6:	f383 8811 	msr	BASEPRI, r3
 80048fa:	f3bf 8f6f 	isb	sy
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	613b      	str	r3, [r7, #16]
}
 8004904:	bf00      	nop
 8004906:	bf00      	nop
 8004908:	e7fd      	b.n	8004906 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800490a:	4b39      	ldr	r3, [pc, #228]	@ (80049f0 <xPortStartScheduler+0x130>)
 800490c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	b2db      	uxtb	r3, r3
 8004914:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	22ff      	movs	r2, #255	@ 0xff
 800491a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	b2db      	uxtb	r3, r3
 8004922:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004924:	78fb      	ldrb	r3, [r7, #3]
 8004926:	b2db      	uxtb	r3, r3
 8004928:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800492c:	b2da      	uxtb	r2, r3
 800492e:	4b31      	ldr	r3, [pc, #196]	@ (80049f4 <xPortStartScheduler+0x134>)
 8004930:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004932:	4b31      	ldr	r3, [pc, #196]	@ (80049f8 <xPortStartScheduler+0x138>)
 8004934:	2207      	movs	r2, #7
 8004936:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004938:	e009      	b.n	800494e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800493a:	4b2f      	ldr	r3, [pc, #188]	@ (80049f8 <xPortStartScheduler+0x138>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	3b01      	subs	r3, #1
 8004940:	4a2d      	ldr	r2, [pc, #180]	@ (80049f8 <xPortStartScheduler+0x138>)
 8004942:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004944:	78fb      	ldrb	r3, [r7, #3]
 8004946:	b2db      	uxtb	r3, r3
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	b2db      	uxtb	r3, r3
 800494c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800494e:	78fb      	ldrb	r3, [r7, #3]
 8004950:	b2db      	uxtb	r3, r3
 8004952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004956:	2b80      	cmp	r3, #128	@ 0x80
 8004958:	d0ef      	beq.n	800493a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800495a:	4b27      	ldr	r3, [pc, #156]	@ (80049f8 <xPortStartScheduler+0x138>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f1c3 0307 	rsb	r3, r3, #7
 8004962:	2b04      	cmp	r3, #4
 8004964:	d00b      	beq.n	800497e <xPortStartScheduler+0xbe>
	__asm volatile
 8004966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800496a:	f383 8811 	msr	BASEPRI, r3
 800496e:	f3bf 8f6f 	isb	sy
 8004972:	f3bf 8f4f 	dsb	sy
 8004976:	60bb      	str	r3, [r7, #8]
}
 8004978:	bf00      	nop
 800497a:	bf00      	nop
 800497c:	e7fd      	b.n	800497a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800497e:	4b1e      	ldr	r3, [pc, #120]	@ (80049f8 <xPortStartScheduler+0x138>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	021b      	lsls	r3, r3, #8
 8004984:	4a1c      	ldr	r2, [pc, #112]	@ (80049f8 <xPortStartScheduler+0x138>)
 8004986:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004988:	4b1b      	ldr	r3, [pc, #108]	@ (80049f8 <xPortStartScheduler+0x138>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004990:	4a19      	ldr	r2, [pc, #100]	@ (80049f8 <xPortStartScheduler+0x138>)
 8004992:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	b2da      	uxtb	r2, r3
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800499c:	4b17      	ldr	r3, [pc, #92]	@ (80049fc <xPortStartScheduler+0x13c>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a16      	ldr	r2, [pc, #88]	@ (80049fc <xPortStartScheduler+0x13c>)
 80049a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80049a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80049a8:	4b14      	ldr	r3, [pc, #80]	@ (80049fc <xPortStartScheduler+0x13c>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a13      	ldr	r2, [pc, #76]	@ (80049fc <xPortStartScheduler+0x13c>)
 80049ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80049b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80049b4:	f000 f8da 	bl	8004b6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80049b8:	4b11      	ldr	r3, [pc, #68]	@ (8004a00 <xPortStartScheduler+0x140>)
 80049ba:	2200      	movs	r2, #0
 80049bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80049be:	f000 f8f9 	bl	8004bb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80049c2:	4b10      	ldr	r3, [pc, #64]	@ (8004a04 <xPortStartScheduler+0x144>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a0f      	ldr	r2, [pc, #60]	@ (8004a04 <xPortStartScheduler+0x144>)
 80049c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80049cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80049ce:	f7ff ff63 	bl	8004898 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80049d2:	f7ff fd53 	bl	800447c <vTaskSwitchContext>
	prvTaskExitError();
 80049d6:	f7ff ff1d 	bl	8004814 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3718      	adds	r7, #24
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	e000ed00 	.word	0xe000ed00
 80049e8:	410fc271 	.word	0x410fc271
 80049ec:	410fc270 	.word	0x410fc270
 80049f0:	e000e400 	.word	0xe000e400
 80049f4:	20000b60 	.word	0x20000b60
 80049f8:	20000b64 	.word	0x20000b64
 80049fc:	e000ed20 	.word	0xe000ed20
 8004a00:	2000000c 	.word	0x2000000c
 8004a04:	e000ef34 	.word	0xe000ef34

08004a08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
	__asm volatile
 8004a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a12:	f383 8811 	msr	BASEPRI, r3
 8004a16:	f3bf 8f6f 	isb	sy
 8004a1a:	f3bf 8f4f 	dsb	sy
 8004a1e:	607b      	str	r3, [r7, #4]
}
 8004a20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004a22:	4b10      	ldr	r3, [pc, #64]	@ (8004a64 <vPortEnterCritical+0x5c>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	3301      	adds	r3, #1
 8004a28:	4a0e      	ldr	r2, [pc, #56]	@ (8004a64 <vPortEnterCritical+0x5c>)
 8004a2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004a2c:	4b0d      	ldr	r3, [pc, #52]	@ (8004a64 <vPortEnterCritical+0x5c>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d110      	bne.n	8004a56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004a34:	4b0c      	ldr	r3, [pc, #48]	@ (8004a68 <vPortEnterCritical+0x60>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00b      	beq.n	8004a56 <vPortEnterCritical+0x4e>
	__asm volatile
 8004a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a42:	f383 8811 	msr	BASEPRI, r3
 8004a46:	f3bf 8f6f 	isb	sy
 8004a4a:	f3bf 8f4f 	dsb	sy
 8004a4e:	603b      	str	r3, [r7, #0]
}
 8004a50:	bf00      	nop
 8004a52:	bf00      	nop
 8004a54:	e7fd      	b.n	8004a52 <vPortEnterCritical+0x4a>
	}
}
 8004a56:	bf00      	nop
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	2000000c 	.word	0x2000000c
 8004a68:	e000ed04 	.word	0xe000ed04

08004a6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004a72:	4b12      	ldr	r3, [pc, #72]	@ (8004abc <vPortExitCritical+0x50>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10b      	bne.n	8004a92 <vPortExitCritical+0x26>
	__asm volatile
 8004a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a7e:	f383 8811 	msr	BASEPRI, r3
 8004a82:	f3bf 8f6f 	isb	sy
 8004a86:	f3bf 8f4f 	dsb	sy
 8004a8a:	607b      	str	r3, [r7, #4]
}
 8004a8c:	bf00      	nop
 8004a8e:	bf00      	nop
 8004a90:	e7fd      	b.n	8004a8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004a92:	4b0a      	ldr	r3, [pc, #40]	@ (8004abc <vPortExitCritical+0x50>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	3b01      	subs	r3, #1
 8004a98:	4a08      	ldr	r2, [pc, #32]	@ (8004abc <vPortExitCritical+0x50>)
 8004a9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004a9c:	4b07      	ldr	r3, [pc, #28]	@ (8004abc <vPortExitCritical+0x50>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d105      	bne.n	8004ab0 <vPortExitCritical+0x44>
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004aae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr
 8004abc:	2000000c 	.word	0x2000000c

08004ac0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ac0:	f3ef 8009 	mrs	r0, PSP
 8004ac4:	f3bf 8f6f 	isb	sy
 8004ac8:	4b15      	ldr	r3, [pc, #84]	@ (8004b20 <pxCurrentTCBConst>)
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	f01e 0f10 	tst.w	lr, #16
 8004ad0:	bf08      	it	eq
 8004ad2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ad6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ada:	6010      	str	r0, [r2, #0]
 8004adc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004ae0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004ae4:	f380 8811 	msr	BASEPRI, r0
 8004ae8:	f3bf 8f4f 	dsb	sy
 8004aec:	f3bf 8f6f 	isb	sy
 8004af0:	f7ff fcc4 	bl	800447c <vTaskSwitchContext>
 8004af4:	f04f 0000 	mov.w	r0, #0
 8004af8:	f380 8811 	msr	BASEPRI, r0
 8004afc:	bc09      	pop	{r0, r3}
 8004afe:	6819      	ldr	r1, [r3, #0]
 8004b00:	6808      	ldr	r0, [r1, #0]
 8004b02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b06:	f01e 0f10 	tst.w	lr, #16
 8004b0a:	bf08      	it	eq
 8004b0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004b10:	f380 8809 	msr	PSP, r0
 8004b14:	f3bf 8f6f 	isb	sy
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	f3af 8000 	nop.w

08004b20 <pxCurrentTCBConst>:
 8004b20:	20000a34 	.word	0x20000a34
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004b24:	bf00      	nop
 8004b26:	bf00      	nop

08004b28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
	__asm volatile
 8004b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b32:	f383 8811 	msr	BASEPRI, r3
 8004b36:	f3bf 8f6f 	isb	sy
 8004b3a:	f3bf 8f4f 	dsb	sy
 8004b3e:	607b      	str	r3, [r7, #4]
}
 8004b40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004b42:	f7ff fbe1 	bl	8004308 <xTaskIncrementTick>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d003      	beq.n	8004b54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004b4c:	4b06      	ldr	r3, [pc, #24]	@ (8004b68 <SysTick_Handler+0x40>)
 8004b4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b52:	601a      	str	r2, [r3, #0]
 8004b54:	2300      	movs	r3, #0
 8004b56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	f383 8811 	msr	BASEPRI, r3
}
 8004b5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004b60:	bf00      	nop
 8004b62:	3708      	adds	r7, #8
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	e000ed04 	.word	0xe000ed04

08004b6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004b70:	4b0b      	ldr	r3, [pc, #44]	@ (8004ba0 <vPortSetupTimerInterrupt+0x34>)
 8004b72:	2200      	movs	r2, #0
 8004b74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004b76:	4b0b      	ldr	r3, [pc, #44]	@ (8004ba4 <vPortSetupTimerInterrupt+0x38>)
 8004b78:	2200      	movs	r2, #0
 8004b7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8004ba8 <vPortSetupTimerInterrupt+0x3c>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a0a      	ldr	r2, [pc, #40]	@ (8004bac <vPortSetupTimerInterrupt+0x40>)
 8004b82:	fba2 2303 	umull	r2, r3, r2, r3
 8004b86:	099b      	lsrs	r3, r3, #6
 8004b88:	4a09      	ldr	r2, [pc, #36]	@ (8004bb0 <vPortSetupTimerInterrupt+0x44>)
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004b8e:	4b04      	ldr	r3, [pc, #16]	@ (8004ba0 <vPortSetupTimerInterrupt+0x34>)
 8004b90:	2207      	movs	r2, #7
 8004b92:	601a      	str	r2, [r3, #0]
}
 8004b94:	bf00      	nop
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	e000e010 	.word	0xe000e010
 8004ba4:	e000e018 	.word	0xe000e018
 8004ba8:	20000000 	.word	0x20000000
 8004bac:	10624dd3 	.word	0x10624dd3
 8004bb0:	e000e014 	.word	0xe000e014

08004bb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004bb4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004bc4 <vPortEnableVFP+0x10>
 8004bb8:	6801      	ldr	r1, [r0, #0]
 8004bba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004bbe:	6001      	str	r1, [r0, #0]
 8004bc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004bc2:	bf00      	nop
 8004bc4:	e000ed88 	.word	0xe000ed88

08004bc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b08a      	sub	sp, #40	@ 0x28
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004bd4:	f7ff faec 	bl	80041b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004bd8:	4b5c      	ldr	r3, [pc, #368]	@ (8004d4c <pvPortMalloc+0x184>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d101      	bne.n	8004be4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004be0:	f000 f924 	bl	8004e2c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004be4:	4b5a      	ldr	r3, [pc, #360]	@ (8004d50 <pvPortMalloc+0x188>)
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4013      	ands	r3, r2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f040 8095 	bne.w	8004d1c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d01e      	beq.n	8004c36 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004bf8:	2208      	movs	r2, #8
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f003 0307 	and.w	r3, r3, #7
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d015      	beq.n	8004c36 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f023 0307 	bic.w	r3, r3, #7
 8004c10:	3308      	adds	r3, #8
 8004c12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f003 0307 	and.w	r3, r3, #7
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00b      	beq.n	8004c36 <pvPortMalloc+0x6e>
	__asm volatile
 8004c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c22:	f383 8811 	msr	BASEPRI, r3
 8004c26:	f3bf 8f6f 	isb	sy
 8004c2a:	f3bf 8f4f 	dsb	sy
 8004c2e:	617b      	str	r3, [r7, #20]
}
 8004c30:	bf00      	nop
 8004c32:	bf00      	nop
 8004c34:	e7fd      	b.n	8004c32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d06f      	beq.n	8004d1c <pvPortMalloc+0x154>
 8004c3c:	4b45      	ldr	r3, [pc, #276]	@ (8004d54 <pvPortMalloc+0x18c>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d86a      	bhi.n	8004d1c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004c46:	4b44      	ldr	r3, [pc, #272]	@ (8004d58 <pvPortMalloc+0x190>)
 8004c48:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004c4a:	4b43      	ldr	r3, [pc, #268]	@ (8004d58 <pvPortMalloc+0x190>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c50:	e004      	b.n	8004c5c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c54:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d903      	bls.n	8004c6e <pvPortMalloc+0xa6>
 8004c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1f1      	bne.n	8004c52 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004c6e:	4b37      	ldr	r3, [pc, #220]	@ (8004d4c <pvPortMalloc+0x184>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d051      	beq.n	8004d1c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004c78:	6a3b      	ldr	r3, [r7, #32]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2208      	movs	r2, #8
 8004c7e:	4413      	add	r3, r2
 8004c80:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	6a3b      	ldr	r3, [r7, #32]
 8004c88:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c8c:	685a      	ldr	r2, [r3, #4]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	1ad2      	subs	r2, r2, r3
 8004c92:	2308      	movs	r3, #8
 8004c94:	005b      	lsls	r3, r3, #1
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d920      	bls.n	8004cdc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004c9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	f003 0307 	and.w	r3, r3, #7
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00b      	beq.n	8004cc4 <pvPortMalloc+0xfc>
	__asm volatile
 8004cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cb0:	f383 8811 	msr	BASEPRI, r3
 8004cb4:	f3bf 8f6f 	isb	sy
 8004cb8:	f3bf 8f4f 	dsb	sy
 8004cbc:	613b      	str	r3, [r7, #16]
}
 8004cbe:	bf00      	nop
 8004cc0:	bf00      	nop
 8004cc2:	e7fd      	b.n	8004cc0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	1ad2      	subs	r2, r2, r3
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004cd6:	69b8      	ldr	r0, [r7, #24]
 8004cd8:	f000 f90a 	bl	8004ef0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004cdc:	4b1d      	ldr	r3, [pc, #116]	@ (8004d54 <pvPortMalloc+0x18c>)
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	4a1b      	ldr	r2, [pc, #108]	@ (8004d54 <pvPortMalloc+0x18c>)
 8004ce8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004cea:	4b1a      	ldr	r3, [pc, #104]	@ (8004d54 <pvPortMalloc+0x18c>)
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	4b1b      	ldr	r3, [pc, #108]	@ (8004d5c <pvPortMalloc+0x194>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d203      	bcs.n	8004cfe <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004cf6:	4b17      	ldr	r3, [pc, #92]	@ (8004d54 <pvPortMalloc+0x18c>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a18      	ldr	r2, [pc, #96]	@ (8004d5c <pvPortMalloc+0x194>)
 8004cfc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d00:	685a      	ldr	r2, [r3, #4]
 8004d02:	4b13      	ldr	r3, [pc, #76]	@ (8004d50 <pvPortMalloc+0x188>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	431a      	orrs	r2, r3
 8004d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0e:	2200      	movs	r2, #0
 8004d10:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004d12:	4b13      	ldr	r3, [pc, #76]	@ (8004d60 <pvPortMalloc+0x198>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	3301      	adds	r3, #1
 8004d18:	4a11      	ldr	r2, [pc, #68]	@ (8004d60 <pvPortMalloc+0x198>)
 8004d1a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004d1c:	f7ff fa56 	bl	80041cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	f003 0307 	and.w	r3, r3, #7
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00b      	beq.n	8004d42 <pvPortMalloc+0x17a>
	__asm volatile
 8004d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d2e:	f383 8811 	msr	BASEPRI, r3
 8004d32:	f3bf 8f6f 	isb	sy
 8004d36:	f3bf 8f4f 	dsb	sy
 8004d3a:	60fb      	str	r3, [r7, #12]
}
 8004d3c:	bf00      	nop
 8004d3e:	bf00      	nop
 8004d40:	e7fd      	b.n	8004d3e <pvPortMalloc+0x176>
	return pvReturn;
 8004d42:	69fb      	ldr	r3, [r7, #28]
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3728      	adds	r7, #40	@ 0x28
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	20004770 	.word	0x20004770
 8004d50:	20004784 	.word	0x20004784
 8004d54:	20004774 	.word	0x20004774
 8004d58:	20004768 	.word	0x20004768
 8004d5c:	20004778 	.word	0x20004778
 8004d60:	2000477c 	.word	0x2000477c

08004d64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d04f      	beq.n	8004e16 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004d76:	2308      	movs	r3, #8
 8004d78:	425b      	negs	r3, r3
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	685a      	ldr	r2, [r3, #4]
 8004d88:	4b25      	ldr	r3, [pc, #148]	@ (8004e20 <vPortFree+0xbc>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d10b      	bne.n	8004daa <vPortFree+0x46>
	__asm volatile
 8004d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d96:	f383 8811 	msr	BASEPRI, r3
 8004d9a:	f3bf 8f6f 	isb	sy
 8004d9e:	f3bf 8f4f 	dsb	sy
 8004da2:	60fb      	str	r3, [r7, #12]
}
 8004da4:	bf00      	nop
 8004da6:	bf00      	nop
 8004da8:	e7fd      	b.n	8004da6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00b      	beq.n	8004dca <vPortFree+0x66>
	__asm volatile
 8004db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004db6:	f383 8811 	msr	BASEPRI, r3
 8004dba:	f3bf 8f6f 	isb	sy
 8004dbe:	f3bf 8f4f 	dsb	sy
 8004dc2:	60bb      	str	r3, [r7, #8]
}
 8004dc4:	bf00      	nop
 8004dc6:	bf00      	nop
 8004dc8:	e7fd      	b.n	8004dc6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	685a      	ldr	r2, [r3, #4]
 8004dce:	4b14      	ldr	r3, [pc, #80]	@ (8004e20 <vPortFree+0xbc>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d01e      	beq.n	8004e16 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d11a      	bne.n	8004e16 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	4b0e      	ldr	r3, [pc, #56]	@ (8004e20 <vPortFree+0xbc>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	43db      	mvns	r3, r3
 8004dea:	401a      	ands	r2, r3
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004df0:	f7ff f9de 	bl	80041b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	685a      	ldr	r2, [r3, #4]
 8004df8:	4b0a      	ldr	r3, [pc, #40]	@ (8004e24 <vPortFree+0xc0>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	4a09      	ldr	r2, [pc, #36]	@ (8004e24 <vPortFree+0xc0>)
 8004e00:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004e02:	6938      	ldr	r0, [r7, #16]
 8004e04:	f000 f874 	bl	8004ef0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004e08:	4b07      	ldr	r3, [pc, #28]	@ (8004e28 <vPortFree+0xc4>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	4a06      	ldr	r2, [pc, #24]	@ (8004e28 <vPortFree+0xc4>)
 8004e10:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004e12:	f7ff f9db 	bl	80041cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004e16:	bf00      	nop
 8004e18:	3718      	adds	r7, #24
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	20004784 	.word	0x20004784
 8004e24:	20004774 	.word	0x20004774
 8004e28:	20004780 	.word	0x20004780

08004e2c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004e32:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004e36:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004e38:	4b27      	ldr	r3, [pc, #156]	@ (8004ed8 <prvHeapInit+0xac>)
 8004e3a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f003 0307 	and.w	r3, r3, #7
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00c      	beq.n	8004e60 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	3307      	adds	r3, #7
 8004e4a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f023 0307 	bic.w	r3, r3, #7
 8004e52:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004e54:	68ba      	ldr	r2, [r7, #8]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	4a1f      	ldr	r2, [pc, #124]	@ (8004ed8 <prvHeapInit+0xac>)
 8004e5c:	4413      	add	r3, r2
 8004e5e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004e64:	4a1d      	ldr	r2, [pc, #116]	@ (8004edc <prvHeapInit+0xb0>)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004e6a:	4b1c      	ldr	r3, [pc, #112]	@ (8004edc <prvHeapInit+0xb0>)
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68ba      	ldr	r2, [r7, #8]
 8004e74:	4413      	add	r3, r2
 8004e76:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004e78:	2208      	movs	r2, #8
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	1a9b      	subs	r3, r3, r2
 8004e7e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f023 0307 	bic.w	r3, r3, #7
 8004e86:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	4a15      	ldr	r2, [pc, #84]	@ (8004ee0 <prvHeapInit+0xb4>)
 8004e8c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004e8e:	4b14      	ldr	r3, [pc, #80]	@ (8004ee0 <prvHeapInit+0xb4>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2200      	movs	r2, #0
 8004e94:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004e96:	4b12      	ldr	r3, [pc, #72]	@ (8004ee0 <prvHeapInit+0xb4>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	1ad2      	subs	r2, r2, r3
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004eac:	4b0c      	ldr	r3, [pc, #48]	@ (8004ee0 <prvHeapInit+0xb4>)
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	4a0a      	ldr	r2, [pc, #40]	@ (8004ee4 <prvHeapInit+0xb8>)
 8004eba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	4a09      	ldr	r2, [pc, #36]	@ (8004ee8 <prvHeapInit+0xbc>)
 8004ec2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004ec4:	4b09      	ldr	r3, [pc, #36]	@ (8004eec <prvHeapInit+0xc0>)
 8004ec6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004eca:	601a      	str	r2, [r3, #0]
}
 8004ecc:	bf00      	nop
 8004ece:	3714      	adds	r7, #20
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr
 8004ed8:	20000b68 	.word	0x20000b68
 8004edc:	20004768 	.word	0x20004768
 8004ee0:	20004770 	.word	0x20004770
 8004ee4:	20004778 	.word	0x20004778
 8004ee8:	20004774 	.word	0x20004774
 8004eec:	20004784 	.word	0x20004784

08004ef0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004ef8:	4b28      	ldr	r3, [pc, #160]	@ (8004f9c <prvInsertBlockIntoFreeList+0xac>)
 8004efa:	60fb      	str	r3, [r7, #12]
 8004efc:	e002      	b.n	8004f04 <prvInsertBlockIntoFreeList+0x14>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	60fb      	str	r3, [r7, #12]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d8f7      	bhi.n	8004efe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	68ba      	ldr	r2, [r7, #8]
 8004f18:	4413      	add	r3, r2
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d108      	bne.n	8004f32 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	441a      	add	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	68ba      	ldr	r2, [r7, #8]
 8004f3c:	441a      	add	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d118      	bne.n	8004f78 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	4b15      	ldr	r3, [pc, #84]	@ (8004fa0 <prvInsertBlockIntoFreeList+0xb0>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d00d      	beq.n	8004f6e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685a      	ldr	r2, [r3, #4]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	441a      	add	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	601a      	str	r2, [r3, #0]
 8004f6c:	e008      	b.n	8004f80 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8004fa0 <prvInsertBlockIntoFreeList+0xb0>)
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	601a      	str	r2, [r3, #0]
 8004f76:	e003      	b.n	8004f80 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d002      	beq.n	8004f8e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f8e:	bf00      	nop
 8004f90:	3714      	adds	r7, #20
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	20004768 	.word	0x20004768
 8004fa0:	20004770 	.word	0x20004770

08004fa4 <memset>:
 8004fa4:	4402      	add	r2, r0
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d100      	bne.n	8004fae <memset+0xa>
 8004fac:	4770      	bx	lr
 8004fae:	f803 1b01 	strb.w	r1, [r3], #1
 8004fb2:	e7f9      	b.n	8004fa8 <memset+0x4>

08004fb4 <__libc_init_array>:
 8004fb4:	b570      	push	{r4, r5, r6, lr}
 8004fb6:	4d0d      	ldr	r5, [pc, #52]	@ (8004fec <__libc_init_array+0x38>)
 8004fb8:	4c0d      	ldr	r4, [pc, #52]	@ (8004ff0 <__libc_init_array+0x3c>)
 8004fba:	1b64      	subs	r4, r4, r5
 8004fbc:	10a4      	asrs	r4, r4, #2
 8004fbe:	2600      	movs	r6, #0
 8004fc0:	42a6      	cmp	r6, r4
 8004fc2:	d109      	bne.n	8004fd8 <__libc_init_array+0x24>
 8004fc4:	4d0b      	ldr	r5, [pc, #44]	@ (8004ff4 <__libc_init_array+0x40>)
 8004fc6:	4c0c      	ldr	r4, [pc, #48]	@ (8004ff8 <__libc_init_array+0x44>)
 8004fc8:	f000 f818 	bl	8004ffc <_init>
 8004fcc:	1b64      	subs	r4, r4, r5
 8004fce:	10a4      	asrs	r4, r4, #2
 8004fd0:	2600      	movs	r6, #0
 8004fd2:	42a6      	cmp	r6, r4
 8004fd4:	d105      	bne.n	8004fe2 <__libc_init_array+0x2e>
 8004fd6:	bd70      	pop	{r4, r5, r6, pc}
 8004fd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fdc:	4798      	blx	r3
 8004fde:	3601      	adds	r6, #1
 8004fe0:	e7ee      	b.n	8004fc0 <__libc_init_array+0xc>
 8004fe2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fe6:	4798      	blx	r3
 8004fe8:	3601      	adds	r6, #1
 8004fea:	e7f2      	b.n	8004fd2 <__libc_init_array+0x1e>
 8004fec:	080050f0 	.word	0x080050f0
 8004ff0:	080050f0 	.word	0x080050f0
 8004ff4:	080050f0 	.word	0x080050f0
 8004ff8:	080050f4 	.word	0x080050f4

08004ffc <_init>:
 8004ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ffe:	bf00      	nop
 8005000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005002:	bc08      	pop	{r3}
 8005004:	469e      	mov	lr, r3
 8005006:	4770      	bx	lr

08005008 <_fini>:
 8005008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800500a:	bf00      	nop
 800500c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800500e:	bc08      	pop	{r3}
 8005010:	469e      	mov	lr, r3
 8005012:	4770      	bx	lr
