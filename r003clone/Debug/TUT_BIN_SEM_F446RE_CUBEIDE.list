
TUT_BIN_SEM_F446RE_CUBEIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054f8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  080056c8  080056c8  000066c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800587c  0800587c  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  0800587c  0800587c  0000687c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005884  08005884  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005884  08005884  00006884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005888  08005888  00006888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800588c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004050  20000010  0800589c  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004060  0800589c  00007060  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011316  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f5f  00000000  00000000  00018356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a0  00000000  00000000  0001b2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d79  00000000  00000000  0001c458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022cec  00000000  00000000  0001d1d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012e3c  00000000  00000000  0003febd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6ef5  00000000  00000000  00052cf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00129bee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004904  00000000  00000000  00129c34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  0012e538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080056b0 	.word	0x080056b0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	080056b0 	.word	0x080056b0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	60f8      	str	r0, [r7, #12]
 8000554:	60b9      	str	r1, [r7, #8]
 8000556:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	4a07      	ldr	r2, [pc, #28]	@ (8000578 <vApplicationGetIdleTaskMemory+0x2c>)
 800055c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800055e:	68bb      	ldr	r3, [r7, #8]
 8000560:	4a06      	ldr	r2, [pc, #24]	@ (800057c <vApplicationGetIdleTaskMemory+0x30>)
 8000562:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	2280      	movs	r2, #128	@ 0x80
 8000568:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800056a:	bf00      	nop
 800056c:	3714      	adds	r7, #20
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	2000002c 	.word	0x2000002c
 800057c:	20000080 	.word	0x20000080

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b5b0      	push	{r4, r5, r7, lr}
 8000582:	b098      	sub	sp, #96	@ 0x60
 8000584:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f000 fb49 	bl	8000c1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f85b 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 f8f5 	bl	800077c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000592:	f000 f8c9 	bl	8000728 <MX_USART3_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of BinSem */
  osSemaphoreDef(BinSem);
 8000596:	2300      	movs	r3, #0
 8000598:	65bb      	str	r3, [r7, #88]	@ 0x58
 800059a:	2300      	movs	r3, #0
 800059c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  BinSemHandle = osSemaphoreCreate(osSemaphore(BinSem), 1);
 800059e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80005a2:	2101      	movs	r1, #1
 80005a4:	4618      	mov	r0, r3
 80005a6:	f002 fcfe 	bl	8002fa6 <osSemaphoreCreate>
 80005aa:	4603      	mov	r3, r0
 80005ac:	4a1e      	ldr	r2, [pc, #120]	@ (8000628 <main+0xa8>)
 80005ae:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of NormalTask */
  osThreadDef(NormalTask, Startnormaltask, osPriorityNormal, 0, 128);
 80005b0:	4b1e      	ldr	r3, [pc, #120]	@ (800062c <main+0xac>)
 80005b2:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80005b6:	461d      	mov	r5, r3
 80005b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  NormalTaskHandle = osThreadCreate(osThread(NormalTask), NULL);
 80005c4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f002 fc8b 	bl	8002ee6 <osThreadCreate>
 80005d0:	4603      	mov	r3, r0
 80005d2:	4a17      	ldr	r2, [pc, #92]	@ (8000630 <main+0xb0>)
 80005d4:	6013      	str	r3, [r2, #0]

  /* definition and creation of HighTask */
  osThreadDef(HighTask, Starthightask, osPriorityAboveNormal, 0, 128);
 80005d6:	4b17      	ldr	r3, [pc, #92]	@ (8000634 <main+0xb4>)
 80005d8:	f107 0420 	add.w	r4, r7, #32
 80005dc:	461d      	mov	r5, r3
 80005de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HighTaskHandle = osThreadCreate(osThread(HighTask), NULL);
 80005ea:	f107 0320 	add.w	r3, r7, #32
 80005ee:	2100      	movs	r1, #0
 80005f0:	4618      	mov	r0, r3
 80005f2:	f002 fc78 	bl	8002ee6 <osThreadCreate>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a0f      	ldr	r2, [pc, #60]	@ (8000638 <main+0xb8>)
 80005fa:	6013      	str	r3, [r2, #0]

  /* definition and creation of LowTask */
  osThreadDef(LowTask, Startlowtask, osPriorityBelowNormal, 0, 128);
 80005fc:	4b0f      	ldr	r3, [pc, #60]	@ (800063c <main+0xbc>)
 80005fe:	1d3c      	adds	r4, r7, #4
 8000600:	461d      	mov	r5, r3
 8000602:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000604:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000606:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800060a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LowTaskHandle = osThreadCreate(osThread(LowTask), NULL);
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f002 fc67 	bl	8002ee6 <osThreadCreate>
 8000618:	4603      	mov	r3, r0
 800061a:	4a09      	ldr	r2, [pc, #36]	@ (8000640 <main+0xc0>)
 800061c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800061e:	f002 fc5b 	bl	8002ed8 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000622:	bf00      	nop
 8000624:	e7fd      	b.n	8000622 <main+0xa2>
 8000626:	bf00      	nop
 8000628:	200002cc 	.word	0x200002cc
 800062c:	080056d4 	.word	0x080056d4
 8000630:	200002c0 	.word	0x200002c0
 8000634:	080056fc 	.word	0x080056fc
 8000638:	200002c4 	.word	0x200002c4
 800063c:	08005720 	.word	0x08005720
 8000640:	200002c8 	.word	0x200002c8

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	@ 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 031c 	add.w	r3, r7, #28
 800064e:	2234      	movs	r2, #52	@ 0x34
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f004 fff2 	bl	800563c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 0308 	add.w	r3, r7, #8
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	4b2c      	ldr	r3, [pc, #176]	@ (8000720 <SystemClock_Config+0xdc>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000670:	4a2b      	ldr	r2, [pc, #172]	@ (8000720 <SystemClock_Config+0xdc>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	@ 0x40
 8000678:	4b29      	ldr	r3, [pc, #164]	@ (8000720 <SystemClock_Config+0xdc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000684:	2300      	movs	r3, #0
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	4b26      	ldr	r3, [pc, #152]	@ (8000724 <SystemClock_Config+0xe0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a25      	ldr	r2, [pc, #148]	@ (8000724 <SystemClock_Config+0xe0>)
 800068e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	4b23      	ldr	r3, [pc, #140]	@ (8000724 <SystemClock_Config+0xe0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800069c:	603b      	str	r3, [r7, #0]
 800069e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a0:	2301      	movs	r3, #1
 80006a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006b4:	2304      	movs	r3, #4
 80006b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006b8:	23b4      	movs	r3, #180	@ 0xb4
 80006ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006bc:	2302      	movs	r3, #2
 80006be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 031c 	add.w	r3, r7, #28
 80006cc:	4618      	mov	r0, r3
 80006ce:	f001 f941 	bl	8001954 <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006d8:	f000 f966 	bl	80009a8 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006dc:	f000 fd6e 	bl	80011bc <HAL_PWREx_EnableOverDrive>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006e6:	f000 f95f 	bl	80009a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ea:	230f      	movs	r3, #15
 80006ec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ee:	2302      	movs	r3, #2
 80006f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000700:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000702:	f107 0308 	add.w	r3, r7, #8
 8000706:	2105      	movs	r1, #5
 8000708:	4618      	mov	r0, r3
 800070a:	f000 fda7 	bl	800125c <HAL_RCC_ClockConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000714:	f000 f948 	bl	80009a8 <Error_Handler>
  }
}
 8000718:	bf00      	nop
 800071a:	3750      	adds	r7, #80	@ 0x50
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40023800 	.word	0x40023800
 8000724:	40007000 	.word	0x40007000

08000728 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart2.Instance = USART3;
 800072c:	4b11      	ldr	r3, [pc, #68]	@ (8000774 <MX_USART3_UART_Init+0x4c>)
 800072e:	4a12      	ldr	r2, [pc, #72]	@ (8000778 <MX_USART3_UART_Init+0x50>)
 8000730:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000732:	4b10      	ldr	r3, [pc, #64]	@ (8000774 <MX_USART3_UART_Init+0x4c>)
 8000734:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000738:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800073a:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <MX_USART3_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000740:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <MX_USART3_UART_Init+0x4c>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000746:	4b0b      	ldr	r3, [pc, #44]	@ (8000774 <MX_USART3_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800074c:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <MX_USART3_UART_Init+0x4c>)
 800074e:	220c      	movs	r2, #12
 8000750:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000752:	4b08      	ldr	r3, [pc, #32]	@ (8000774 <MX_USART3_UART_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000758:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <MX_USART3_UART_Init+0x4c>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800075e:	4805      	ldr	r0, [pc, #20]	@ (8000774 <MX_USART3_UART_Init+0x4c>)
 8000760:	f001 fd90 	bl	8002284 <HAL_UART_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800076a:	f000 f91d 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000280 	.word	0x20000280
 8000778:	40004800 	.word	0x40004800

0800077c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b088      	sub	sp, #32
 8000780:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	4b1c      	ldr	r3, [pc, #112]	@ (8000808 <MX_GPIO_Init+0x8c>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	4a1b      	ldr	r2, [pc, #108]	@ (8000808 <MX_GPIO_Init+0x8c>)
 800079c:	f043 0304 	orr.w	r3, r3, #4
 80007a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a2:	4b19      	ldr	r3, [pc, #100]	@ (8000808 <MX_GPIO_Init+0x8c>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	f003 0304 	and.w	r3, r3, #4
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	4b15      	ldr	r3, [pc, #84]	@ (8000808 <MX_GPIO_Init+0x8c>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	4a14      	ldr	r2, [pc, #80]	@ (8000808 <MX_GPIO_Init+0x8c>)
 80007b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007be:	4b12      	ldr	r3, [pc, #72]	@ (8000808 <MX_GPIO_Init+0x8c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	603b      	str	r3, [r7, #0]
 80007ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000808 <MX_GPIO_Init+0x8c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	4a0d      	ldr	r2, [pc, #52]	@ (8000808 <MX_GPIO_Init+0x8c>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007da:	4b0b      	ldr	r3, [pc, #44]	@ (8000808 <MX_GPIO_Init+0x8c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	603b      	str	r3, [r7, #0]
 80007e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ec:	2300      	movs	r3, #0
 80007ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	4619      	mov	r1, r3
 80007fa:	4804      	ldr	r0, [pc, #16]	@ (800080c <MX_GPIO_Init+0x90>)
 80007fc:	f000 fb32 	bl	8000e64 <HAL_GPIO_Init>

}
 8000800:	bf00      	nop
 8000802:	3720      	adds	r7, #32
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40023800 	.word	0x40023800
 800080c:	40020800 	.word	0x40020800

08000810 <Startnormaltask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_Startnormaltask */
void Startnormaltask(void const * argument)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
		char *str1 = "Entered MediumTask\n";
 8000818:	4b0e      	ldr	r3, [pc, #56]	@ (8000854 <Startnormaltask+0x44>)
 800081a:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart2, (uint8_t *) str1, strlen (str1), 100);
 800081c:	68f8      	ldr	r0, [r7, #12]
 800081e:	f7ff fcf7 	bl	8000210 <strlen>
 8000822:	4603      	mov	r3, r0
 8000824:	b29a      	uxth	r2, r3
 8000826:	2364      	movs	r3, #100	@ 0x64
 8000828:	68f9      	ldr	r1, [r7, #12]
 800082a:	480b      	ldr	r0, [pc, #44]	@ (8000858 <Startnormaltask+0x48>)
 800082c:	f001 fd77 	bl	800231e <HAL_UART_Transmit>


		char *str2 = "Leaving MediumTask\n\n";
 8000830:	4b0a      	ldr	r3, [pc, #40]	@ (800085c <Startnormaltask+0x4c>)
 8000832:	60bb      	str	r3, [r7, #8]
		HAL_UART_Transmit(&huart2, (uint8_t *) str2, strlen (str2), 100);
 8000834:	68b8      	ldr	r0, [r7, #8]
 8000836:	f7ff fceb 	bl	8000210 <strlen>
 800083a:	4603      	mov	r3, r0
 800083c:	b29a      	uxth	r2, r3
 800083e:	2364      	movs	r3, #100	@ 0x64
 8000840:	68b9      	ldr	r1, [r7, #8]
 8000842:	4805      	ldr	r0, [pc, #20]	@ (8000858 <Startnormaltask+0x48>)
 8000844:	f001 fd6b 	bl	800231e <HAL_UART_Transmit>
		osDelay(500);
 8000848:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800084c:	f002 fb97 	bl	8002f7e <osDelay>
  {
 8000850:	bf00      	nop
 8000852:	e7e1      	b.n	8000818 <Startnormaltask+0x8>
 8000854:	0800573c 	.word	0x0800573c
 8000858:	20000280 	.word	0x20000280
 800085c:	08005750 	.word	0x08005750

08000860 <Starthightask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Starthightask */
void Starthightask(void const * argument)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Starthightask */

  /* Infinite loop */
  for(;;)
  {
	char *str1 = "Entered HighTask and waiting for Semaphore\n";
 8000868:	4b1a      	ldr	r3, [pc, #104]	@ (80008d4 <Starthightask+0x74>)
 800086a:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(&huart2, (uint8_t *) str1, strlen (str1), 100);
 800086c:	6978      	ldr	r0, [r7, #20]
 800086e:	f7ff fccf 	bl	8000210 <strlen>
 8000872:	4603      	mov	r3, r0
 8000874:	b29a      	uxth	r2, r3
 8000876:	2364      	movs	r3, #100	@ 0x64
 8000878:	6979      	ldr	r1, [r7, #20]
 800087a:	4817      	ldr	r0, [pc, #92]	@ (80008d8 <Starthightask+0x78>)
 800087c:	f001 fd4f 	bl	800231e <HAL_UART_Transmit>

	osSemaphoreWait(BinSemHandle, osWaitForever);
 8000880:	4b16      	ldr	r3, [pc, #88]	@ (80008dc <Starthightask+0x7c>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f04f 31ff 	mov.w	r1, #4294967295
 8000888:	4618      	mov	r0, r3
 800088a:	f002 fbbf 	bl	800300c <osSemaphoreWait>

	char *str3 = "Semaphore acquired by HIGH Task\n";
 800088e:	4b14      	ldr	r3, [pc, #80]	@ (80008e0 <Starthightask+0x80>)
 8000890:	613b      	str	r3, [r7, #16]
	HAL_UART_Transmit(&huart2, (uint8_t *) str3, strlen (str3), 100);
 8000892:	6938      	ldr	r0, [r7, #16]
 8000894:	f7ff fcbc 	bl	8000210 <strlen>
 8000898:	4603      	mov	r3, r0
 800089a:	b29a      	uxth	r2, r3
 800089c:	2364      	movs	r3, #100	@ 0x64
 800089e:	6939      	ldr	r1, [r7, #16]
 80008a0:	480d      	ldr	r0, [pc, #52]	@ (80008d8 <Starthightask+0x78>)
 80008a2:	f001 fd3c 	bl	800231e <HAL_UART_Transmit>

	char *str2 = "Leaving HighTask and releasing Semaphore\n\n";
 80008a6:	4b0f      	ldr	r3, [pc, #60]	@ (80008e4 <Starthightask+0x84>)
 80008a8:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, (uint8_t *) str2, strlen (str2), 100);
 80008aa:	68f8      	ldr	r0, [r7, #12]
 80008ac:	f7ff fcb0 	bl	8000210 <strlen>
 80008b0:	4603      	mov	r3, r0
 80008b2:	b29a      	uxth	r2, r3
 80008b4:	2364      	movs	r3, #100	@ 0x64
 80008b6:	68f9      	ldr	r1, [r7, #12]
 80008b8:	4807      	ldr	r0, [pc, #28]	@ (80008d8 <Starthightask+0x78>)
 80008ba:	f001 fd30 	bl	800231e <HAL_UART_Transmit>

	osSemaphoreRelease(BinSemHandle);
 80008be:	4b07      	ldr	r3, [pc, #28]	@ (80008dc <Starthightask+0x7c>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4618      	mov	r0, r3
 80008c4:	f002 fbf0 	bl	80030a8 <osSemaphoreRelease>
    osDelay(500);
 80008c8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008cc:	f002 fb57 	bl	8002f7e <osDelay>
  {
 80008d0:	bf00      	nop
 80008d2:	e7c9      	b.n	8000868 <Starthightask+0x8>
 80008d4:	08005768 	.word	0x08005768
 80008d8:	20000280 	.word	0x20000280
 80008dc:	200002cc 	.word	0x200002cc
 80008e0:	08005794 	.word	0x08005794
 80008e4:	080057b8 	.word	0x080057b8

080008e8 <Startlowtask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startlowtask */
void Startlowtask(void const * argument)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startlowtask */
  /* Infinite loop */
  for(;;)
  {
		char *str1 = "Entered LOWTask and waiting for semaphore\n";
 80008f0:	4b1e      	ldr	r3, [pc, #120]	@ (800096c <Startlowtask+0x84>)
 80008f2:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(&huart2, (uint8_t *) str1, strlen (str1), 100);
 80008f4:	6978      	ldr	r0, [r7, #20]
 80008f6:	f7ff fc8b 	bl	8000210 <strlen>
 80008fa:	4603      	mov	r3, r0
 80008fc:	b29a      	uxth	r2, r3
 80008fe:	2364      	movs	r3, #100	@ 0x64
 8000900:	6979      	ldr	r1, [r7, #20]
 8000902:	481b      	ldr	r0, [pc, #108]	@ (8000970 <Startlowtask+0x88>)
 8000904:	f001 fd0b 	bl	800231e <HAL_UART_Transmit>

		osSemaphoreWait(BinSemHandle, osWaitForever);
 8000908:	4b1a      	ldr	r3, [pc, #104]	@ (8000974 <Startlowtask+0x8c>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f04f 31ff 	mov.w	r1, #4294967295
 8000910:	4618      	mov	r0, r3
 8000912:	f002 fb7b 	bl	800300c <osSemaphoreWait>

		char *str3 = "Semaphore acquired by LOW Task\n";
 8000916:	4b18      	ldr	r3, [pc, #96]	@ (8000978 <Startlowtask+0x90>)
 8000918:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart2, (uint8_t *) str3, strlen (str3), 100);
 800091a:	6938      	ldr	r0, [r7, #16]
 800091c:	f7ff fc78 	bl	8000210 <strlen>
 8000920:	4603      	mov	r3, r0
 8000922:	b29a      	uxth	r2, r3
 8000924:	2364      	movs	r3, #100	@ 0x64
 8000926:	6939      	ldr	r1, [r7, #16]
 8000928:	4811      	ldr	r0, [pc, #68]	@ (8000970 <Startlowtask+0x88>)
 800092a:	f001 fcf8 	bl	800231e <HAL_UART_Transmit>

		while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13));  // wait till the pin go low
 800092e:	bf00      	nop
 8000930:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000934:	4811      	ldr	r0, [pc, #68]	@ (800097c <Startlowtask+0x94>)
 8000936:	f000 fc29 	bl	800118c <HAL_GPIO_ReadPin>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d1f7      	bne.n	8000930 <Startlowtask+0x48>

		char *str2 = "Leaving LOWTask and releasing Semaphore\n\n";
 8000940:	4b0f      	ldr	r3, [pc, #60]	@ (8000980 <Startlowtask+0x98>)
 8000942:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart2, (uint8_t *) str2, strlen (str2), 100);
 8000944:	68f8      	ldr	r0, [r7, #12]
 8000946:	f7ff fc63 	bl	8000210 <strlen>
 800094a:	4603      	mov	r3, r0
 800094c:	b29a      	uxth	r2, r3
 800094e:	2364      	movs	r3, #100	@ 0x64
 8000950:	68f9      	ldr	r1, [r7, #12]
 8000952:	4807      	ldr	r0, [pc, #28]	@ (8000970 <Startlowtask+0x88>)
 8000954:	f001 fce3 	bl	800231e <HAL_UART_Transmit>

		osSemaphoreRelease(BinSemHandle);
 8000958:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <Startlowtask+0x8c>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4618      	mov	r0, r3
 800095e:	f002 fba3 	bl	80030a8 <osSemaphoreRelease>
		osDelay(500);
 8000962:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000966:	f002 fb0a 	bl	8002f7e <osDelay>
  {
 800096a:	e7c1      	b.n	80008f0 <Startlowtask+0x8>
 800096c:	080057e4 	.word	0x080057e4
 8000970:	20000280 	.word	0x20000280
 8000974:	200002cc 	.word	0x200002cc
 8000978:	08005810 	.word	0x08005810
 800097c:	40020800 	.word	0x40020800
 8000980:	08005830 	.word	0x08005830

08000984 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a04      	ldr	r2, [pc, #16]	@ (80009a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d101      	bne.n	800099a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000996:	f000 f963 	bl	8000c60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40010000 	.word	0x40010000

080009a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
	...

080009b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <HAL_MspInit+0x54>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009c6:	4a11      	ldr	r2, [pc, #68]	@ (8000a0c <HAL_MspInit+0x54>)
 80009c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80009ce:	4b0f      	ldr	r3, [pc, #60]	@ (8000a0c <HAL_MspInit+0x54>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	603b      	str	r3, [r7, #0]
 80009de:	4b0b      	ldr	r3, [pc, #44]	@ (8000a0c <HAL_MspInit+0x54>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e2:	4a0a      	ldr	r2, [pc, #40]	@ (8000a0c <HAL_MspInit+0x54>)
 80009e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ea:	4b08      	ldr	r3, [pc, #32]	@ (8000a0c <HAL_MspInit+0x54>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009f2:	603b      	str	r3, [r7, #0]
 80009f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	210f      	movs	r1, #15
 80009fa:	f06f 0001 	mvn.w	r0, #1
 80009fe:	f000 fa07 	bl	8000e10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800

08000a10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	@ 0x28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a19      	ldr	r2, [pc, #100]	@ (8000a94 <HAL_UART_MspInit+0x84>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d12b      	bne.n	8000a8a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
 8000a36:	4b18      	ldr	r3, [pc, #96]	@ (8000a98 <HAL_UART_MspInit+0x88>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3a:	4a17      	ldr	r2, [pc, #92]	@ (8000a98 <HAL_UART_MspInit+0x88>)
 8000a3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a40:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a42:	4b15      	ldr	r3, [pc, #84]	@ (8000a98 <HAL_UART_MspInit+0x88>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	4b11      	ldr	r3, [pc, #68]	@ (8000a98 <HAL_UART_MspInit+0x88>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	4a10      	ldr	r2, [pc, #64]	@ (8000a98 <HAL_UART_MspInit+0x88>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a98 <HAL_UART_MspInit+0x88>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a6a:	230c      	movs	r3, #12
 8000a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a72:	2301      	movs	r3, #1
 8000a74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a76:	2303      	movs	r3, #3
 8000a78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a7a:	2307      	movs	r3, #7
 8000a7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	4805      	ldr	r0, [pc, #20]	@ (8000a9c <HAL_UART_MspInit+0x8c>)
 8000a86:	f000 f9ed 	bl	8000e64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a8a:	bf00      	nop
 8000a8c:	3728      	adds	r7, #40	@ 0x28
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40004400 	.word	0x40004400
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40020000 	.word	0x40020000

08000aa0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08c      	sub	sp, #48	@ 0x30
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	6879      	ldr	r1, [r7, #4]
 8000ab4:	2019      	movs	r0, #25
 8000ab6:	f000 f9ab 	bl	8000e10 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8000aba:	2019      	movs	r0, #25
 8000abc:	f000 f9c4 	bl	8000e48 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b44 <HAL_InitTick+0xa4>)
 8000ac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ac8:	4a1e      	ldr	r2, [pc, #120]	@ (8000b44 <HAL_InitTick+0xa4>)
 8000aca:	f043 0301 	orr.w	r3, r3, #1
 8000ace:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ad0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b44 <HAL_InitTick+0xa4>)
 8000ad2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000adc:	f107 0210 	add.w	r2, r7, #16
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	4611      	mov	r1, r2
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f000 fcd2 	bl	8001490 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000aec:	f000 fcbc 	bl	8001468 <HAL_RCC_GetPCLK2Freq>
 8000af0:	4603      	mov	r3, r0
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000af8:	4a13      	ldr	r2, [pc, #76]	@ (8000b48 <HAL_InitTick+0xa8>)
 8000afa:	fba2 2303 	umull	r2, r3, r2, r3
 8000afe:	0c9b      	lsrs	r3, r3, #18
 8000b00:	3b01      	subs	r3, #1
 8000b02:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b04:	4b11      	ldr	r3, [pc, #68]	@ (8000b4c <HAL_InitTick+0xac>)
 8000b06:	4a12      	ldr	r2, [pc, #72]	@ (8000b50 <HAL_InitTick+0xb0>)
 8000b08:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000b0a:	4b10      	ldr	r3, [pc, #64]	@ (8000b4c <HAL_InitTick+0xac>)
 8000b0c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b10:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b12:	4a0e      	ldr	r2, [pc, #56]	@ (8000b4c <HAL_InitTick+0xac>)
 8000b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b16:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	@ (8000b4c <HAL_InitTick+0xac>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b4c <HAL_InitTick+0xac>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000b24:	4809      	ldr	r0, [pc, #36]	@ (8000b4c <HAL_InitTick+0xac>)
 8000b26:	f001 f96f 	bl	8001e08 <HAL_TIM_Base_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d104      	bne.n	8000b3a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000b30:	4806      	ldr	r0, [pc, #24]	@ (8000b4c <HAL_InitTick+0xac>)
 8000b32:	f001 f99e 	bl	8001e72 <HAL_TIM_Base_Start_IT>
 8000b36:	4603      	mov	r3, r0
 8000b38:	e000      	b.n	8000b3c <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3730      	adds	r7, #48	@ 0x30
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40023800 	.word	0x40023800
 8000b48:	431bde83 	.word	0x431bde83
 8000b4c:	200002d0 	.word	0x200002d0
 8000b50:	40010000 	.word	0x40010000

08000b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b66:	bf00      	nop
 8000b68:	e7fd      	b.n	8000b66 <HardFault_Handler+0x4>

08000b6a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b6e:	bf00      	nop
 8000b70:	e7fd      	b.n	8000b6e <MemManage_Handler+0x4>

08000b72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b76:	bf00      	nop
 8000b78:	e7fd      	b.n	8000b76 <BusFault_Handler+0x4>

08000b7a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b7e:	bf00      	nop
 8000b80:	e7fd      	b.n	8000b7e <UsageFault_Handler+0x4>

08000b82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b94:	4802      	ldr	r0, [pc, #8]	@ (8000ba0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b96:	f001 f990 	bl	8001eba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	200002d0 	.word	0x200002d0

08000ba4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ba8:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <SystemInit+0x20>)
 8000baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bae:	4a05      	ldr	r2, [pc, #20]	@ (8000bc4 <SystemInit+0x20>)
 8000bb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c00 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000bcc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000bce:	e003      	b.n	8000bd8 <LoopCopyDataInit>

08000bd0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c04 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000bd2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000bd4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000bd6:	3104      	adds	r1, #4

08000bd8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000bd8:	480b      	ldr	r0, [pc, #44]	@ (8000c08 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000bda:	4b0c      	ldr	r3, [pc, #48]	@ (8000c0c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000bdc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000bde:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000be0:	d3f6      	bcc.n	8000bd0 <CopyDataInit>
  ldr  r2, =_sbss
 8000be2:	4a0b      	ldr	r2, [pc, #44]	@ (8000c10 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000be4:	e002      	b.n	8000bec <LoopFillZerobss>

08000be6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000be6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000be8:	f842 3b04 	str.w	r3, [r2], #4

08000bec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000bec:	4b09      	ldr	r3, [pc, #36]	@ (8000c14 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000bee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000bf0:	d3f9      	bcc.n	8000be6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bf2:	f7ff ffd7 	bl	8000ba4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bf6:	f004 fd29 	bl	800564c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bfa:	f7ff fcc1 	bl	8000580 <main>
  bx  lr    
 8000bfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c00:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c04:	0800588c 	.word	0x0800588c
  ldr  r0, =_sdata
 8000c08:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c0c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000c10:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000c14:	20004060 	.word	0x20004060

08000c18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c18:	e7fe      	b.n	8000c18 <ADC_IRQHandler>
	...

08000c1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c20:	4b0e      	ldr	r3, [pc, #56]	@ (8000c5c <HAL_Init+0x40>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a0d      	ldr	r2, [pc, #52]	@ (8000c5c <HAL_Init+0x40>)
 8000c26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c5c <HAL_Init+0x40>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a0a      	ldr	r2, [pc, #40]	@ (8000c5c <HAL_Init+0x40>)
 8000c32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c38:	4b08      	ldr	r3, [pc, #32]	@ (8000c5c <HAL_Init+0x40>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a07      	ldr	r2, [pc, #28]	@ (8000c5c <HAL_Init+0x40>)
 8000c3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c44:	2003      	movs	r0, #3
 8000c46:	f000 f8d8 	bl	8000dfa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f7ff ff28 	bl	8000aa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c50:	f7ff feb2 	bl	80009b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40023c00 	.word	0x40023c00

08000c60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c64:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <HAL_IncTick+0x20>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <HAL_IncTick+0x24>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4413      	add	r3, r2
 8000c70:	4a04      	ldr	r2, [pc, #16]	@ (8000c84 <HAL_IncTick+0x24>)
 8000c72:	6013      	str	r3, [r2, #0]
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	20000008 	.word	0x20000008
 8000c84:	20000310 	.word	0x20000310

08000c88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c8c:	4b03      	ldr	r3, [pc, #12]	@ (8000c9c <HAL_GetTick+0x14>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	20000310 	.word	0x20000310

08000ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	f003 0307 	and.w	r3, r3, #7
 8000cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cb6:	68ba      	ldr	r2, [r7, #8]
 8000cb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ccc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cd2:	4a04      	ldr	r2, [pc, #16]	@ (8000ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	60d3      	str	r3, [r2, #12]
}
 8000cd8:	bf00      	nop
 8000cda:	3714      	adds	r7, #20
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cec:	4b04      	ldr	r3, [pc, #16]	@ (8000d00 <__NVIC_GetPriorityGrouping+0x18>)
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	0a1b      	lsrs	r3, r3, #8
 8000cf2:	f003 0307 	and.w	r3, r3, #7
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	db0b      	blt.n	8000d2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	f003 021f 	and.w	r2, r3, #31
 8000d1c:	4907      	ldr	r1, [pc, #28]	@ (8000d3c <__NVIC_EnableIRQ+0x38>)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	095b      	lsrs	r3, r3, #5
 8000d24:	2001      	movs	r0, #1
 8000d26:	fa00 f202 	lsl.w	r2, r0, r2
 8000d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	e000e100 	.word	0xe000e100

08000d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	6039      	str	r1, [r7, #0]
 8000d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	db0a      	blt.n	8000d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	490c      	ldr	r1, [pc, #48]	@ (8000d8c <__NVIC_SetPriority+0x4c>)
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	0112      	lsls	r2, r2, #4
 8000d60:	b2d2      	uxtb	r2, r2
 8000d62:	440b      	add	r3, r1
 8000d64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d68:	e00a      	b.n	8000d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4908      	ldr	r1, [pc, #32]	@ (8000d90 <__NVIC_SetPriority+0x50>)
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	f003 030f 	and.w	r3, r3, #15
 8000d76:	3b04      	subs	r3, #4
 8000d78:	0112      	lsls	r2, r2, #4
 8000d7a:	b2d2      	uxtb	r2, r2
 8000d7c:	440b      	add	r3, r1
 8000d7e:	761a      	strb	r2, [r3, #24]
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000e100 	.word	0xe000e100
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b089      	sub	sp, #36	@ 0x24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	f1c3 0307 	rsb	r3, r3, #7
 8000dae:	2b04      	cmp	r3, #4
 8000db0:	bf28      	it	cs
 8000db2:	2304      	movcs	r3, #4
 8000db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	3304      	adds	r3, #4
 8000dba:	2b06      	cmp	r3, #6
 8000dbc:	d902      	bls.n	8000dc4 <NVIC_EncodePriority+0x30>
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	3b03      	subs	r3, #3
 8000dc2:	e000      	b.n	8000dc6 <NVIC_EncodePriority+0x32>
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43da      	mvns	r2, r3
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	401a      	ands	r2, r3
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	fa01 f303 	lsl.w	r3, r1, r3
 8000de6:	43d9      	mvns	r1, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dec:	4313      	orrs	r3, r2
         );
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3724      	adds	r7, #36	@ 0x24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f7ff ff4c 	bl	8000ca0 <__NVIC_SetPriorityGrouping>
}
 8000e08:	bf00      	nop
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
 8000e1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e22:	f7ff ff61 	bl	8000ce8 <__NVIC_GetPriorityGrouping>
 8000e26:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	68b9      	ldr	r1, [r7, #8]
 8000e2c:	6978      	ldr	r0, [r7, #20]
 8000e2e:	f7ff ffb1 	bl	8000d94 <NVIC_EncodePriority>
 8000e32:	4602      	mov	r2, r0
 8000e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e38:	4611      	mov	r1, r2
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff ff80 	bl	8000d40 <__NVIC_SetPriority>
}
 8000e40:	bf00      	nop
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff ff54 	bl	8000d04 <__NVIC_EnableIRQ>
}
 8000e5c:	bf00      	nop
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b089      	sub	sp, #36	@ 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e72:	2300      	movs	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
 8000e7e:	e165      	b.n	800114c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e80:	2201      	movs	r2, #1
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	697a      	ldr	r2, [r7, #20]
 8000e90:	4013      	ands	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	f040 8154 	bne.w	8001146 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d00b      	beq.n	8000ebe <HAL_GPIO_Init+0x5a>
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d007      	beq.n	8000ebe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eb2:	2b11      	cmp	r3, #17
 8000eb4:	d003      	beq.n	8000ebe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	2b12      	cmp	r3, #18
 8000ebc:	d130      	bne.n	8000f20 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	2203      	movs	r2, #3
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	68da      	ldr	r2, [r3, #12]
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	091b      	lsrs	r3, r3, #4
 8000f0a:	f003 0201 	and.w	r2, r3, #1
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4013      	ands	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	689a      	ldr	r2, [r3, #8]
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d003      	beq.n	8000f60 <HAL_GPIO_Init+0xfc>
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	2b12      	cmp	r3, #18
 8000f5e:	d123      	bne.n	8000fa8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	08da      	lsrs	r2, r3, #3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3208      	adds	r2, #8
 8000f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	f003 0307 	and.w	r3, r3, #7
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	220f      	movs	r2, #15
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	691a      	ldr	r2, [r3, #16]
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	08da      	lsrs	r2, r3, #3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	3208      	adds	r2, #8
 8000fa2:	69b9      	ldr	r1, [r7, #24]
 8000fa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 0203 	and.w	r2, r3, #3
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	f000 80ae 	beq.w	8001146 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	4b5d      	ldr	r3, [pc, #372]	@ (8001164 <HAL_GPIO_Init+0x300>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff2:	4a5c      	ldr	r2, [pc, #368]	@ (8001164 <HAL_GPIO_Init+0x300>)
 8000ff4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ff8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ffa:	4b5a      	ldr	r3, [pc, #360]	@ (8001164 <HAL_GPIO_Init+0x300>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ffe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001006:	4a58      	ldr	r2, [pc, #352]	@ (8001168 <HAL_GPIO_Init+0x304>)
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	089b      	lsrs	r3, r3, #2
 800100c:	3302      	adds	r3, #2
 800100e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001012:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f003 0303 	and.w	r3, r3, #3
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	220f      	movs	r2, #15
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43db      	mvns	r3, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4013      	ands	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a4f      	ldr	r2, [pc, #316]	@ (800116c <HAL_GPIO_Init+0x308>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d025      	beq.n	800107e <HAL_GPIO_Init+0x21a>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a4e      	ldr	r2, [pc, #312]	@ (8001170 <HAL_GPIO_Init+0x30c>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d01f      	beq.n	800107a <HAL_GPIO_Init+0x216>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a4d      	ldr	r2, [pc, #308]	@ (8001174 <HAL_GPIO_Init+0x310>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d019      	beq.n	8001076 <HAL_GPIO_Init+0x212>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a4c      	ldr	r2, [pc, #304]	@ (8001178 <HAL_GPIO_Init+0x314>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d013      	beq.n	8001072 <HAL_GPIO_Init+0x20e>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a4b      	ldr	r2, [pc, #300]	@ (800117c <HAL_GPIO_Init+0x318>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d00d      	beq.n	800106e <HAL_GPIO_Init+0x20a>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a4a      	ldr	r2, [pc, #296]	@ (8001180 <HAL_GPIO_Init+0x31c>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d007      	beq.n	800106a <HAL_GPIO_Init+0x206>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a49      	ldr	r2, [pc, #292]	@ (8001184 <HAL_GPIO_Init+0x320>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d101      	bne.n	8001066 <HAL_GPIO_Init+0x202>
 8001062:	2306      	movs	r3, #6
 8001064:	e00c      	b.n	8001080 <HAL_GPIO_Init+0x21c>
 8001066:	2307      	movs	r3, #7
 8001068:	e00a      	b.n	8001080 <HAL_GPIO_Init+0x21c>
 800106a:	2305      	movs	r3, #5
 800106c:	e008      	b.n	8001080 <HAL_GPIO_Init+0x21c>
 800106e:	2304      	movs	r3, #4
 8001070:	e006      	b.n	8001080 <HAL_GPIO_Init+0x21c>
 8001072:	2303      	movs	r3, #3
 8001074:	e004      	b.n	8001080 <HAL_GPIO_Init+0x21c>
 8001076:	2302      	movs	r3, #2
 8001078:	e002      	b.n	8001080 <HAL_GPIO_Init+0x21c>
 800107a:	2301      	movs	r3, #1
 800107c:	e000      	b.n	8001080 <HAL_GPIO_Init+0x21c>
 800107e:	2300      	movs	r3, #0
 8001080:	69fa      	ldr	r2, [r7, #28]
 8001082:	f002 0203 	and.w	r2, r2, #3
 8001086:	0092      	lsls	r2, r2, #2
 8001088:	4093      	lsls	r3, r2
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4313      	orrs	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001090:	4935      	ldr	r1, [pc, #212]	@ (8001168 <HAL_GPIO_Init+0x304>)
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	089b      	lsrs	r3, r3, #2
 8001096:	3302      	adds	r3, #2
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800109e:	4b3a      	ldr	r3, [pc, #232]	@ (8001188 <HAL_GPIO_Init+0x324>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	43db      	mvns	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4013      	ands	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010c2:	4a31      	ldr	r2, [pc, #196]	@ (8001188 <HAL_GPIO_Init+0x324>)
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001188 <HAL_GPIO_Init+0x324>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	43db      	mvns	r3, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4013      	ands	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d003      	beq.n	80010ec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010ec:	4a26      	ldr	r2, [pc, #152]	@ (8001188 <HAL_GPIO_Init+0x324>)
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010f2:	4b25      	ldr	r3, [pc, #148]	@ (8001188 <HAL_GPIO_Init+0x324>)
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	43db      	mvns	r3, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4013      	ands	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	4313      	orrs	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001116:	4a1c      	ldr	r2, [pc, #112]	@ (8001188 <HAL_GPIO_Init+0x324>)
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800111c:	4b1a      	ldr	r3, [pc, #104]	@ (8001188 <HAL_GPIO_Init+0x324>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d003      	beq.n	8001140 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001140:	4a11      	ldr	r2, [pc, #68]	@ (8001188 <HAL_GPIO_Init+0x324>)
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3301      	adds	r3, #1
 800114a:	61fb      	str	r3, [r7, #28]
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	2b0f      	cmp	r3, #15
 8001150:	f67f ae96 	bls.w	8000e80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001154:	bf00      	nop
 8001156:	bf00      	nop
 8001158:	3724      	adds	r7, #36	@ 0x24
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	40023800 	.word	0x40023800
 8001168:	40013800 	.word	0x40013800
 800116c:	40020000 	.word	0x40020000
 8001170:	40020400 	.word	0x40020400
 8001174:	40020800 	.word	0x40020800
 8001178:	40020c00 	.word	0x40020c00
 800117c:	40021000 	.word	0x40021000
 8001180:	40021400 	.word	0x40021400
 8001184:	40021800 	.word	0x40021800
 8001188:	40013c00 	.word	0x40013c00

0800118c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	691a      	ldr	r2, [r3, #16]
 800119c:	887b      	ldrh	r3, [r7, #2]
 800119e:	4013      	ands	r3, r2
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d002      	beq.n	80011aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011a4:	2301      	movs	r3, #1
 80011a6:	73fb      	strb	r3, [r7, #15]
 80011a8:	e001      	b.n	80011ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011aa:	2300      	movs	r3, #0
 80011ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	603b      	str	r3, [r7, #0]
 80011ca:	4b20      	ldr	r3, [pc, #128]	@ (800124c <HAL_PWREx_EnableOverDrive+0x90>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ce:	4a1f      	ldr	r2, [pc, #124]	@ (800124c <HAL_PWREx_EnableOverDrive+0x90>)
 80011d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011d6:	4b1d      	ldr	r3, [pc, #116]	@ (800124c <HAL_PWREx_EnableOverDrive+0x90>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011de:	603b      	str	r3, [r7, #0]
 80011e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80011e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001250 <HAL_PWREx_EnableOverDrive+0x94>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011e8:	f7ff fd4e 	bl	8000c88 <HAL_GetTick>
 80011ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80011ee:	e009      	b.n	8001204 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80011f0:	f7ff fd4a 	bl	8000c88 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80011fe:	d901      	bls.n	8001204 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e01f      	b.n	8001244 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001204:	4b13      	ldr	r3, [pc, #76]	@ (8001254 <HAL_PWREx_EnableOverDrive+0x98>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800120c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001210:	d1ee      	bne.n	80011f0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001212:	4b11      	ldr	r3, [pc, #68]	@ (8001258 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001214:	2201      	movs	r2, #1
 8001216:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001218:	f7ff fd36 	bl	8000c88 <HAL_GetTick>
 800121c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800121e:	e009      	b.n	8001234 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001220:	f7ff fd32 	bl	8000c88 <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800122e:	d901      	bls.n	8001234 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e007      	b.n	8001244 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001234:	4b07      	ldr	r3, [pc, #28]	@ (8001254 <HAL_PWREx_EnableOverDrive+0x98>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800123c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001240:	d1ee      	bne.n	8001220 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40023800 	.word	0x40023800
 8001250:	420e0040 	.word	0x420e0040
 8001254:	40007000 	.word	0x40007000
 8001258:	420e0044 	.word	0x420e0044

0800125c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d101      	bne.n	8001270 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	e0cc      	b.n	800140a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001270:	4b68      	ldr	r3, [pc, #416]	@ (8001414 <HAL_RCC_ClockConfig+0x1b8>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 030f 	and.w	r3, r3, #15
 8001278:	683a      	ldr	r2, [r7, #0]
 800127a:	429a      	cmp	r2, r3
 800127c:	d90c      	bls.n	8001298 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800127e:	4b65      	ldr	r3, [pc, #404]	@ (8001414 <HAL_RCC_ClockConfig+0x1b8>)
 8001280:	683a      	ldr	r2, [r7, #0]
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001286:	4b63      	ldr	r3, [pc, #396]	@ (8001414 <HAL_RCC_ClockConfig+0x1b8>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 030f 	and.w	r3, r3, #15
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	429a      	cmp	r2, r3
 8001292:	d001      	beq.n	8001298 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e0b8      	b.n	800140a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 0302 	and.w	r3, r3, #2
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d020      	beq.n	80012e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d005      	beq.n	80012bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012b0:	4b59      	ldr	r3, [pc, #356]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	4a58      	ldr	r2, [pc, #352]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80012b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80012ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0308 	and.w	r3, r3, #8
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d005      	beq.n	80012d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012c8:	4b53      	ldr	r3, [pc, #332]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	4a52      	ldr	r2, [pc, #328]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80012ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80012d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012d4:	4b50      	ldr	r3, [pc, #320]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	494d      	ldr	r1, [pc, #308]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80012e2:	4313      	orrs	r3, r2
 80012e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d044      	beq.n	800137c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d107      	bne.n	800130a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fa:	4b47      	ldr	r3, [pc, #284]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d119      	bne.n	800133a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e07f      	b.n	800140a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	2b02      	cmp	r3, #2
 8001310:	d003      	beq.n	800131a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001316:	2b03      	cmp	r3, #3
 8001318:	d107      	bne.n	800132a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800131a:	4b3f      	ldr	r3, [pc, #252]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d109      	bne.n	800133a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e06f      	b.n	800140a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800132a:	4b3b      	ldr	r3, [pc, #236]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d101      	bne.n	800133a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e067      	b.n	800140a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800133a:	4b37      	ldr	r3, [pc, #220]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f023 0203 	bic.w	r2, r3, #3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	4934      	ldr	r1, [pc, #208]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 8001348:	4313      	orrs	r3, r2
 800134a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800134c:	f7ff fc9c 	bl	8000c88 <HAL_GetTick>
 8001350:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001352:	e00a      	b.n	800136a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001354:	f7ff fc98 	bl	8000c88 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001362:	4293      	cmp	r3, r2
 8001364:	d901      	bls.n	800136a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e04f      	b.n	800140a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800136a:	4b2b      	ldr	r3, [pc, #172]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f003 020c 	and.w	r2, r3, #12
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	429a      	cmp	r2, r3
 800137a:	d1eb      	bne.n	8001354 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800137c:	4b25      	ldr	r3, [pc, #148]	@ (8001414 <HAL_RCC_ClockConfig+0x1b8>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 030f 	and.w	r3, r3, #15
 8001384:	683a      	ldr	r2, [r7, #0]
 8001386:	429a      	cmp	r2, r3
 8001388:	d20c      	bcs.n	80013a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800138a:	4b22      	ldr	r3, [pc, #136]	@ (8001414 <HAL_RCC_ClockConfig+0x1b8>)
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	b2d2      	uxtb	r2, r2
 8001390:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001392:	4b20      	ldr	r3, [pc, #128]	@ (8001414 <HAL_RCC_ClockConfig+0x1b8>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	429a      	cmp	r2, r3
 800139e:	d001      	beq.n	80013a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e032      	b.n	800140a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d008      	beq.n	80013c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013b0:	4b19      	ldr	r3, [pc, #100]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	4916      	ldr	r1, [pc, #88]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80013be:	4313      	orrs	r3, r2
 80013c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d009      	beq.n	80013e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013ce:	4b12      	ldr	r3, [pc, #72]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	691b      	ldr	r3, [r3, #16]
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	490e      	ldr	r1, [pc, #56]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80013de:	4313      	orrs	r3, r2
 80013e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013e2:	f000 f887 	bl	80014f4 <HAL_RCC_GetSysClockFreq>
 80013e6:	4602      	mov	r2, r0
 80013e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	091b      	lsrs	r3, r3, #4
 80013ee:	f003 030f 	and.w	r3, r3, #15
 80013f2:	490a      	ldr	r1, [pc, #40]	@ (800141c <HAL_RCC_ClockConfig+0x1c0>)
 80013f4:	5ccb      	ldrb	r3, [r1, r3]
 80013f6:	fa22 f303 	lsr.w	r3, r2, r3
 80013fa:	4a09      	ldr	r2, [pc, #36]	@ (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 80013fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80013fe:	4b09      	ldr	r3, [pc, #36]	@ (8001424 <HAL_RCC_ClockConfig+0x1c8>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff fb4c 	bl	8000aa0 <HAL_InitTick>

  return HAL_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40023c00 	.word	0x40023c00
 8001418:	40023800 	.word	0x40023800
 800141c:	08005864 	.word	0x08005864
 8001420:	20000000 	.word	0x20000000
 8001424:	20000004 	.word	0x20000004

08001428 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800142c:	4b03      	ldr	r3, [pc, #12]	@ (800143c <HAL_RCC_GetHCLKFreq+0x14>)
 800142e:	681b      	ldr	r3, [r3, #0]
}
 8001430:	4618      	mov	r0, r3
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	20000000 	.word	0x20000000

08001440 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001444:	f7ff fff0 	bl	8001428 <HAL_RCC_GetHCLKFreq>
 8001448:	4602      	mov	r2, r0
 800144a:	4b05      	ldr	r3, [pc, #20]	@ (8001460 <HAL_RCC_GetPCLK1Freq+0x20>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	0a9b      	lsrs	r3, r3, #10
 8001450:	f003 0307 	and.w	r3, r3, #7
 8001454:	4903      	ldr	r1, [pc, #12]	@ (8001464 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001456:	5ccb      	ldrb	r3, [r1, r3]
 8001458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800145c:	4618      	mov	r0, r3
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40023800 	.word	0x40023800
 8001464:	08005874 	.word	0x08005874

08001468 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800146c:	f7ff ffdc 	bl	8001428 <HAL_RCC_GetHCLKFreq>
 8001470:	4602      	mov	r2, r0
 8001472:	4b05      	ldr	r3, [pc, #20]	@ (8001488 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	0b5b      	lsrs	r3, r3, #13
 8001478:	f003 0307 	and.w	r3, r3, #7
 800147c:	4903      	ldr	r1, [pc, #12]	@ (800148c <HAL_RCC_GetPCLK2Freq+0x24>)
 800147e:	5ccb      	ldrb	r3, [r1, r3]
 8001480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001484:	4618      	mov	r0, r3
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40023800 	.word	0x40023800
 800148c:	08005874 	.word	0x08005874

08001490 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	220f      	movs	r2, #15
 800149e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014a0:	4b12      	ldr	r3, [pc, #72]	@ (80014ec <HAL_RCC_GetClockConfig+0x5c>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f003 0203 	and.w	r2, r3, #3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80014ac:	4b0f      	ldr	r3, [pc, #60]	@ (80014ec <HAL_RCC_GetClockConfig+0x5c>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014b8:	4b0c      	ldr	r3, [pc, #48]	@ (80014ec <HAL_RCC_GetClockConfig+0x5c>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80014c4:	4b09      	ldr	r3, [pc, #36]	@ (80014ec <HAL_RCC_GetClockConfig+0x5c>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	08db      	lsrs	r3, r3, #3
 80014ca:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014d2:	4b07      	ldr	r3, [pc, #28]	@ (80014f0 <HAL_RCC_GetClockConfig+0x60>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 020f 	and.w	r2, r3, #15
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	601a      	str	r2, [r3, #0]
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40023c00 	.word	0x40023c00

080014f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014f8:	b0ae      	sub	sp, #184	@ 0xb8
 80014fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80014fc:	2300      	movs	r3, #0
 80014fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001502:	2300      	movs	r3, #0
 8001504:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001508:	2300      	movs	r3, #0
 800150a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800150e:	2300      	movs	r3, #0
 8001510:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001514:	2300      	movs	r3, #0
 8001516:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800151a:	4bcb      	ldr	r3, [pc, #812]	@ (8001848 <HAL_RCC_GetSysClockFreq+0x354>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f003 030c 	and.w	r3, r3, #12
 8001522:	2b0c      	cmp	r3, #12
 8001524:	f200 8206 	bhi.w	8001934 <HAL_RCC_GetSysClockFreq+0x440>
 8001528:	a201      	add	r2, pc, #4	@ (adr r2, 8001530 <HAL_RCC_GetSysClockFreq+0x3c>)
 800152a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800152e:	bf00      	nop
 8001530:	08001565 	.word	0x08001565
 8001534:	08001935 	.word	0x08001935
 8001538:	08001935 	.word	0x08001935
 800153c:	08001935 	.word	0x08001935
 8001540:	0800156d 	.word	0x0800156d
 8001544:	08001935 	.word	0x08001935
 8001548:	08001935 	.word	0x08001935
 800154c:	08001935 	.word	0x08001935
 8001550:	08001575 	.word	0x08001575
 8001554:	08001935 	.word	0x08001935
 8001558:	08001935 	.word	0x08001935
 800155c:	08001935 	.word	0x08001935
 8001560:	08001765 	.word	0x08001765
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001564:	4bb9      	ldr	r3, [pc, #740]	@ (800184c <HAL_RCC_GetSysClockFreq+0x358>)
 8001566:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800156a:	e1e7      	b.n	800193c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800156c:	4bb8      	ldr	r3, [pc, #736]	@ (8001850 <HAL_RCC_GetSysClockFreq+0x35c>)
 800156e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001572:	e1e3      	b.n	800193c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001574:	4bb4      	ldr	r3, [pc, #720]	@ (8001848 <HAL_RCC_GetSysClockFreq+0x354>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800157c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001580:	4bb1      	ldr	r3, [pc, #708]	@ (8001848 <HAL_RCC_GetSysClockFreq+0x354>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d071      	beq.n	8001670 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800158c:	4bae      	ldr	r3, [pc, #696]	@ (8001848 <HAL_RCC_GetSysClockFreq+0x354>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	099b      	lsrs	r3, r3, #6
 8001592:	2200      	movs	r2, #0
 8001594:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001598:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800159c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80015a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80015a8:	2300      	movs	r3, #0
 80015aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80015ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80015b2:	4622      	mov	r2, r4
 80015b4:	462b      	mov	r3, r5
 80015b6:	f04f 0000 	mov.w	r0, #0
 80015ba:	f04f 0100 	mov.w	r1, #0
 80015be:	0159      	lsls	r1, r3, #5
 80015c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015c4:	0150      	lsls	r0, r2, #5
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4621      	mov	r1, r4
 80015cc:	1a51      	subs	r1, r2, r1
 80015ce:	6439      	str	r1, [r7, #64]	@ 0x40
 80015d0:	4629      	mov	r1, r5
 80015d2:	eb63 0301 	sbc.w	r3, r3, r1
 80015d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80015d8:	f04f 0200 	mov.w	r2, #0
 80015dc:	f04f 0300 	mov.w	r3, #0
 80015e0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80015e4:	4649      	mov	r1, r9
 80015e6:	018b      	lsls	r3, r1, #6
 80015e8:	4641      	mov	r1, r8
 80015ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015ee:	4641      	mov	r1, r8
 80015f0:	018a      	lsls	r2, r1, #6
 80015f2:	4641      	mov	r1, r8
 80015f4:	1a51      	subs	r1, r2, r1
 80015f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80015f8:	4649      	mov	r1, r9
 80015fa:	eb63 0301 	sbc.w	r3, r3, r1
 80015fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001600:	f04f 0200 	mov.w	r2, #0
 8001604:	f04f 0300 	mov.w	r3, #0
 8001608:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800160c:	4649      	mov	r1, r9
 800160e:	00cb      	lsls	r3, r1, #3
 8001610:	4641      	mov	r1, r8
 8001612:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001616:	4641      	mov	r1, r8
 8001618:	00ca      	lsls	r2, r1, #3
 800161a:	4610      	mov	r0, r2
 800161c:	4619      	mov	r1, r3
 800161e:	4603      	mov	r3, r0
 8001620:	4622      	mov	r2, r4
 8001622:	189b      	adds	r3, r3, r2
 8001624:	633b      	str	r3, [r7, #48]	@ 0x30
 8001626:	462b      	mov	r3, r5
 8001628:	460a      	mov	r2, r1
 800162a:	eb42 0303 	adc.w	r3, r2, r3
 800162e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001630:	f04f 0200 	mov.w	r2, #0
 8001634:	f04f 0300 	mov.w	r3, #0
 8001638:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800163c:	4629      	mov	r1, r5
 800163e:	024b      	lsls	r3, r1, #9
 8001640:	4621      	mov	r1, r4
 8001642:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001646:	4621      	mov	r1, r4
 8001648:	024a      	lsls	r2, r1, #9
 800164a:	4610      	mov	r0, r2
 800164c:	4619      	mov	r1, r3
 800164e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001652:	2200      	movs	r2, #0
 8001654:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001658:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800165c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001660:	f7fe fdde 	bl	8000220 <__aeabi_uldivmod>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4613      	mov	r3, r2
 800166a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800166e:	e067      	b.n	8001740 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001670:	4b75      	ldr	r3, [pc, #468]	@ (8001848 <HAL_RCC_GetSysClockFreq+0x354>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	099b      	lsrs	r3, r3, #6
 8001676:	2200      	movs	r2, #0
 8001678:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800167c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001680:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001688:	67bb      	str	r3, [r7, #120]	@ 0x78
 800168a:	2300      	movs	r3, #0
 800168c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800168e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001692:	4622      	mov	r2, r4
 8001694:	462b      	mov	r3, r5
 8001696:	f04f 0000 	mov.w	r0, #0
 800169a:	f04f 0100 	mov.w	r1, #0
 800169e:	0159      	lsls	r1, r3, #5
 80016a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016a4:	0150      	lsls	r0, r2, #5
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4621      	mov	r1, r4
 80016ac:	1a51      	subs	r1, r2, r1
 80016ae:	62b9      	str	r1, [r7, #40]	@ 0x28
 80016b0:	4629      	mov	r1, r5
 80016b2:	eb63 0301 	sbc.w	r3, r3, r1
 80016b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016b8:	f04f 0200 	mov.w	r2, #0
 80016bc:	f04f 0300 	mov.w	r3, #0
 80016c0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80016c4:	4649      	mov	r1, r9
 80016c6:	018b      	lsls	r3, r1, #6
 80016c8:	4641      	mov	r1, r8
 80016ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016ce:	4641      	mov	r1, r8
 80016d0:	018a      	lsls	r2, r1, #6
 80016d2:	4641      	mov	r1, r8
 80016d4:	ebb2 0a01 	subs.w	sl, r2, r1
 80016d8:	4649      	mov	r1, r9
 80016da:	eb63 0b01 	sbc.w	fp, r3, r1
 80016de:	f04f 0200 	mov.w	r2, #0
 80016e2:	f04f 0300 	mov.w	r3, #0
 80016e6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80016ea:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80016ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80016f2:	4692      	mov	sl, r2
 80016f4:	469b      	mov	fp, r3
 80016f6:	4623      	mov	r3, r4
 80016f8:	eb1a 0303 	adds.w	r3, sl, r3
 80016fc:	623b      	str	r3, [r7, #32]
 80016fe:	462b      	mov	r3, r5
 8001700:	eb4b 0303 	adc.w	r3, fp, r3
 8001704:	627b      	str	r3, [r7, #36]	@ 0x24
 8001706:	f04f 0200 	mov.w	r2, #0
 800170a:	f04f 0300 	mov.w	r3, #0
 800170e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001712:	4629      	mov	r1, r5
 8001714:	028b      	lsls	r3, r1, #10
 8001716:	4621      	mov	r1, r4
 8001718:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800171c:	4621      	mov	r1, r4
 800171e:	028a      	lsls	r2, r1, #10
 8001720:	4610      	mov	r0, r2
 8001722:	4619      	mov	r1, r3
 8001724:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001728:	2200      	movs	r2, #0
 800172a:	673b      	str	r3, [r7, #112]	@ 0x70
 800172c:	677a      	str	r2, [r7, #116]	@ 0x74
 800172e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001732:	f7fe fd75 	bl	8000220 <__aeabi_uldivmod>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4613      	mov	r3, r2
 800173c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001740:	4b41      	ldr	r3, [pc, #260]	@ (8001848 <HAL_RCC_GetSysClockFreq+0x354>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	0c1b      	lsrs	r3, r3, #16
 8001746:	f003 0303 	and.w	r3, r3, #3
 800174a:	3301      	adds	r3, #1
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8001752:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001756:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800175a:	fbb2 f3f3 	udiv	r3, r2, r3
 800175e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001762:	e0eb      	b.n	800193c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001764:	4b38      	ldr	r3, [pc, #224]	@ (8001848 <HAL_RCC_GetSysClockFreq+0x354>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800176c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001770:	4b35      	ldr	r3, [pc, #212]	@ (8001848 <HAL_RCC_GetSysClockFreq+0x354>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d06b      	beq.n	8001854 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800177c:	4b32      	ldr	r3, [pc, #200]	@ (8001848 <HAL_RCC_GetSysClockFreq+0x354>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	099b      	lsrs	r3, r3, #6
 8001782:	2200      	movs	r2, #0
 8001784:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001786:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001788:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800178a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800178e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001790:	2300      	movs	r3, #0
 8001792:	667b      	str	r3, [r7, #100]	@ 0x64
 8001794:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001798:	4622      	mov	r2, r4
 800179a:	462b      	mov	r3, r5
 800179c:	f04f 0000 	mov.w	r0, #0
 80017a0:	f04f 0100 	mov.w	r1, #0
 80017a4:	0159      	lsls	r1, r3, #5
 80017a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017aa:	0150      	lsls	r0, r2, #5
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	4621      	mov	r1, r4
 80017b2:	1a51      	subs	r1, r2, r1
 80017b4:	61b9      	str	r1, [r7, #24]
 80017b6:	4629      	mov	r1, r5
 80017b8:	eb63 0301 	sbc.w	r3, r3, r1
 80017bc:	61fb      	str	r3, [r7, #28]
 80017be:	f04f 0200 	mov.w	r2, #0
 80017c2:	f04f 0300 	mov.w	r3, #0
 80017c6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80017ca:	4659      	mov	r1, fp
 80017cc:	018b      	lsls	r3, r1, #6
 80017ce:	4651      	mov	r1, sl
 80017d0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017d4:	4651      	mov	r1, sl
 80017d6:	018a      	lsls	r2, r1, #6
 80017d8:	4651      	mov	r1, sl
 80017da:	ebb2 0801 	subs.w	r8, r2, r1
 80017de:	4659      	mov	r1, fp
 80017e0:	eb63 0901 	sbc.w	r9, r3, r1
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	f04f 0300 	mov.w	r3, #0
 80017ec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017f0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017f4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017f8:	4690      	mov	r8, r2
 80017fa:	4699      	mov	r9, r3
 80017fc:	4623      	mov	r3, r4
 80017fe:	eb18 0303 	adds.w	r3, r8, r3
 8001802:	613b      	str	r3, [r7, #16]
 8001804:	462b      	mov	r3, r5
 8001806:	eb49 0303 	adc.w	r3, r9, r3
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	f04f 0300 	mov.w	r3, #0
 8001814:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001818:	4629      	mov	r1, r5
 800181a:	024b      	lsls	r3, r1, #9
 800181c:	4621      	mov	r1, r4
 800181e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001822:	4621      	mov	r1, r4
 8001824:	024a      	lsls	r2, r1, #9
 8001826:	4610      	mov	r0, r2
 8001828:	4619      	mov	r1, r3
 800182a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800182e:	2200      	movs	r2, #0
 8001830:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001832:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001834:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001838:	f7fe fcf2 	bl	8000220 <__aeabi_uldivmod>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4613      	mov	r3, r2
 8001842:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001846:	e065      	b.n	8001914 <HAL_RCC_GetSysClockFreq+0x420>
 8001848:	40023800 	.word	0x40023800
 800184c:	00f42400 	.word	0x00f42400
 8001850:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001854:	4b3d      	ldr	r3, [pc, #244]	@ (800194c <HAL_RCC_GetSysClockFreq+0x458>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	099b      	lsrs	r3, r3, #6
 800185a:	2200      	movs	r2, #0
 800185c:	4618      	mov	r0, r3
 800185e:	4611      	mov	r1, r2
 8001860:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001864:	653b      	str	r3, [r7, #80]	@ 0x50
 8001866:	2300      	movs	r3, #0
 8001868:	657b      	str	r3, [r7, #84]	@ 0x54
 800186a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800186e:	4642      	mov	r2, r8
 8001870:	464b      	mov	r3, r9
 8001872:	f04f 0000 	mov.w	r0, #0
 8001876:	f04f 0100 	mov.w	r1, #0
 800187a:	0159      	lsls	r1, r3, #5
 800187c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001880:	0150      	lsls	r0, r2, #5
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4641      	mov	r1, r8
 8001888:	1a51      	subs	r1, r2, r1
 800188a:	60b9      	str	r1, [r7, #8]
 800188c:	4649      	mov	r1, r9
 800188e:	eb63 0301 	sbc.w	r3, r3, r1
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	f04f 0300 	mov.w	r3, #0
 800189c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80018a0:	4659      	mov	r1, fp
 80018a2:	018b      	lsls	r3, r1, #6
 80018a4:	4651      	mov	r1, sl
 80018a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018aa:	4651      	mov	r1, sl
 80018ac:	018a      	lsls	r2, r1, #6
 80018ae:	4651      	mov	r1, sl
 80018b0:	1a54      	subs	r4, r2, r1
 80018b2:	4659      	mov	r1, fp
 80018b4:	eb63 0501 	sbc.w	r5, r3, r1
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	f04f 0300 	mov.w	r3, #0
 80018c0:	00eb      	lsls	r3, r5, #3
 80018c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018c6:	00e2      	lsls	r2, r4, #3
 80018c8:	4614      	mov	r4, r2
 80018ca:	461d      	mov	r5, r3
 80018cc:	4643      	mov	r3, r8
 80018ce:	18e3      	adds	r3, r4, r3
 80018d0:	603b      	str	r3, [r7, #0]
 80018d2:	464b      	mov	r3, r9
 80018d4:	eb45 0303 	adc.w	r3, r5, r3
 80018d8:	607b      	str	r3, [r7, #4]
 80018da:	f04f 0200 	mov.w	r2, #0
 80018de:	f04f 0300 	mov.w	r3, #0
 80018e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018e6:	4629      	mov	r1, r5
 80018e8:	028b      	lsls	r3, r1, #10
 80018ea:	4621      	mov	r1, r4
 80018ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018f0:	4621      	mov	r1, r4
 80018f2:	028a      	lsls	r2, r1, #10
 80018f4:	4610      	mov	r0, r2
 80018f6:	4619      	mov	r1, r3
 80018f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80018fc:	2200      	movs	r2, #0
 80018fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001900:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001902:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001906:	f7fe fc8b 	bl	8000220 <__aeabi_uldivmod>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	4613      	mov	r3, r2
 8001910:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001914:	4b0d      	ldr	r3, [pc, #52]	@ (800194c <HAL_RCC_GetSysClockFreq+0x458>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	0f1b      	lsrs	r3, r3, #28
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8001922:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001926:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800192a:	fbb2 f3f3 	udiv	r3, r2, r3
 800192e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001932:	e003      	b.n	800193c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001934:	4b06      	ldr	r3, [pc, #24]	@ (8001950 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001936:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800193a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800193c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001940:	4618      	mov	r0, r3
 8001942:	37b8      	adds	r7, #184	@ 0xb8
 8001944:	46bd      	mov	sp, r7
 8001946:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800194a:	bf00      	nop
 800194c:	40023800 	.word	0x40023800
 8001950:	00f42400 	.word	0x00f42400

08001954 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800195c:	2300      	movs	r3, #0
 800195e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	2b00      	cmp	r3, #0
 800196a:	f000 8083 	beq.w	8001a74 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800196e:	4b95      	ldr	r3, [pc, #596]	@ (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 030c 	and.w	r3, r3, #12
 8001976:	2b04      	cmp	r3, #4
 8001978:	d019      	beq.n	80019ae <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800197a:	4b92      	ldr	r3, [pc, #584]	@ (8001bc4 <HAL_RCC_OscConfig+0x270>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001982:	2b08      	cmp	r3, #8
 8001984:	d106      	bne.n	8001994 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001986:	4b8f      	ldr	r3, [pc, #572]	@ (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800198e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001992:	d00c      	beq.n	80019ae <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001994:	4b8b      	ldr	r3, [pc, #556]	@ (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800199c:	2b0c      	cmp	r3, #12
 800199e:	d112      	bne.n	80019c6 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019a0:	4b88      	ldr	r3, [pc, #544]	@ (8001bc4 <HAL_RCC_OscConfig+0x270>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019ac:	d10b      	bne.n	80019c6 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ae:	4b85      	ldr	r3, [pc, #532]	@ (8001bc4 <HAL_RCC_OscConfig+0x270>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d05b      	beq.n	8001a72 <HAL_RCC_OscConfig+0x11e>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d157      	bne.n	8001a72 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e216      	b.n	8001df4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019ce:	d106      	bne.n	80019de <HAL_RCC_OscConfig+0x8a>
 80019d0:	4b7c      	ldr	r3, [pc, #496]	@ (8001bc4 <HAL_RCC_OscConfig+0x270>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a7b      	ldr	r2, [pc, #492]	@ (8001bc4 <HAL_RCC_OscConfig+0x270>)
 80019d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019da:	6013      	str	r3, [r2, #0]
 80019dc:	e01d      	b.n	8001a1a <HAL_RCC_OscConfig+0xc6>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019e6:	d10c      	bne.n	8001a02 <HAL_RCC_OscConfig+0xae>
 80019e8:	4b76      	ldr	r3, [pc, #472]	@ (8001bc4 <HAL_RCC_OscConfig+0x270>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a75      	ldr	r2, [pc, #468]	@ (8001bc4 <HAL_RCC_OscConfig+0x270>)
 80019ee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019f2:	6013      	str	r3, [r2, #0]
 80019f4:	4b73      	ldr	r3, [pc, #460]	@ (8001bc4 <HAL_RCC_OscConfig+0x270>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a72      	ldr	r2, [pc, #456]	@ (8001bc4 <HAL_RCC_OscConfig+0x270>)
 80019fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019fe:	6013      	str	r3, [r2, #0]
 8001a00:	e00b      	b.n	8001a1a <HAL_RCC_OscConfig+0xc6>
 8001a02:	4b70      	ldr	r3, [pc, #448]	@ (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a6f      	ldr	r2, [pc, #444]	@ (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001a08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a0c:	6013      	str	r3, [r2, #0]
 8001a0e:	4b6d      	ldr	r3, [pc, #436]	@ (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a6c      	ldr	r2, [pc, #432]	@ (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001a14:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a18:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d013      	beq.n	8001a4a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a22:	f7ff f931 	bl	8000c88 <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a2a:	f7ff f92d 	bl	8000c88 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b64      	cmp	r3, #100	@ 0x64
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e1db      	b.n	8001df4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3c:	4b61      	ldr	r3, [pc, #388]	@ (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0f0      	beq.n	8001a2a <HAL_RCC_OscConfig+0xd6>
 8001a48:	e014      	b.n	8001a74 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4a:	f7ff f91d 	bl	8000c88 <HAL_GetTick>
 8001a4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a52:	f7ff f919 	bl	8000c88 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b64      	cmp	r3, #100	@ 0x64
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e1c7      	b.n	8001df4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a64:	4b57      	ldr	r3, [pc, #348]	@ (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d1f0      	bne.n	8001a52 <HAL_RCC_OscConfig+0xfe>
 8001a70:	e000      	b.n	8001a74 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a72:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d06f      	beq.n	8001b60 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a80:	4b50      	ldr	r3, [pc, #320]	@ (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f003 030c 	and.w	r3, r3, #12
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d017      	beq.n	8001abc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a8c:	4b4d      	ldr	r3, [pc, #308]	@ (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a94:	2b08      	cmp	r3, #8
 8001a96:	d105      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a98:	4b4a      	ldr	r3, [pc, #296]	@ (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d00b      	beq.n	8001abc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aa4:	4b47      	ldr	r3, [pc, #284]	@ (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001aac:	2b0c      	cmp	r3, #12
 8001aae:	d11c      	bne.n	8001aea <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ab0:	4b44      	ldr	r3, [pc, #272]	@ (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d116      	bne.n	8001aea <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001abc:	4b41      	ldr	r3, [pc, #260]	@ (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d005      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x180>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d001      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e18f      	b.n	8001df4 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad4:	4b3b      	ldr	r3, [pc, #236]	@ (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	691b      	ldr	r3, [r3, #16]
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	4938      	ldr	r1, [pc, #224]	@ (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae8:	e03a      	b.n	8001b60 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d020      	beq.n	8001b34 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001af2:	4b35      	ldr	r3, [pc, #212]	@ (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001af4:	2201      	movs	r2, #1
 8001af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af8:	f7ff f8c6 	bl	8000c88 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b00:	f7ff f8c2 	bl	8000c88 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e170      	b.n	8001df4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b12:	4b2c      	ldr	r3, [pc, #176]	@ (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0f0      	beq.n	8001b00 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1e:	4b29      	ldr	r3, [pc, #164]	@ (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	4925      	ldr	r1, [pc, #148]	@ (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	600b      	str	r3, [r1, #0]
 8001b32:	e015      	b.n	8001b60 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b34:	4b24      	ldr	r3, [pc, #144]	@ (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3a:	f7ff f8a5 	bl	8000c88 <HAL_GetTick>
 8001b3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b42:	f7ff f8a1 	bl	8000c88 <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e14f      	b.n	8001df4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b54:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1f0      	bne.n	8001b42 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0308 	and.w	r3, r3, #8
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d037      	beq.n	8001bdc <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	695b      	ldr	r3, [r3, #20]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d016      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b74:	4b15      	ldr	r3, [pc, #84]	@ (8001bcc <HAL_RCC_OscConfig+0x278>)
 8001b76:	2201      	movs	r2, #1
 8001b78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b7a:	f7ff f885 	bl	8000c88 <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b80:	e008      	b.n	8001b94 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b82:	f7ff f881 	bl	8000c88 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e12f      	b.n	8001df4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b94:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001b96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0f0      	beq.n	8001b82 <HAL_RCC_OscConfig+0x22e>
 8001ba0:	e01c      	b.n	8001bdc <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bcc <HAL_RCC_OscConfig+0x278>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba8:	f7ff f86e 	bl	8000c88 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bae:	e00f      	b.n	8001bd0 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bb0:	f7ff f86a 	bl	8000c88 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d908      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e118      	b.n	8001df4 <HAL_RCC_OscConfig+0x4a0>
 8001bc2:	bf00      	nop
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	42470000 	.word	0x42470000
 8001bcc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bd0:	4b8a      	ldr	r3, [pc, #552]	@ (8001dfc <HAL_RCC_OscConfig+0x4a8>)
 8001bd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1e9      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f000 8097 	beq.w	8001d18 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bea:	2300      	movs	r3, #0
 8001bec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bee:	4b83      	ldr	r3, [pc, #524]	@ (8001dfc <HAL_RCC_OscConfig+0x4a8>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d10f      	bne.n	8001c1a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	4b7f      	ldr	r3, [pc, #508]	@ (8001dfc <HAL_RCC_OscConfig+0x4a8>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c02:	4a7e      	ldr	r2, [pc, #504]	@ (8001dfc <HAL_RCC_OscConfig+0x4a8>)
 8001c04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c08:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c0a:	4b7c      	ldr	r3, [pc, #496]	@ (8001dfc <HAL_RCC_OscConfig+0x4a8>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c16:	2301      	movs	r3, #1
 8001c18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c1a:	4b79      	ldr	r3, [pc, #484]	@ (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d118      	bne.n	8001c58 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c26:	4b76      	ldr	r3, [pc, #472]	@ (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a75      	ldr	r2, [pc, #468]	@ (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001c2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c32:	f7ff f829 	bl	8000c88 <HAL_GetTick>
 8001c36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c38:	e008      	b.n	8001c4c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c3a:	f7ff f825 	bl	8000c88 <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e0d3      	b.n	8001df4 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c4c:	4b6c      	ldr	r3, [pc, #432]	@ (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d0f0      	beq.n	8001c3a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d106      	bne.n	8001c6e <HAL_RCC_OscConfig+0x31a>
 8001c60:	4b66      	ldr	r3, [pc, #408]	@ (8001dfc <HAL_RCC_OscConfig+0x4a8>)
 8001c62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c64:	4a65      	ldr	r2, [pc, #404]	@ (8001dfc <HAL_RCC_OscConfig+0x4a8>)
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c6c:	e01c      	b.n	8001ca8 <HAL_RCC_OscConfig+0x354>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	2b05      	cmp	r3, #5
 8001c74:	d10c      	bne.n	8001c90 <HAL_RCC_OscConfig+0x33c>
 8001c76:	4b61      	ldr	r3, [pc, #388]	@ (8001dfc <HAL_RCC_OscConfig+0x4a8>)
 8001c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c7a:	4a60      	ldr	r2, [pc, #384]	@ (8001dfc <HAL_RCC_OscConfig+0x4a8>)
 8001c7c:	f043 0304 	orr.w	r3, r3, #4
 8001c80:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c82:	4b5e      	ldr	r3, [pc, #376]	@ (8001dfc <HAL_RCC_OscConfig+0x4a8>)
 8001c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c86:	4a5d      	ldr	r2, [pc, #372]	@ (8001dfc <HAL_RCC_OscConfig+0x4a8>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c8e:	e00b      	b.n	8001ca8 <HAL_RCC_OscConfig+0x354>
 8001c90:	4b5a      	ldr	r3, [pc, #360]	@ (8001dfc <HAL_RCC_OscConfig+0x4a8>)
 8001c92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c94:	4a59      	ldr	r2, [pc, #356]	@ (8001dfc <HAL_RCC_OscConfig+0x4a8>)
 8001c96:	f023 0301 	bic.w	r3, r3, #1
 8001c9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c9c:	4b57      	ldr	r3, [pc, #348]	@ (8001dfc <HAL_RCC_OscConfig+0x4a8>)
 8001c9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ca0:	4a56      	ldr	r2, [pc, #344]	@ (8001dfc <HAL_RCC_OscConfig+0x4a8>)
 8001ca2:	f023 0304 	bic.w	r3, r3, #4
 8001ca6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d015      	beq.n	8001cdc <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb0:	f7fe ffea 	bl	8000c88 <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cb6:	e00a      	b.n	8001cce <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cb8:	f7fe ffe6 	bl	8000c88 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e092      	b.n	8001df4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cce:	4b4b      	ldr	r3, [pc, #300]	@ (8001dfc <HAL_RCC_OscConfig+0x4a8>)
 8001cd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d0ee      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x364>
 8001cda:	e014      	b.n	8001d06 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cdc:	f7fe ffd4 	bl	8000c88 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ce2:	e00a      	b.n	8001cfa <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ce4:	f7fe ffd0 	bl	8000c88 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e07c      	b.n	8001df4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cfa:	4b40      	ldr	r3, [pc, #256]	@ (8001dfc <HAL_RCC_OscConfig+0x4a8>)
 8001cfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1ee      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d06:	7dfb      	ldrb	r3, [r7, #23]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d105      	bne.n	8001d18 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d0c:	4b3b      	ldr	r3, [pc, #236]	@ (8001dfc <HAL_RCC_OscConfig+0x4a8>)
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d10:	4a3a      	ldr	r2, [pc, #232]	@ (8001dfc <HAL_RCC_OscConfig+0x4a8>)
 8001d12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d16:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d068      	beq.n	8001df2 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d20:	4b36      	ldr	r3, [pc, #216]	@ (8001dfc <HAL_RCC_OscConfig+0x4a8>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f003 030c 	and.w	r3, r3, #12
 8001d28:	2b08      	cmp	r3, #8
 8001d2a:	d060      	beq.n	8001dee <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d145      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d34:	4b33      	ldr	r3, [pc, #204]	@ (8001e04 <HAL_RCC_OscConfig+0x4b0>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3a:	f7fe ffa5 	bl	8000c88 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d42:	f7fe ffa1 	bl	8000c88 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e04f      	b.n	8001df4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d54:	4b29      	ldr	r3, [pc, #164]	@ (8001dfc <HAL_RCC_OscConfig+0x4a8>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1f0      	bne.n	8001d42 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	69da      	ldr	r2, [r3, #28]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a1b      	ldr	r3, [r3, #32]
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d6e:	019b      	lsls	r3, r3, #6
 8001d70:	431a      	orrs	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d76:	085b      	lsrs	r3, r3, #1
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	041b      	lsls	r3, r3, #16
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d82:	061b      	lsls	r3, r3, #24
 8001d84:	431a      	orrs	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8a:	071b      	lsls	r3, r3, #28
 8001d8c:	491b      	ldr	r1, [pc, #108]	@ (8001dfc <HAL_RCC_OscConfig+0x4a8>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d92:	4b1c      	ldr	r3, [pc, #112]	@ (8001e04 <HAL_RCC_OscConfig+0x4b0>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d98:	f7fe ff76 	bl	8000c88 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001da0:	f7fe ff72 	bl	8000c88 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e020      	b.n	8001df4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db2:	4b12      	ldr	r3, [pc, #72]	@ (8001dfc <HAL_RCC_OscConfig+0x4a8>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0f0      	beq.n	8001da0 <HAL_RCC_OscConfig+0x44c>
 8001dbe:	e018      	b.n	8001df2 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc0:	4b10      	ldr	r3, [pc, #64]	@ (8001e04 <HAL_RCC_OscConfig+0x4b0>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc6:	f7fe ff5f 	bl	8000c88 <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dce:	f7fe ff5b 	bl	8000c88 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e009      	b.n	8001df4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001de0:	4b06      	ldr	r3, [pc, #24]	@ (8001dfc <HAL_RCC_OscConfig+0x4a8>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1f0      	bne.n	8001dce <HAL_RCC_OscConfig+0x47a>
 8001dec:	e001      	b.n	8001df2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e000      	b.n	8001df4 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	40007000 	.word	0x40007000
 8001e04:	42470060 	.word	0x42470060

08001e08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e01d      	b.n	8001e56 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d106      	bne.n	8001e34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f815 	bl	8001e5e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2202      	movs	r2, #2
 8001e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3304      	adds	r3, #4
 8001e44:	4619      	mov	r1, r3
 8001e46:	4610      	mov	r0, r2
 8001e48:	f000 f968 	bl	800211c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b085      	sub	sp, #20
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68da      	ldr	r2, [r3, #12]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f042 0201 	orr.w	r2, r2, #1
 8001e88:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f003 0307 	and.w	r3, r3, #7
 8001e94:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2b06      	cmp	r3, #6
 8001e9a:	d007      	beq.n	8001eac <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f042 0201 	orr.w	r2, r2, #1
 8001eaa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3714      	adds	r7, #20
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b082      	sub	sp, #8
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d122      	bne.n	8001f16 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d11b      	bne.n	8001f16 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f06f 0202 	mvn.w	r2, #2
 8001ee6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	f003 0303 	and.w	r3, r3, #3
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d003      	beq.n	8001f04 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 f8ee 	bl	80020de <HAL_TIM_IC_CaptureCallback>
 8001f02:	e005      	b.n	8001f10 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 f8e0 	bl	80020ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 f8f1 	bl	80020f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	2b04      	cmp	r3, #4
 8001f22:	d122      	bne.n	8001f6a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	f003 0304 	and.w	r3, r3, #4
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	d11b      	bne.n	8001f6a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f06f 0204 	mvn.w	r2, #4
 8001f3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2202      	movs	r2, #2
 8001f40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d003      	beq.n	8001f58 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 f8c4 	bl	80020de <HAL_TIM_IC_CaptureCallback>
 8001f56:	e005      	b.n	8001f64 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 f8b6 	bl	80020ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 f8c7 	bl	80020f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	f003 0308 	and.w	r3, r3, #8
 8001f74:	2b08      	cmp	r3, #8
 8001f76:	d122      	bne.n	8001fbe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	2b08      	cmp	r3, #8
 8001f84:	d11b      	bne.n	8001fbe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f06f 0208 	mvn.w	r2, #8
 8001f8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2204      	movs	r2, #4
 8001f94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	69db      	ldr	r3, [r3, #28]
 8001f9c:	f003 0303 	and.w	r3, r3, #3
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d003      	beq.n	8001fac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 f89a 	bl	80020de <HAL_TIM_IC_CaptureCallback>
 8001faa:	e005      	b.n	8001fb8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 f88c 	bl	80020ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f89d 	bl	80020f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	f003 0310 	and.w	r3, r3, #16
 8001fc8:	2b10      	cmp	r3, #16
 8001fca:	d122      	bne.n	8002012 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	f003 0310 	and.w	r3, r3, #16
 8001fd6:	2b10      	cmp	r3, #16
 8001fd8:	d11b      	bne.n	8002012 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f06f 0210 	mvn.w	r2, #16
 8001fe2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2208      	movs	r2, #8
 8001fe8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	69db      	ldr	r3, [r3, #28]
 8001ff0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d003      	beq.n	8002000 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 f870 	bl	80020de <HAL_TIM_IC_CaptureCallback>
 8001ffe:	e005      	b.n	800200c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f000 f862 	bl	80020ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f873 	bl	80020f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b01      	cmp	r3, #1
 800201e:	d10e      	bne.n	800203e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b01      	cmp	r3, #1
 800202c:	d107      	bne.n	800203e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f06f 0201 	mvn.w	r2, #1
 8002036:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f7fe fca3 	bl	8000984 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002048:	2b80      	cmp	r3, #128	@ 0x80
 800204a:	d10e      	bne.n	800206a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002056:	2b80      	cmp	r3, #128	@ 0x80
 8002058:	d107      	bne.n	800206a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 f903 	bl	8002270 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	691b      	ldr	r3, [r3, #16]
 8002070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002074:	2b40      	cmp	r3, #64	@ 0x40
 8002076:	d10e      	bne.n	8002096 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002082:	2b40      	cmp	r3, #64	@ 0x40
 8002084:	d107      	bne.n	8002096 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800208e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 f838 	bl	8002106 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	f003 0320 	and.w	r3, r3, #32
 80020a0:	2b20      	cmp	r3, #32
 80020a2:	d10e      	bne.n	80020c2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	f003 0320 	and.w	r3, r3, #32
 80020ae:	2b20      	cmp	r3, #32
 80020b0:	d107      	bne.n	80020c2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f06f 0220 	mvn.w	r2, #32
 80020ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f000 f8cd 	bl	800225c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
	...

0800211c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a40      	ldr	r2, [pc, #256]	@ (8002230 <TIM_Base_SetConfig+0x114>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d013      	beq.n	800215c <TIM_Base_SetConfig+0x40>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800213a:	d00f      	beq.n	800215c <TIM_Base_SetConfig+0x40>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a3d      	ldr	r2, [pc, #244]	@ (8002234 <TIM_Base_SetConfig+0x118>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d00b      	beq.n	800215c <TIM_Base_SetConfig+0x40>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a3c      	ldr	r2, [pc, #240]	@ (8002238 <TIM_Base_SetConfig+0x11c>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d007      	beq.n	800215c <TIM_Base_SetConfig+0x40>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a3b      	ldr	r2, [pc, #236]	@ (800223c <TIM_Base_SetConfig+0x120>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d003      	beq.n	800215c <TIM_Base_SetConfig+0x40>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a3a      	ldr	r2, [pc, #232]	@ (8002240 <TIM_Base_SetConfig+0x124>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d108      	bne.n	800216e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002162:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	4313      	orrs	r3, r2
 800216c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a2f      	ldr	r2, [pc, #188]	@ (8002230 <TIM_Base_SetConfig+0x114>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d02b      	beq.n	80021ce <TIM_Base_SetConfig+0xb2>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800217c:	d027      	beq.n	80021ce <TIM_Base_SetConfig+0xb2>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a2c      	ldr	r2, [pc, #176]	@ (8002234 <TIM_Base_SetConfig+0x118>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d023      	beq.n	80021ce <TIM_Base_SetConfig+0xb2>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a2b      	ldr	r2, [pc, #172]	@ (8002238 <TIM_Base_SetConfig+0x11c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d01f      	beq.n	80021ce <TIM_Base_SetConfig+0xb2>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a2a      	ldr	r2, [pc, #168]	@ (800223c <TIM_Base_SetConfig+0x120>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d01b      	beq.n	80021ce <TIM_Base_SetConfig+0xb2>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a29      	ldr	r2, [pc, #164]	@ (8002240 <TIM_Base_SetConfig+0x124>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d017      	beq.n	80021ce <TIM_Base_SetConfig+0xb2>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a28      	ldr	r2, [pc, #160]	@ (8002244 <TIM_Base_SetConfig+0x128>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d013      	beq.n	80021ce <TIM_Base_SetConfig+0xb2>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a27      	ldr	r2, [pc, #156]	@ (8002248 <TIM_Base_SetConfig+0x12c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d00f      	beq.n	80021ce <TIM_Base_SetConfig+0xb2>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a26      	ldr	r2, [pc, #152]	@ (800224c <TIM_Base_SetConfig+0x130>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d00b      	beq.n	80021ce <TIM_Base_SetConfig+0xb2>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a25      	ldr	r2, [pc, #148]	@ (8002250 <TIM_Base_SetConfig+0x134>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d007      	beq.n	80021ce <TIM_Base_SetConfig+0xb2>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a24      	ldr	r2, [pc, #144]	@ (8002254 <TIM_Base_SetConfig+0x138>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d003      	beq.n	80021ce <TIM_Base_SetConfig+0xb2>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a23      	ldr	r2, [pc, #140]	@ (8002258 <TIM_Base_SetConfig+0x13c>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d108      	bne.n	80021e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	4313      	orrs	r3, r2
 80021de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a0a      	ldr	r2, [pc, #40]	@ (8002230 <TIM_Base_SetConfig+0x114>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d003      	beq.n	8002214 <TIM_Base_SetConfig+0xf8>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a0c      	ldr	r2, [pc, #48]	@ (8002240 <TIM_Base_SetConfig+0x124>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d103      	bne.n	800221c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	691a      	ldr	r2, [r3, #16]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	615a      	str	r2, [r3, #20]
}
 8002222:	bf00      	nop
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	40010000 	.word	0x40010000
 8002234:	40000400 	.word	0x40000400
 8002238:	40000800 	.word	0x40000800
 800223c:	40000c00 	.word	0x40000c00
 8002240:	40010400 	.word	0x40010400
 8002244:	40014000 	.word	0x40014000
 8002248:	40014400 	.word	0x40014400
 800224c:	40014800 	.word	0x40014800
 8002250:	40001800 	.word	0x40001800
 8002254:	40001c00 	.word	0x40001c00
 8002258:	40002000 	.word	0x40002000

0800225c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e03f      	b.n	8002316 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d106      	bne.n	80022b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7fe fbb0 	bl	8000a10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2224      	movs	r2, #36	@ 0x24
 80022b4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68da      	ldr	r2, [r3, #12]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80022c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 f90b 	bl	80024e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	691a      	ldr	r2, [r3, #16]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80022dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	695a      	ldr	r2, [r3, #20]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80022ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68da      	ldr	r2, [r3, #12]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80022fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2220      	movs	r2, #32
 8002308:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2220      	movs	r2, #32
 8002310:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b088      	sub	sp, #32
 8002322:	af02      	add	r7, sp, #8
 8002324:	60f8      	str	r0, [r7, #12]
 8002326:	60b9      	str	r1, [r7, #8]
 8002328:	603b      	str	r3, [r7, #0]
 800232a:	4613      	mov	r3, r2
 800232c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800232e:	2300      	movs	r3, #0
 8002330:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b20      	cmp	r3, #32
 800233c:	f040 8083 	bne.w	8002446 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d002      	beq.n	800234c <HAL_UART_Transmit+0x2e>
 8002346:	88fb      	ldrh	r3, [r7, #6]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e07b      	b.n	8002448 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002356:	2b01      	cmp	r3, #1
 8002358:	d101      	bne.n	800235e <HAL_UART_Transmit+0x40>
 800235a:	2302      	movs	r3, #2
 800235c:	e074      	b.n	8002448 <HAL_UART_Transmit+0x12a>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2200      	movs	r2, #0
 800236a:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2221      	movs	r2, #33	@ 0x21
 8002370:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002374:	f7fe fc88 	bl	8000c88 <HAL_GetTick>
 8002378:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	88fa      	ldrh	r2, [r7, #6]
 800237e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	88fa      	ldrh	r2, [r7, #6]
 8002384:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    while (huart->TxXferCount > 0U)
 800238e:	e042      	b.n	8002416 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002394:	b29b      	uxth	r3, r3
 8002396:	3b01      	subs	r3, #1
 8002398:	b29a      	uxth	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	84da      	strh	r2, [r3, #38]	@ 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023a6:	d122      	bne.n	80023ee <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	2200      	movs	r2, #0
 80023b0:	2180      	movs	r1, #128	@ 0x80
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f000 f84c 	bl	8002450 <UART_WaitOnFlagUntilTimeout>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e042      	b.n	8002448 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	461a      	mov	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023d4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d103      	bne.n	80023e6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	3302      	adds	r3, #2
 80023e2:	60bb      	str	r3, [r7, #8]
 80023e4:	e017      	b.n	8002416 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	3301      	adds	r3, #1
 80023ea:	60bb      	str	r3, [r7, #8]
 80023ec:	e013      	b.n	8002416 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	2200      	movs	r2, #0
 80023f6:	2180      	movs	r1, #128	@ 0x80
 80023f8:	68f8      	ldr	r0, [r7, #12]
 80023fa:	f000 f829 	bl	8002450 <UART_WaitOnFlagUntilTimeout>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e01f      	b.n	8002448 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	1c5a      	adds	r2, r3, #1
 800240c:	60ba      	str	r2, [r7, #8]
 800240e:	781a      	ldrb	r2, [r3, #0]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800241a:	b29b      	uxth	r3, r3
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1b7      	bne.n	8002390 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	2200      	movs	r2, #0
 8002428:	2140      	movs	r1, #64	@ 0x40
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f000 f810 	bl	8002450 <UART_WaitOnFlagUntilTimeout>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e006      	b.n	8002448 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2220      	movs	r2, #32
 800243e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    return HAL_OK;
 8002442:	2300      	movs	r3, #0
 8002444:	e000      	b.n	8002448 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002446:	2302      	movs	r3, #2
  }
}
 8002448:	4618      	mov	r0, r3
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	603b      	str	r3, [r7, #0]
 800245c:	4613      	mov	r3, r2
 800245e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002460:	e02c      	b.n	80024bc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002468:	d028      	beq.n	80024bc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d007      	beq.n	8002480 <UART_WaitOnFlagUntilTimeout+0x30>
 8002470:	f7fe fc0a 	bl	8000c88 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	429a      	cmp	r2, r3
 800247e:	d21d      	bcs.n	80024bc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68da      	ldr	r2, [r3, #12]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 800248e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	695a      	ldr	r2, [r3, #20]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0201 	bic.w	r2, r2, #1
 800249e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2220      	movs	r2, #32
 80024a4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2220      	movs	r2, #32
 80024ac:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e00f      	b.n	80024dc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	4013      	ands	r3, r2
 80024c6:	68ba      	ldr	r2, [r7, #8]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	bf0c      	ite	eq
 80024cc:	2301      	moveq	r3, #1
 80024ce:	2300      	movne	r3, #0
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	461a      	mov	r2, r3
 80024d4:	79fb      	ldrb	r3, [r7, #7]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d0c3      	beq.n	8002462 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024e8:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	f8c7 01fc 	str.w	r0, [r7, #508]	@ 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024f2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80024fe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002502:	68d9      	ldr	r1, [r3, #12]
 8002504:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	ea40 0301 	orr.w	r3, r0, r1
 800250e:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002510:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002514:	689a      	ldr	r2, [r3, #8]
 8002516:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	431a      	orrs	r2, r3
 800251e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	431a      	orrs	r2, r3
 8002526:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	4313      	orrs	r3, r2
 800252e:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
  MODIFY_REG(huart->Instance->CR1,
 8002532:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800253e:	f021 010c 	bic.w	r1, r1, #12
 8002542:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 800254c:	430b      	orrs	r3, r1
 800254e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002550:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800255c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002560:	6999      	ldr	r1, [r3, #24]
 8002562:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	ea40 0301 	orr.w	r3, r0, r1
 800256c:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800256e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002572:	69db      	ldr	r3, [r3, #28]
 8002574:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002578:	f040 824a 	bne.w	8002a10 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800257c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	4b96      	ldr	r3, [pc, #600]	@ (80027dc <UART_SetConfig+0x2f8>)
 8002584:	429a      	cmp	r2, r3
 8002586:	d006      	beq.n	8002596 <UART_SetConfig+0xb2>
 8002588:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	4b94      	ldr	r3, [pc, #592]	@ (80027e0 <UART_SetConfig+0x2fc>)
 8002590:	429a      	cmp	r2, r3
 8002592:	f040 8129 	bne.w	80027e8 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002596:	f7fe ff67 	bl	8001468 <HAL_RCC_GetPCLK2Freq>
 800259a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800259e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80025a2:	2200      	movs	r2, #0
 80025a4:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 80025a8:	f8c7 21f4 	str.w	r2, [r7, #500]	@ 0x1f4
 80025ac:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	@ 0x1f0
 80025b0:	4622      	mov	r2, r4
 80025b2:	462b      	mov	r3, r5
 80025b4:	1891      	adds	r1, r2, r2
 80025b6:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 80025ba:	415b      	adcs	r3, r3
 80025bc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80025c0:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 80025c4:	4621      	mov	r1, r4
 80025c6:	1851      	adds	r1, r2, r1
 80025c8:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 80025cc:	4629      	mov	r1, r5
 80025ce:	414b      	adcs	r3, r1
 80025d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80025d4:	f04f 0200 	mov.w	r2, #0
 80025d8:	f04f 0300 	mov.w	r3, #0
 80025dc:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	@ 0xc8
 80025e0:	4649      	mov	r1, r9
 80025e2:	00cb      	lsls	r3, r1, #3
 80025e4:	4641      	mov	r1, r8
 80025e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025ea:	4641      	mov	r1, r8
 80025ec:	00ca      	lsls	r2, r1, #3
 80025ee:	4610      	mov	r0, r2
 80025f0:	4619      	mov	r1, r3
 80025f2:	4603      	mov	r3, r0
 80025f4:	4622      	mov	r2, r4
 80025f6:	189b      	adds	r3, r3, r2
 80025f8:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80025fc:	462b      	mov	r3, r5
 80025fe:	460a      	mov	r2, r1
 8002600:	eb42 0303 	adc.w	r3, r2, r3
 8002604:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 8002608:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002614:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 8002618:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	@ 0x1e0
 800261c:	460b      	mov	r3, r1
 800261e:	18db      	adds	r3, r3, r3
 8002620:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002624:	4613      	mov	r3, r2
 8002626:	eb42 0303 	adc.w	r3, r2, r3
 800262a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800262e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8002632:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 8002636:	f7fd fdf3 	bl	8000220 <__aeabi_uldivmod>
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	4b69      	ldr	r3, [pc, #420]	@ (80027e4 <UART_SetConfig+0x300>)
 8002640:	fba3 2302 	umull	r2, r3, r3, r2
 8002644:	095b      	lsrs	r3, r3, #5
 8002646:	011c      	lsls	r4, r3, #4
 8002648:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800264c:	2200      	movs	r2, #0
 800264e:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 8002652:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8002656:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	@ 0x1d8
 800265a:	4642      	mov	r2, r8
 800265c:	464b      	mov	r3, r9
 800265e:	1891      	adds	r1, r2, r2
 8002660:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 8002664:	415b      	adcs	r3, r3
 8002666:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800266a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800266e:	4641      	mov	r1, r8
 8002670:	1851      	adds	r1, r2, r1
 8002672:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8002676:	4649      	mov	r1, r9
 8002678:	414b      	adcs	r3, r1
 800267a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800267e:	f04f 0200 	mov.w	r2, #0
 8002682:	f04f 0300 	mov.w	r3, #0
 8002686:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	@ 0xb0
 800268a:	4659      	mov	r1, fp
 800268c:	00cb      	lsls	r3, r1, #3
 800268e:	4651      	mov	r1, sl
 8002690:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002694:	4651      	mov	r1, sl
 8002696:	00ca      	lsls	r2, r1, #3
 8002698:	4610      	mov	r0, r2
 800269a:	4619      	mov	r1, r3
 800269c:	4603      	mov	r3, r0
 800269e:	4642      	mov	r2, r8
 80026a0:	189b      	adds	r3, r3, r2
 80026a2:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 80026a6:	464b      	mov	r3, r9
 80026a8:	460a      	mov	r2, r1
 80026aa:	eb42 0303 	adc.w	r3, r2, r3
 80026ae:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 80026b2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80026be:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 80026c2:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	@ 0x1c8
 80026c6:	460b      	mov	r3, r1
 80026c8:	18db      	adds	r3, r3, r3
 80026ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80026ce:	4613      	mov	r3, r2
 80026d0:	eb42 0303 	adc.w	r3, r2, r3
 80026d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80026d8:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 80026dc:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
 80026e0:	f7fd fd9e 	bl	8000220 <__aeabi_uldivmod>
 80026e4:	4602      	mov	r2, r0
 80026e6:	460b      	mov	r3, r1
 80026e8:	4611      	mov	r1, r2
 80026ea:	4b3e      	ldr	r3, [pc, #248]	@ (80027e4 <UART_SetConfig+0x300>)
 80026ec:	fba3 2301 	umull	r2, r3, r3, r1
 80026f0:	095b      	lsrs	r3, r3, #5
 80026f2:	2264      	movs	r2, #100	@ 0x64
 80026f4:	fb02 f303 	mul.w	r3, r2, r3
 80026f8:	1acb      	subs	r3, r1, r3
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002700:	4b38      	ldr	r3, [pc, #224]	@ (80027e4 <UART_SetConfig+0x300>)
 8002702:	fba3 2302 	umull	r2, r3, r3, r2
 8002706:	095b      	lsrs	r3, r3, #5
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800270e:	441c      	add	r4, r3
 8002710:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002714:	2200      	movs	r2, #0
 8002716:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800271a:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 800271e:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	@ 0x1c0
 8002722:	4642      	mov	r2, r8
 8002724:	464b      	mov	r3, r9
 8002726:	1891      	adds	r1, r2, r2
 8002728:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 800272c:	415b      	adcs	r3, r3
 800272e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002732:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8002736:	4641      	mov	r1, r8
 8002738:	1851      	adds	r1, r2, r1
 800273a:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 800273e:	4649      	mov	r1, r9
 8002740:	414b      	adcs	r3, r1
 8002742:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002746:	f04f 0200 	mov.w	r2, #0
 800274a:	f04f 0300 	mov.w	r3, #0
 800274e:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	@ 0x98
 8002752:	4659      	mov	r1, fp
 8002754:	00cb      	lsls	r3, r1, #3
 8002756:	4651      	mov	r1, sl
 8002758:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800275c:	4651      	mov	r1, sl
 800275e:	00ca      	lsls	r2, r1, #3
 8002760:	4610      	mov	r0, r2
 8002762:	4619      	mov	r1, r3
 8002764:	4603      	mov	r3, r0
 8002766:	4642      	mov	r2, r8
 8002768:	189b      	adds	r3, r3, r2
 800276a:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 800276e:	464b      	mov	r3, r9
 8002770:	460a      	mov	r2, r1
 8002772:	eb42 0303 	adc.w	r3, r2, r3
 8002776:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800277a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8002786:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 800278a:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	@ 0x1b0
 800278e:	460b      	mov	r3, r1
 8002790:	18db      	adds	r3, r3, r3
 8002792:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002796:	4613      	mov	r3, r2
 8002798:	eb42 0303 	adc.w	r3, r2, r3
 800279c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80027a0:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80027a4:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
 80027a8:	f7fd fd3a 	bl	8000220 <__aeabi_uldivmod>
 80027ac:	4602      	mov	r2, r0
 80027ae:	460b      	mov	r3, r1
 80027b0:	4b0c      	ldr	r3, [pc, #48]	@ (80027e4 <UART_SetConfig+0x300>)
 80027b2:	fba3 1302 	umull	r1, r3, r3, r2
 80027b6:	095b      	lsrs	r3, r3, #5
 80027b8:	2164      	movs	r1, #100	@ 0x64
 80027ba:	fb01 f303 	mul.w	r3, r1, r3
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	3332      	adds	r3, #50	@ 0x32
 80027c4:	4a07      	ldr	r2, [pc, #28]	@ (80027e4 <UART_SetConfig+0x300>)
 80027c6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ca:	095b      	lsrs	r3, r3, #5
 80027cc:	f003 0207 	and.w	r2, r3, #7
 80027d0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4422      	add	r2, r4
 80027d8:	609a      	str	r2, [r3, #8]
 80027da:	e34a      	b.n	8002e72 <UART_SetConfig+0x98e>
 80027dc:	40011000 	.word	0x40011000
 80027e0:	40011400 	.word	0x40011400
 80027e4:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80027e8:	f7fe fe2a 	bl	8001440 <HAL_RCC_GetPCLK1Freq>
 80027ec:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80027f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80027f4:	2200      	movs	r2, #0
 80027f6:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80027fa:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 80027fe:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	@ 0x1a8
 8002802:	4622      	mov	r2, r4
 8002804:	462b      	mov	r3, r5
 8002806:	1891      	adds	r1, r2, r2
 8002808:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 800280c:	415b      	adcs	r3, r3
 800280e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002812:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002816:	4621      	mov	r1, r4
 8002818:	eb12 0a01 	adds.w	sl, r2, r1
 800281c:	4629      	mov	r1, r5
 800281e:	eb43 0b01 	adc.w	fp, r3, r1
 8002822:	f04f 0200 	mov.w	r2, #0
 8002826:	f04f 0300 	mov.w	r3, #0
 800282a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800282e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002832:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002836:	4692      	mov	sl, r2
 8002838:	469b      	mov	fp, r3
 800283a:	4623      	mov	r3, r4
 800283c:	eb1a 0303 	adds.w	r3, sl, r3
 8002840:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002844:	462b      	mov	r3, r5
 8002846:	eb4b 0303 	adc.w	r3, fp, r3
 800284a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800284e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 800285a:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 800285e:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	@ 0x198
 8002862:	460b      	mov	r3, r1
 8002864:	18db      	adds	r3, r3, r3
 8002866:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800286a:	4613      	mov	r3, r2
 800286c:	eb42 0303 	adc.w	r3, r2, r3
 8002870:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002874:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8002878:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 800287c:	f7fd fcd0 	bl	8000220 <__aeabi_uldivmod>
 8002880:	4602      	mov	r2, r0
 8002882:	460b      	mov	r3, r1
 8002884:	4b61      	ldr	r3, [pc, #388]	@ (8002a0c <UART_SetConfig+0x528>)
 8002886:	fba3 2302 	umull	r2, r3, r3, r2
 800288a:	095b      	lsrs	r3, r3, #5
 800288c:	011c      	lsls	r4, r3, #4
 800288e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002892:	2200      	movs	r2, #0
 8002894:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8002898:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 800289c:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	@ 0x190
 80028a0:	4642      	mov	r2, r8
 80028a2:	464b      	mov	r3, r9
 80028a4:	1891      	adds	r1, r2, r2
 80028a6:	67b9      	str	r1, [r7, #120]	@ 0x78
 80028a8:	415b      	adcs	r3, r3
 80028aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80028ac:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80028b0:	4641      	mov	r1, r8
 80028b2:	1851      	adds	r1, r2, r1
 80028b4:	6739      	str	r1, [r7, #112]	@ 0x70
 80028b6:	4649      	mov	r1, r9
 80028b8:	414b      	adcs	r3, r1
 80028ba:	677b      	str	r3, [r7, #116]	@ 0x74
 80028bc:	f04f 0200 	mov.w	r2, #0
 80028c0:	f04f 0300 	mov.w	r3, #0
 80028c4:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	@ 0x70
 80028c8:	4659      	mov	r1, fp
 80028ca:	00cb      	lsls	r3, r1, #3
 80028cc:	4651      	mov	r1, sl
 80028ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028d2:	4651      	mov	r1, sl
 80028d4:	00ca      	lsls	r2, r1, #3
 80028d6:	4610      	mov	r0, r2
 80028d8:	4619      	mov	r1, r3
 80028da:	4603      	mov	r3, r0
 80028dc:	4642      	mov	r2, r8
 80028de:	189b      	adds	r3, r3, r2
 80028e0:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80028e4:	464b      	mov	r3, r9
 80028e6:	460a      	mov	r2, r1
 80028e8:	eb42 0303 	adc.w	r3, r2, r3
 80028ec:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 80028f0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80028fc:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 8002900:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	@ 0x180
 8002904:	460b      	mov	r3, r1
 8002906:	18db      	adds	r3, r3, r3
 8002908:	66bb      	str	r3, [r7, #104]	@ 0x68
 800290a:	4613      	mov	r3, r2
 800290c:	eb42 0303 	adc.w	r3, r2, r3
 8002910:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002912:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8002916:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800291a:	f7fd fc81 	bl	8000220 <__aeabi_uldivmod>
 800291e:	4602      	mov	r2, r0
 8002920:	460b      	mov	r3, r1
 8002922:	4611      	mov	r1, r2
 8002924:	4b39      	ldr	r3, [pc, #228]	@ (8002a0c <UART_SetConfig+0x528>)
 8002926:	fba3 2301 	umull	r2, r3, r3, r1
 800292a:	095b      	lsrs	r3, r3, #5
 800292c:	2264      	movs	r2, #100	@ 0x64
 800292e:	fb02 f303 	mul.w	r3, r2, r3
 8002932:	1acb      	subs	r3, r1, r3
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800293a:	4b34      	ldr	r3, [pc, #208]	@ (8002a0c <UART_SetConfig+0x528>)
 800293c:	fba3 2302 	umull	r2, r3, r3, r2
 8002940:	095b      	lsrs	r3, r3, #5
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002948:	441c      	add	r4, r3
 800294a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800294e:	2200      	movs	r2, #0
 8002950:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8002954:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8002958:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	@ 0x178
 800295c:	4642      	mov	r2, r8
 800295e:	464b      	mov	r3, r9
 8002960:	1891      	adds	r1, r2, r2
 8002962:	6639      	str	r1, [r7, #96]	@ 0x60
 8002964:	415b      	adcs	r3, r3
 8002966:	667b      	str	r3, [r7, #100]	@ 0x64
 8002968:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800296c:	4641      	mov	r1, r8
 800296e:	1851      	adds	r1, r2, r1
 8002970:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002972:	4649      	mov	r1, r9
 8002974:	414b      	adcs	r3, r1
 8002976:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002978:	f04f 0200 	mov.w	r2, #0
 800297c:	f04f 0300 	mov.w	r3, #0
 8002980:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	@ 0x58
 8002984:	4659      	mov	r1, fp
 8002986:	00cb      	lsls	r3, r1, #3
 8002988:	4651      	mov	r1, sl
 800298a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800298e:	4651      	mov	r1, sl
 8002990:	00ca      	lsls	r2, r1, #3
 8002992:	4610      	mov	r0, r2
 8002994:	4619      	mov	r1, r3
 8002996:	4603      	mov	r3, r0
 8002998:	4642      	mov	r2, r8
 800299a:	189b      	adds	r3, r3, r2
 800299c:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 80029a0:	464b      	mov	r3, r9
 80029a2:	460a      	mov	r2, r1
 80029a4:	eb42 0303 	adc.w	r3, r2, r3
 80029a8:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 80029ac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 80029b8:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 80029bc:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	@ 0x168
 80029c0:	460b      	mov	r3, r1
 80029c2:	18db      	adds	r3, r3, r3
 80029c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80029c6:	4613      	mov	r3, r2
 80029c8:	eb42 0303 	adc.w	r3, r2, r3
 80029cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80029ce:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80029d2:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 80029d6:	f7fd fc23 	bl	8000220 <__aeabi_uldivmod>
 80029da:	4602      	mov	r2, r0
 80029dc:	460b      	mov	r3, r1
 80029de:	4b0b      	ldr	r3, [pc, #44]	@ (8002a0c <UART_SetConfig+0x528>)
 80029e0:	fba3 1302 	umull	r1, r3, r3, r2
 80029e4:	095b      	lsrs	r3, r3, #5
 80029e6:	2164      	movs	r1, #100	@ 0x64
 80029e8:	fb01 f303 	mul.w	r3, r1, r3
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	3332      	adds	r3, #50	@ 0x32
 80029f2:	4a06      	ldr	r2, [pc, #24]	@ (8002a0c <UART_SetConfig+0x528>)
 80029f4:	fba2 2303 	umull	r2, r3, r2, r3
 80029f8:	095b      	lsrs	r3, r3, #5
 80029fa:	f003 0207 	and.w	r2, r3, #7
 80029fe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4422      	add	r2, r4
 8002a06:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002a08:	e233      	b.n	8002e72 <UART_SetConfig+0x98e>
 8002a0a:	bf00      	nop
 8002a0c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a10:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	4b8d      	ldr	r3, [pc, #564]	@ (8002c4c <UART_SetConfig+0x768>)
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d006      	beq.n	8002a2a <UART_SetConfig+0x546>
 8002a1c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	4b8b      	ldr	r3, [pc, #556]	@ (8002c50 <UART_SetConfig+0x76c>)
 8002a24:	429a      	cmp	r2, r3
 8002a26:	f040 8117 	bne.w	8002c58 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a2a:	f7fe fd1d 	bl	8001468 <HAL_RCC_GetPCLK2Freq>
 8002a2e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a32:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002a36:	2200      	movs	r2, #0
 8002a38:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8002a3c:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 8002a40:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8002a44:	4622      	mov	r2, r4
 8002a46:	462b      	mov	r3, r5
 8002a48:	1891      	adds	r1, r2, r2
 8002a4a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002a4c:	415b      	adcs	r3, r3
 8002a4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002a54:	4621      	mov	r1, r4
 8002a56:	eb12 0801 	adds.w	r8, r2, r1
 8002a5a:	4629      	mov	r1, r5
 8002a5c:	eb43 0901 	adc.w	r9, r3, r1
 8002a60:	f04f 0200 	mov.w	r2, #0
 8002a64:	f04f 0300 	mov.w	r3, #0
 8002a68:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a6c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a70:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a74:	4690      	mov	r8, r2
 8002a76:	4699      	mov	r9, r3
 8002a78:	4623      	mov	r3, r4
 8002a7a:	eb18 0303 	adds.w	r3, r8, r3
 8002a7e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8002a82:	462b      	mov	r3, r5
 8002a84:	eb49 0303 	adc.w	r3, r9, r3
 8002a88:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8002a8c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002a98:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 8002a9c:	f04f 0200 	mov.w	r2, #0
 8002aa0:	f04f 0300 	mov.w	r3, #0
 8002aa4:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	@ 0x150
 8002aa8:	4629      	mov	r1, r5
 8002aaa:	008b      	lsls	r3, r1, #2
 8002aac:	4621      	mov	r1, r4
 8002aae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ab2:	4621      	mov	r1, r4
 8002ab4:	008a      	lsls	r2, r1, #2
 8002ab6:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 8002aba:	f7fd fbb1 	bl	8000220 <__aeabi_uldivmod>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	4b64      	ldr	r3, [pc, #400]	@ (8002c54 <UART_SetConfig+0x770>)
 8002ac4:	fba3 2302 	umull	r2, r3, r3, r2
 8002ac8:	095b      	lsrs	r3, r3, #5
 8002aca:	011c      	lsls	r4, r3, #4
 8002acc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8002ad6:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8002ada:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	@ 0x148
 8002ade:	4642      	mov	r2, r8
 8002ae0:	464b      	mov	r3, r9
 8002ae2:	1891      	adds	r1, r2, r2
 8002ae4:	6439      	str	r1, [r7, #64]	@ 0x40
 8002ae6:	415b      	adcs	r3, r3
 8002ae8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002aea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002aee:	4641      	mov	r1, r8
 8002af0:	1851      	adds	r1, r2, r1
 8002af2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002af4:	4649      	mov	r1, r9
 8002af6:	414b      	adcs	r3, r1
 8002af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002afa:	f04f 0200 	mov.w	r2, #0
 8002afe:	f04f 0300 	mov.w	r3, #0
 8002b02:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	@ 0x38
 8002b06:	4659      	mov	r1, fp
 8002b08:	00cb      	lsls	r3, r1, #3
 8002b0a:	4651      	mov	r1, sl
 8002b0c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b10:	4651      	mov	r1, sl
 8002b12:	00ca      	lsls	r2, r1, #3
 8002b14:	4610      	mov	r0, r2
 8002b16:	4619      	mov	r1, r3
 8002b18:	4603      	mov	r3, r0
 8002b1a:	4642      	mov	r2, r8
 8002b1c:	189b      	adds	r3, r3, r2
 8002b1e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8002b22:	464b      	mov	r3, r9
 8002b24:	460a      	mov	r2, r1
 8002b26:	eb42 0303 	adc.w	r3, r2, r3
 8002b2a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8002b2e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002b3a:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8002b3e:	f04f 0200 	mov.w	r2, #0
 8002b42:	f04f 0300 	mov.w	r3, #0
 8002b46:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	@ 0x138
 8002b4a:	4649      	mov	r1, r9
 8002b4c:	008b      	lsls	r3, r1, #2
 8002b4e:	4641      	mov	r1, r8
 8002b50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b54:	4641      	mov	r1, r8
 8002b56:	008a      	lsls	r2, r1, #2
 8002b58:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8002b5c:	f7fd fb60 	bl	8000220 <__aeabi_uldivmod>
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	4611      	mov	r1, r2
 8002b66:	4b3b      	ldr	r3, [pc, #236]	@ (8002c54 <UART_SetConfig+0x770>)
 8002b68:	fba3 2301 	umull	r2, r3, r3, r1
 8002b6c:	095b      	lsrs	r3, r3, #5
 8002b6e:	2264      	movs	r2, #100	@ 0x64
 8002b70:	fb02 f303 	mul.w	r3, r2, r3
 8002b74:	1acb      	subs	r3, r1, r3
 8002b76:	011b      	lsls	r3, r3, #4
 8002b78:	3332      	adds	r3, #50	@ 0x32
 8002b7a:	4a36      	ldr	r2, [pc, #216]	@ (8002c54 <UART_SetConfig+0x770>)
 8002b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b80:	095b      	lsrs	r3, r3, #5
 8002b82:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b86:	441c      	add	r4, r3
 8002b88:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002b92:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 8002b96:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	@ 0x130
 8002b9a:	4642      	mov	r2, r8
 8002b9c:	464b      	mov	r3, r9
 8002b9e:	1891      	adds	r1, r2, r2
 8002ba0:	6339      	str	r1, [r7, #48]	@ 0x30
 8002ba2:	415b      	adcs	r3, r3
 8002ba4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ba6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002baa:	4641      	mov	r1, r8
 8002bac:	1851      	adds	r1, r2, r1
 8002bae:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002bb0:	4649      	mov	r1, r9
 8002bb2:	414b      	adcs	r3, r1
 8002bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bb6:	f04f 0200 	mov.w	r2, #0
 8002bba:	f04f 0300 	mov.w	r3, #0
 8002bbe:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	@ 0x28
 8002bc2:	4659      	mov	r1, fp
 8002bc4:	00cb      	lsls	r3, r1, #3
 8002bc6:	4651      	mov	r1, sl
 8002bc8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bcc:	4651      	mov	r1, sl
 8002bce:	00ca      	lsls	r2, r1, #3
 8002bd0:	4610      	mov	r0, r2
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	4642      	mov	r2, r8
 8002bd8:	189b      	adds	r3, r3, r2
 8002bda:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002bde:	464b      	mov	r3, r9
 8002be0:	460a      	mov	r2, r1
 8002be2:	eb42 0303 	adc.w	r3, r2, r3
 8002be6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002bea:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002bf6:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 8002bfa:	f04f 0200 	mov.w	r2, #0
 8002bfe:	f04f 0300 	mov.w	r3, #0
 8002c02:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	@ 0x120
 8002c06:	4649      	mov	r1, r9
 8002c08:	008b      	lsls	r3, r1, #2
 8002c0a:	4641      	mov	r1, r8
 8002c0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c10:	4641      	mov	r1, r8
 8002c12:	008a      	lsls	r2, r1, #2
 8002c14:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 8002c18:	f7fd fb02 	bl	8000220 <__aeabi_uldivmod>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	460b      	mov	r3, r1
 8002c20:	4b0c      	ldr	r3, [pc, #48]	@ (8002c54 <UART_SetConfig+0x770>)
 8002c22:	fba3 1302 	umull	r1, r3, r3, r2
 8002c26:	095b      	lsrs	r3, r3, #5
 8002c28:	2164      	movs	r1, #100	@ 0x64
 8002c2a:	fb01 f303 	mul.w	r3, r1, r3
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	011b      	lsls	r3, r3, #4
 8002c32:	3332      	adds	r3, #50	@ 0x32
 8002c34:	4a07      	ldr	r2, [pc, #28]	@ (8002c54 <UART_SetConfig+0x770>)
 8002c36:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3a:	095b      	lsrs	r3, r3, #5
 8002c3c:	f003 020f 	and.w	r2, r3, #15
 8002c40:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4422      	add	r2, r4
 8002c48:	609a      	str	r2, [r3, #8]
 8002c4a:	e112      	b.n	8002e72 <UART_SetConfig+0x98e>
 8002c4c:	40011000 	.word	0x40011000
 8002c50:	40011400 	.word	0x40011400
 8002c54:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c58:	f7fe fbf2 	bl	8001440 <HAL_RCC_GetPCLK1Freq>
 8002c5c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c60:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002c64:	2200      	movs	r2, #0
 8002c66:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8002c6a:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8002c6e:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	@ 0x118
 8002c72:	4642      	mov	r2, r8
 8002c74:	464b      	mov	r3, r9
 8002c76:	1891      	adds	r1, r2, r2
 8002c78:	6239      	str	r1, [r7, #32]
 8002c7a:	415b      	adcs	r3, r3
 8002c7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c82:	4641      	mov	r1, r8
 8002c84:	1854      	adds	r4, r2, r1
 8002c86:	4649      	mov	r1, r9
 8002c88:	eb43 0501 	adc.w	r5, r3, r1
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	f04f 0300 	mov.w	r3, #0
 8002c94:	00eb      	lsls	r3, r5, #3
 8002c96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c9a:	00e2      	lsls	r2, r4, #3
 8002c9c:	4614      	mov	r4, r2
 8002c9e:	461d      	mov	r5, r3
 8002ca0:	4643      	mov	r3, r8
 8002ca2:	18e3      	adds	r3, r4, r3
 8002ca4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002ca8:	464b      	mov	r3, r9
 8002caa:	eb45 0303 	adc.w	r3, r5, r3
 8002cae:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002cb2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002cbe:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8002cc2:	f04f 0200 	mov.w	r2, #0
 8002cc6:	f04f 0300 	mov.w	r3, #0
 8002cca:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8002cce:	4629      	mov	r1, r5
 8002cd0:	008b      	lsls	r3, r1, #2
 8002cd2:	4621      	mov	r1, r4
 8002cd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cd8:	4621      	mov	r1, r4
 8002cda:	008a      	lsls	r2, r1, #2
 8002cdc:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8002ce0:	f7fd fa9e 	bl	8000220 <__aeabi_uldivmod>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	4b65      	ldr	r3, [pc, #404]	@ (8002e80 <UART_SetConfig+0x99c>)
 8002cea:	fba3 2302 	umull	r2, r3, r3, r2
 8002cee:	095b      	lsrs	r3, r3, #5
 8002cf0:	011c      	lsls	r4, r3, #4
 8002cf2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002cfc:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8002d00:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	@ 0x100
 8002d04:	4642      	mov	r2, r8
 8002d06:	464b      	mov	r3, r9
 8002d08:	1891      	adds	r1, r2, r2
 8002d0a:	61b9      	str	r1, [r7, #24]
 8002d0c:	415b      	adcs	r3, r3
 8002d0e:	61fb      	str	r3, [r7, #28]
 8002d10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d14:	4641      	mov	r1, r8
 8002d16:	1851      	adds	r1, r2, r1
 8002d18:	6139      	str	r1, [r7, #16]
 8002d1a:	4649      	mov	r1, r9
 8002d1c:	414b      	adcs	r3, r1
 8002d1e:	617b      	str	r3, [r7, #20]
 8002d20:	f04f 0200 	mov.w	r2, #0
 8002d24:	f04f 0300 	mov.w	r3, #0
 8002d28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d2c:	4659      	mov	r1, fp
 8002d2e:	00cb      	lsls	r3, r1, #3
 8002d30:	4651      	mov	r1, sl
 8002d32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d36:	4651      	mov	r1, sl
 8002d38:	00ca      	lsls	r2, r1, #3
 8002d3a:	4610      	mov	r0, r2
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	4603      	mov	r3, r0
 8002d40:	4642      	mov	r2, r8
 8002d42:	189b      	adds	r3, r3, r2
 8002d44:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002d48:	464b      	mov	r3, r9
 8002d4a:	460a      	mov	r2, r1
 8002d4c:	eb42 0303 	adc.w	r3, r2, r3
 8002d50:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002d54:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002d60:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8002d64:	f04f 0200 	mov.w	r2, #0
 8002d68:	f04f 0300 	mov.w	r3, #0
 8002d6c:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 8002d70:	4649      	mov	r1, r9
 8002d72:	008b      	lsls	r3, r1, #2
 8002d74:	4641      	mov	r1, r8
 8002d76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d7a:	4641      	mov	r1, r8
 8002d7c:	008a      	lsls	r2, r1, #2
 8002d7e:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 8002d82:	f7fd fa4d 	bl	8000220 <__aeabi_uldivmod>
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	4611      	mov	r1, r2
 8002d8c:	4b3c      	ldr	r3, [pc, #240]	@ (8002e80 <UART_SetConfig+0x99c>)
 8002d8e:	fba3 2301 	umull	r2, r3, r3, r1
 8002d92:	095b      	lsrs	r3, r3, #5
 8002d94:	2264      	movs	r2, #100	@ 0x64
 8002d96:	fb02 f303 	mul.w	r3, r2, r3
 8002d9a:	1acb      	subs	r3, r1, r3
 8002d9c:	011b      	lsls	r3, r3, #4
 8002d9e:	3332      	adds	r3, #50	@ 0x32
 8002da0:	4a37      	ldr	r2, [pc, #220]	@ (8002e80 <UART_SetConfig+0x99c>)
 8002da2:	fba2 2303 	umull	r2, r3, r2, r3
 8002da6:	095b      	lsrs	r3, r3, #5
 8002da8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002dac:	441c      	add	r4, r3
 8002dae:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002db2:	2200      	movs	r2, #0
 8002db4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002db8:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002dbc:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8002dc0:	4642      	mov	r2, r8
 8002dc2:	464b      	mov	r3, r9
 8002dc4:	1891      	adds	r1, r2, r2
 8002dc6:	60b9      	str	r1, [r7, #8]
 8002dc8:	415b      	adcs	r3, r3
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002dd0:	4641      	mov	r1, r8
 8002dd2:	1851      	adds	r1, r2, r1
 8002dd4:	6039      	str	r1, [r7, #0]
 8002dd6:	4649      	mov	r1, r9
 8002dd8:	414b      	adcs	r3, r1
 8002dda:	607b      	str	r3, [r7, #4]
 8002ddc:	f04f 0200 	mov.w	r2, #0
 8002de0:	f04f 0300 	mov.w	r3, #0
 8002de4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002de8:	4659      	mov	r1, fp
 8002dea:	00cb      	lsls	r3, r1, #3
 8002dec:	4651      	mov	r1, sl
 8002dee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002df2:	4651      	mov	r1, sl
 8002df4:	00ca      	lsls	r2, r1, #3
 8002df6:	4610      	mov	r0, r2
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	4642      	mov	r2, r8
 8002dfe:	189b      	adds	r3, r3, r2
 8002e00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002e04:	464b      	mov	r3, r9
 8002e06:	460a      	mov	r2, r1
 8002e08:	eb42 0303 	adc.w	r3, r2, r3
 8002e0c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002e10:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002e1c:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	f04f 0300 	mov.w	r3, #0
 8002e28:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8002e2c:	4649      	mov	r1, r9
 8002e2e:	008b      	lsls	r3, r1, #2
 8002e30:	4641      	mov	r1, r8
 8002e32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e36:	4641      	mov	r1, r8
 8002e38:	008a      	lsls	r2, r1, #2
 8002e3a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002e3e:	f7fd f9ef 	bl	8000220 <__aeabi_uldivmod>
 8002e42:	4602      	mov	r2, r0
 8002e44:	460b      	mov	r3, r1
 8002e46:	4b0e      	ldr	r3, [pc, #56]	@ (8002e80 <UART_SetConfig+0x99c>)
 8002e48:	fba3 1302 	umull	r1, r3, r3, r2
 8002e4c:	095b      	lsrs	r3, r3, #5
 8002e4e:	2164      	movs	r1, #100	@ 0x64
 8002e50:	fb01 f303 	mul.w	r3, r1, r3
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	011b      	lsls	r3, r3, #4
 8002e58:	3332      	adds	r3, #50	@ 0x32
 8002e5a:	4a09      	ldr	r2, [pc, #36]	@ (8002e80 <UART_SetConfig+0x99c>)
 8002e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e60:	095b      	lsrs	r3, r3, #5
 8002e62:	f003 020f 	and.w	r2, r3, #15
 8002e66:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4422      	add	r2, r4
 8002e6e:	609a      	str	r2, [r3, #8]
}
 8002e70:	e7ff      	b.n	8002e72 <UART_SetConfig+0x98e>
 8002e72:	bf00      	nop
 8002e74:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e7e:	bf00      	nop
 8002e80:	51eb851f 	.word	0x51eb851f

08002e84 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002e92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e96:	2b84      	cmp	r3, #132	@ 0x84
 8002e98:	d005      	beq.n	8002ea6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002e9a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	3303      	adds	r3, #3
 8002ea4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3714      	adds	r7, #20
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002eba:	f3ef 8305 	mrs	r3, IPSR
 8002ebe:	607b      	str	r3, [r7, #4]
  return(result);
 8002ec0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	bf14      	ite	ne
 8002ec6:	2301      	movne	r3, #1
 8002ec8:	2300      	moveq	r3, #0
 8002eca:	b2db      	uxtb	r3, r3
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002edc:	f001 f922 	bl	8004124 <vTaskStartScheduler>
  
  return osOK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002ee6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ee8:	b089      	sub	sp, #36	@ 0x24
 8002eea:	af04      	add	r7, sp, #16
 8002eec:	6078      	str	r0, [r7, #4]
 8002eee:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d020      	beq.n	8002f3a <osThreadCreate+0x54>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d01c      	beq.n	8002f3a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685c      	ldr	r4, [r3, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	691e      	ldr	r6, [r3, #16]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff ffb6 	bl	8002e84 <makeFreeRtosPriority>
 8002f18:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002f22:	9202      	str	r2, [sp, #8]
 8002f24:	9301      	str	r3, [sp, #4]
 8002f26:	9100      	str	r1, [sp, #0]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	4632      	mov	r2, r6
 8002f2c:	4629      	mov	r1, r5
 8002f2e:	4620      	mov	r0, r4
 8002f30:	f000 ff34 	bl	8003d9c <xTaskCreateStatic>
 8002f34:	4603      	mov	r3, r0
 8002f36:	60fb      	str	r3, [r7, #12]
 8002f38:	e01c      	b.n	8002f74 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685c      	ldr	r4, [r3, #4]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002f46:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff ff98 	bl	8002e84 <makeFreeRtosPriority>
 8002f54:	4602      	mov	r2, r0
 8002f56:	f107 030c 	add.w	r3, r7, #12
 8002f5a:	9301      	str	r3, [sp, #4]
 8002f5c:	9200      	str	r2, [sp, #0]
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	4632      	mov	r2, r6
 8002f62:	4629      	mov	r1, r5
 8002f64:	4620      	mov	r0, r4
 8002f66:	f000 ff78 	bl	8003e5a <xTaskCreate>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d001      	beq.n	8002f74 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	e000      	b.n	8002f76 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002f74:	68fb      	ldr	r3, [r7, #12]
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3714      	adds	r7, #20
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f7e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b084      	sub	sp, #16
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <osDelay+0x16>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	e000      	b.n	8002f96 <osDelay+0x18>
 8002f94:	2301      	movs	r3, #1
 8002f96:	4618      	mov	r0, r3
 8002f98:	f001 f88e 	bl	80040b8 <vTaskDelay>
  
  return osOK;
 8002f9c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b086      	sub	sp, #24
 8002faa:	af02      	add	r7, sp, #8
 8002fac:	6078      	str	r0, [r7, #4]
 8002fae:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00f      	beq.n	8002fd8 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d10a      	bne.n	8002fd4 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	2203      	movs	r2, #3
 8002fc4:	9200      	str	r2, [sp, #0]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	2100      	movs	r1, #0
 8002fca:	2001      	movs	r0, #1
 8002fcc:	f000 f9c0 	bl	8003350 <xQueueGenericCreateStatic>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	e016      	b.n	8003002 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	e014      	b.n	8003002 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d110      	bne.n	8003000 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8002fde:	2203      	movs	r2, #3
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	2001      	movs	r0, #1
 8002fe4:	f000 fa30 	bl	8003448 <xQueueGenericCreate>
 8002fe8:	60f8      	str	r0, [r7, #12]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d005      	beq.n	8002ffc <osSemaphoreCreate+0x56>
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 fa84 	bl	8003504 <xQueueGenericSend>
      return sema;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	e000      	b.n	8003002 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8003000:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8003002:	4618      	mov	r0, r3
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
	...

0800300c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8003016:	2300      	movs	r3, #0
 8003018:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8003020:	2380      	movs	r3, #128	@ 0x80
 8003022:	e03a      	b.n	800309a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8003024:	2300      	movs	r3, #0
 8003026:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302e:	d103      	bne.n	8003038 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8003030:	f04f 33ff 	mov.w	r3, #4294967295
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	e009      	b.n	800304c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d006      	beq.n	800304c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <osSemaphoreWait+0x40>
      ticks = 1;
 8003048:	2301      	movs	r3, #1
 800304a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800304c:	f7ff ff32 	bl	8002eb4 <inHandlerMode>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d017      	beq.n	8003086 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8003056:	f107 0308 	add.w	r3, r7, #8
 800305a:	461a      	mov	r2, r3
 800305c:	2100      	movs	r1, #0
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 fcf2 	bl	8003a48 <xQueueReceiveFromISR>
 8003064:	4603      	mov	r3, r0
 8003066:	2b01      	cmp	r3, #1
 8003068:	d001      	beq.n	800306e <osSemaphoreWait+0x62>
      return osErrorOS;
 800306a:	23ff      	movs	r3, #255	@ 0xff
 800306c:	e015      	b.n	800309a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d011      	beq.n	8003098 <osSemaphoreWait+0x8c>
 8003074:	4b0b      	ldr	r3, [pc, #44]	@ (80030a4 <osSemaphoreWait+0x98>)
 8003076:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	f3bf 8f4f 	dsb	sy
 8003080:	f3bf 8f6f 	isb	sy
 8003084:	e008      	b.n	8003098 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8003086:	68f9      	ldr	r1, [r7, #12]
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 fbcd 	bl	8003828 <xQueueSemaphoreTake>
 800308e:	4603      	mov	r3, r0
 8003090:	2b01      	cmp	r3, #1
 8003092:	d001      	beq.n	8003098 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8003094:	23ff      	movs	r3, #255	@ 0xff
 8003096:	e000      	b.n	800309a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	e000ed04 	.word	0xe000ed04

080030a8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80030b0:	2300      	movs	r3, #0
 80030b2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80030b4:	2300      	movs	r3, #0
 80030b6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80030b8:	f7ff fefc 	bl	8002eb4 <inHandlerMode>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d016      	beq.n	80030f0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80030c2:	f107 0308 	add.w	r3, r7, #8
 80030c6:	4619      	mov	r1, r3
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 fb1d 	bl	8003708 <xQueueGiveFromISR>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d001      	beq.n	80030d8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80030d4:	23ff      	movs	r3, #255	@ 0xff
 80030d6:	e017      	b.n	8003108 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d013      	beq.n	8003106 <osSemaphoreRelease+0x5e>
 80030de:	4b0c      	ldr	r3, [pc, #48]	@ (8003110 <osSemaphoreRelease+0x68>)
 80030e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030e4:	601a      	str	r2, [r3, #0]
 80030e6:	f3bf 8f4f 	dsb	sy
 80030ea:	f3bf 8f6f 	isb	sy
 80030ee:	e00a      	b.n	8003106 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80030f0:	2300      	movs	r3, #0
 80030f2:	2200      	movs	r2, #0
 80030f4:	2100      	movs	r1, #0
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 fa04 	bl	8003504 <xQueueGenericSend>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d001      	beq.n	8003106 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8003102:	23ff      	movs	r3, #255	@ 0xff
 8003104:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8003106:	68fb      	ldr	r3, [r7, #12]
}
 8003108:	4618      	mov	r0, r3
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	e000ed04 	.word	0xe000ed04

08003114 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f103 0208 	add.w	r2, r3, #8
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f04f 32ff 	mov.w	r2, #4294967295
 800312c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f103 0208 	add.w	r2, r3, #8
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f103 0208 	add.w	r2, r3, #8
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003162:	bf00      	nop
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr

0800316e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800316e:	b480      	push	{r7}
 8003170:	b085      	sub	sp, #20
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
 8003176:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	689a      	ldr	r2, [r3, #8]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	683a      	ldr	r2, [r7, #0]
 8003192:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	1c5a      	adds	r2, r3, #1
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	601a      	str	r2, [r3, #0]
}
 80031aa:	bf00      	nop
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80031b6:	b480      	push	{r7}
 80031b8:	b085      	sub	sp, #20
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
 80031be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031cc:	d103      	bne.n	80031d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	60fb      	str	r3, [r7, #12]
 80031d4:	e00c      	b.n	80031f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	3308      	adds	r3, #8
 80031da:	60fb      	str	r3, [r7, #12]
 80031dc:	e002      	b.n	80031e4 <vListInsert+0x2e>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	60fb      	str	r3, [r7, #12]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d2f6      	bcs.n	80031de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	1c5a      	adds	r2, r3, #1
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	601a      	str	r2, [r3, #0]
}
 800321c:	bf00      	nop
 800321e:	3714      	adds	r7, #20
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6892      	ldr	r2, [r2, #8]
 800323e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	6852      	ldr	r2, [r2, #4]
 8003248:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	429a      	cmp	r2, r3
 8003252:	d103      	bne.n	800325c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	1e5a      	subs	r2, r3, #1
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d10b      	bne.n	80032a8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003294:	f383 8811 	msr	BASEPRI, r3
 8003298:	f3bf 8f6f 	isb	sy
 800329c:	f3bf 8f4f 	dsb	sy
 80032a0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80032a2:	bf00      	nop
 80032a4:	bf00      	nop
 80032a6:	e7fd      	b.n	80032a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80032a8:	f001 fec6 	bl	8005038 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b4:	68f9      	ldr	r1, [r7, #12]
 80032b6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80032b8:	fb01 f303 	mul.w	r3, r1, r3
 80032bc:	441a      	add	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032d8:	3b01      	subs	r3, #1
 80032da:	68f9      	ldr	r1, [r7, #12]
 80032dc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80032de:	fb01 f303 	mul.w	r3, r1, r3
 80032e2:	441a      	add	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	22ff      	movs	r2, #255	@ 0xff
 80032ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	22ff      	movs	r2, #255	@ 0xff
 80032f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d114      	bne.n	8003328 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d01a      	beq.n	800333c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	3310      	adds	r3, #16
 800330a:	4618      	mov	r0, r3
 800330c:	f001 f958 	bl	80045c0 <xTaskRemoveFromEventList>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d012      	beq.n	800333c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003316:	4b0d      	ldr	r3, [pc, #52]	@ (800334c <xQueueGenericReset+0xd0>)
 8003318:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	f3bf 8f4f 	dsb	sy
 8003322:	f3bf 8f6f 	isb	sy
 8003326:	e009      	b.n	800333c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	3310      	adds	r3, #16
 800332c:	4618      	mov	r0, r3
 800332e:	f7ff fef1 	bl	8003114 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	3324      	adds	r3, #36	@ 0x24
 8003336:	4618      	mov	r0, r3
 8003338:	f7ff feec 	bl	8003114 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800333c:	f001 feae 	bl	800509c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003340:	2301      	movs	r3, #1
}
 8003342:	4618      	mov	r0, r3
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	e000ed04 	.word	0xe000ed04

08003350 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003350:	b580      	push	{r7, lr}
 8003352:	b08e      	sub	sp, #56	@ 0x38
 8003354:	af02      	add	r7, sp, #8
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
 800335c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10b      	bne.n	800337c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003368:	f383 8811 	msr	BASEPRI, r3
 800336c:	f3bf 8f6f 	isb	sy
 8003370:	f3bf 8f4f 	dsb	sy
 8003374:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003376:	bf00      	nop
 8003378:	bf00      	nop
 800337a:	e7fd      	b.n	8003378 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10b      	bne.n	800339a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003386:	f383 8811 	msr	BASEPRI, r3
 800338a:	f3bf 8f6f 	isb	sy
 800338e:	f3bf 8f4f 	dsb	sy
 8003392:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003394:	bf00      	nop
 8003396:	bf00      	nop
 8003398:	e7fd      	b.n	8003396 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d002      	beq.n	80033a6 <xQueueGenericCreateStatic+0x56>
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <xQueueGenericCreateStatic+0x5a>
 80033a6:	2301      	movs	r3, #1
 80033a8:	e000      	b.n	80033ac <xQueueGenericCreateStatic+0x5c>
 80033aa:	2300      	movs	r3, #0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10b      	bne.n	80033c8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80033b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033b4:	f383 8811 	msr	BASEPRI, r3
 80033b8:	f3bf 8f6f 	isb	sy
 80033bc:	f3bf 8f4f 	dsb	sy
 80033c0:	623b      	str	r3, [r7, #32]
}
 80033c2:	bf00      	nop
 80033c4:	bf00      	nop
 80033c6:	e7fd      	b.n	80033c4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d102      	bne.n	80033d4 <xQueueGenericCreateStatic+0x84>
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <xQueueGenericCreateStatic+0x88>
 80033d4:	2301      	movs	r3, #1
 80033d6:	e000      	b.n	80033da <xQueueGenericCreateStatic+0x8a>
 80033d8:	2300      	movs	r3, #0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10b      	bne.n	80033f6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80033de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033e2:	f383 8811 	msr	BASEPRI, r3
 80033e6:	f3bf 8f6f 	isb	sy
 80033ea:	f3bf 8f4f 	dsb	sy
 80033ee:	61fb      	str	r3, [r7, #28]
}
 80033f0:	bf00      	nop
 80033f2:	bf00      	nop
 80033f4:	e7fd      	b.n	80033f2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80033f6:	2348      	movs	r3, #72	@ 0x48
 80033f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	2b48      	cmp	r3, #72	@ 0x48
 80033fe:	d00b      	beq.n	8003418 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003404:	f383 8811 	msr	BASEPRI, r3
 8003408:	f3bf 8f6f 	isb	sy
 800340c:	f3bf 8f4f 	dsb	sy
 8003410:	61bb      	str	r3, [r7, #24]
}
 8003412:	bf00      	nop
 8003414:	bf00      	nop
 8003416:	e7fd      	b.n	8003414 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800341c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00d      	beq.n	800343e <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003424:	2201      	movs	r2, #1
 8003426:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800342a:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800342e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	4613      	mov	r3, r2
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	68b9      	ldr	r1, [r7, #8]
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f000 f844 	bl	80034c6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800343e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003440:	4618      	mov	r0, r3
 8003442:	3730      	adds	r7, #48	@ 0x30
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003448:	b580      	push	{r7, lr}
 800344a:	b08a      	sub	sp, #40	@ 0x28
 800344c:	af02      	add	r7, sp, #8
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	4613      	mov	r3, r2
 8003454:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d10b      	bne.n	8003474 <xQueueGenericCreate+0x2c>
	__asm volatile
 800345c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003460:	f383 8811 	msr	BASEPRI, r3
 8003464:	f3bf 8f6f 	isb	sy
 8003468:	f3bf 8f4f 	dsb	sy
 800346c:	613b      	str	r3, [r7, #16]
}
 800346e:	bf00      	nop
 8003470:	bf00      	nop
 8003472:	e7fd      	b.n	8003470 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d102      	bne.n	8003480 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800347a:	2300      	movs	r3, #0
 800347c:	61fb      	str	r3, [r7, #28]
 800347e:	e004      	b.n	800348a <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	68ba      	ldr	r2, [r7, #8]
 8003484:	fb02 f303 	mul.w	r3, r2, r3
 8003488:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	3348      	adds	r3, #72	@ 0x48
 800348e:	4618      	mov	r0, r3
 8003490:	f001 fef4 	bl	800527c <pvPortMalloc>
 8003494:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00f      	beq.n	80034bc <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	3348      	adds	r3, #72	@ 0x48
 80034a0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80034aa:	79fa      	ldrb	r2, [r7, #7]
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	9300      	str	r3, [sp, #0]
 80034b0:	4613      	mov	r3, r2
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	68b9      	ldr	r1, [r7, #8]
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f000 f805 	bl	80034c6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80034bc:	69bb      	ldr	r3, [r7, #24]
	}
 80034be:	4618      	mov	r0, r3
 80034c0:	3720      	adds	r7, #32
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b084      	sub	sp, #16
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	60f8      	str	r0, [r7, #12]
 80034ce:	60b9      	str	r1, [r7, #8]
 80034d0:	607a      	str	r2, [r7, #4]
 80034d2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d103      	bne.n	80034e2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	e002      	b.n	80034e8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80034f4:	2101      	movs	r1, #1
 80034f6:	69b8      	ldr	r0, [r7, #24]
 80034f8:	f7ff fec0 	bl	800327c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80034fc:	bf00      	nop
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b08e      	sub	sp, #56	@ 0x38
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
 8003510:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003512:	2300      	movs	r3, #0
 8003514:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800351a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10b      	bne.n	8003538 <xQueueGenericSend+0x34>
	__asm volatile
 8003520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003524:	f383 8811 	msr	BASEPRI, r3
 8003528:	f3bf 8f6f 	isb	sy
 800352c:	f3bf 8f4f 	dsb	sy
 8003530:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003532:	bf00      	nop
 8003534:	bf00      	nop
 8003536:	e7fd      	b.n	8003534 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d103      	bne.n	8003546 <xQueueGenericSend+0x42>
 800353e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <xQueueGenericSend+0x46>
 8003546:	2301      	movs	r3, #1
 8003548:	e000      	b.n	800354c <xQueueGenericSend+0x48>
 800354a:	2300      	movs	r3, #0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10b      	bne.n	8003568 <xQueueGenericSend+0x64>
	__asm volatile
 8003550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003554:	f383 8811 	msr	BASEPRI, r3
 8003558:	f3bf 8f6f 	isb	sy
 800355c:	f3bf 8f4f 	dsb	sy
 8003560:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003562:	bf00      	nop
 8003564:	bf00      	nop
 8003566:	e7fd      	b.n	8003564 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	2b02      	cmp	r3, #2
 800356c:	d103      	bne.n	8003576 <xQueueGenericSend+0x72>
 800356e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003570:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003572:	2b01      	cmp	r3, #1
 8003574:	d101      	bne.n	800357a <xQueueGenericSend+0x76>
 8003576:	2301      	movs	r3, #1
 8003578:	e000      	b.n	800357c <xQueueGenericSend+0x78>
 800357a:	2300      	movs	r3, #0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10b      	bne.n	8003598 <xQueueGenericSend+0x94>
	__asm volatile
 8003580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003584:	f383 8811 	msr	BASEPRI, r3
 8003588:	f3bf 8f6f 	isb	sy
 800358c:	f3bf 8f4f 	dsb	sy
 8003590:	623b      	str	r3, [r7, #32]
}
 8003592:	bf00      	nop
 8003594:	bf00      	nop
 8003596:	e7fd      	b.n	8003594 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003598:	f001 f9d8 	bl	800494c <xTaskGetSchedulerState>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d102      	bne.n	80035a8 <xQueueGenericSend+0xa4>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d101      	bne.n	80035ac <xQueueGenericSend+0xa8>
 80035a8:	2301      	movs	r3, #1
 80035aa:	e000      	b.n	80035ae <xQueueGenericSend+0xaa>
 80035ac:	2300      	movs	r3, #0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10b      	bne.n	80035ca <xQueueGenericSend+0xc6>
	__asm volatile
 80035b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035b6:	f383 8811 	msr	BASEPRI, r3
 80035ba:	f3bf 8f6f 	isb	sy
 80035be:	f3bf 8f4f 	dsb	sy
 80035c2:	61fb      	str	r3, [r7, #28]
}
 80035c4:	bf00      	nop
 80035c6:	bf00      	nop
 80035c8:	e7fd      	b.n	80035c6 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80035ca:	f001 fd35 	bl	8005038 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80035ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d302      	bcc.n	80035e0 <xQueueGenericSend+0xdc>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d129      	bne.n	8003634 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	68b9      	ldr	r1, [r7, #8]
 80035e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80035e6:	f000 fac9 	bl	8003b7c <prvCopyDataToQueue>
 80035ea:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d010      	beq.n	8003616 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035f6:	3324      	adds	r3, #36	@ 0x24
 80035f8:	4618      	mov	r0, r3
 80035fa:	f000 ffe1 	bl	80045c0 <xTaskRemoveFromEventList>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d013      	beq.n	800362c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003604:	4b3f      	ldr	r3, [pc, #252]	@ (8003704 <xQueueGenericSend+0x200>)
 8003606:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	f3bf 8f4f 	dsb	sy
 8003610:	f3bf 8f6f 	isb	sy
 8003614:	e00a      	b.n	800362c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003618:	2b00      	cmp	r3, #0
 800361a:	d007      	beq.n	800362c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800361c:	4b39      	ldr	r3, [pc, #228]	@ (8003704 <xQueueGenericSend+0x200>)
 800361e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	f3bf 8f4f 	dsb	sy
 8003628:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800362c:	f001 fd36 	bl	800509c <vPortExitCritical>
				return pdPASS;
 8003630:	2301      	movs	r3, #1
 8003632:	e063      	b.n	80036fc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d103      	bne.n	8003642 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800363a:	f001 fd2f 	bl	800509c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800363e:	2300      	movs	r3, #0
 8003640:	e05c      	b.n	80036fc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003644:	2b00      	cmp	r3, #0
 8003646:	d106      	bne.n	8003656 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003648:	f107 0314 	add.w	r3, r7, #20
 800364c:	4618      	mov	r0, r3
 800364e:	f001 f81b 	bl	8004688 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003652:	2301      	movs	r3, #1
 8003654:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003656:	f001 fd21 	bl	800509c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800365a:	f000 fdc5 	bl	80041e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800365e:	f001 fceb 	bl	8005038 <vPortEnterCritical>
 8003662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003664:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003668:	b25b      	sxtb	r3, r3
 800366a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800366e:	d103      	bne.n	8003678 <xQueueGenericSend+0x174>
 8003670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003672:	2200      	movs	r2, #0
 8003674:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800367a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800367e:	b25b      	sxtb	r3, r3
 8003680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003684:	d103      	bne.n	800368e <xQueueGenericSend+0x18a>
 8003686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800368e:	f001 fd05 	bl	800509c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003692:	1d3a      	adds	r2, r7, #4
 8003694:	f107 0314 	add.w	r3, r7, #20
 8003698:	4611      	mov	r1, r2
 800369a:	4618      	mov	r0, r3
 800369c:	f001 f80a 	bl	80046b4 <xTaskCheckForTimeOut>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d124      	bne.n	80036f0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80036a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80036a8:	f000 fb60 	bl	8003d6c <prvIsQueueFull>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d018      	beq.n	80036e4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80036b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036b4:	3310      	adds	r3, #16
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	4611      	mov	r1, r2
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 ff5a 	bl	8004574 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80036c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80036c2:	f000 faeb 	bl	8003c9c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80036c6:	f000 fd9d 	bl	8004204 <xTaskResumeAll>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f47f af7c 	bne.w	80035ca <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80036d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003704 <xQueueGenericSend+0x200>)
 80036d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	f3bf 8f4f 	dsb	sy
 80036de:	f3bf 8f6f 	isb	sy
 80036e2:	e772      	b.n	80035ca <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80036e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80036e6:	f000 fad9 	bl	8003c9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80036ea:	f000 fd8b 	bl	8004204 <xTaskResumeAll>
 80036ee:	e76c      	b.n	80035ca <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80036f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80036f2:	f000 fad3 	bl	8003c9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80036f6:	f000 fd85 	bl	8004204 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80036fa:	2300      	movs	r3, #0
		}
	}
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3738      	adds	r7, #56	@ 0x38
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	e000ed04 	.word	0xe000ed04

08003708 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b08e      	sub	sp, #56	@ 0x38
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003718:	2b00      	cmp	r3, #0
 800371a:	d10b      	bne.n	8003734 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800371c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003720:	f383 8811 	msr	BASEPRI, r3
 8003724:	f3bf 8f6f 	isb	sy
 8003728:	f3bf 8f4f 	dsb	sy
 800372c:	623b      	str	r3, [r7, #32]
}
 800372e:	bf00      	nop
 8003730:	bf00      	nop
 8003732:	e7fd      	b.n	8003730 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00b      	beq.n	8003754 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800373c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003740:	f383 8811 	msr	BASEPRI, r3
 8003744:	f3bf 8f6f 	isb	sy
 8003748:	f3bf 8f4f 	dsb	sy
 800374c:	61fb      	str	r3, [r7, #28]
}
 800374e:	bf00      	nop
 8003750:	bf00      	nop
 8003752:	e7fd      	b.n	8003750 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8003754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d103      	bne.n	8003764 <xQueueGiveFromISR+0x5c>
 800375c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d101      	bne.n	8003768 <xQueueGiveFromISR+0x60>
 8003764:	2301      	movs	r3, #1
 8003766:	e000      	b.n	800376a <xQueueGiveFromISR+0x62>
 8003768:	2300      	movs	r3, #0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10b      	bne.n	8003786 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800376e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003772:	f383 8811 	msr	BASEPRI, r3
 8003776:	f3bf 8f6f 	isb	sy
 800377a:	f3bf 8f4f 	dsb	sy
 800377e:	61bb      	str	r3, [r7, #24]
}
 8003780:	bf00      	nop
 8003782:	bf00      	nop
 8003784:	e7fd      	b.n	8003782 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003786:	f001 fd37 	bl	80051f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800378a:	f3ef 8211 	mrs	r2, BASEPRI
 800378e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003792:	f383 8811 	msr	BASEPRI, r3
 8003796:	f3bf 8f6f 	isb	sy
 800379a:	f3bf 8f4f 	dsb	sy
 800379e:	617a      	str	r2, [r7, #20]
 80037a0:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80037a2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80037a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037aa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80037ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d22b      	bcs.n	800380e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80037b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80037bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80037c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037c2:	1c5a      	adds	r2, r3, #1
 80037c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037c6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80037c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80037cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d0:	d112      	bne.n	80037f8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d016      	beq.n	8003808 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037dc:	3324      	adds	r3, #36	@ 0x24
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 feee 	bl	80045c0 <xTaskRemoveFromEventList>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00e      	beq.n	8003808 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00b      	beq.n	8003808 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	2201      	movs	r2, #1
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	e007      	b.n	8003808 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80037f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80037fc:	3301      	adds	r3, #1
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	b25a      	sxtb	r2, r3
 8003802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003804:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003808:	2301      	movs	r3, #1
 800380a:	637b      	str	r3, [r7, #52]	@ 0x34
 800380c:	e001      	b.n	8003812 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800380e:	2300      	movs	r3, #0
 8003810:	637b      	str	r3, [r7, #52]	@ 0x34
 8003812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003814:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800381c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800381e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003820:	4618      	mov	r0, r3
 8003822:	3738      	adds	r7, #56	@ 0x38
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b08e      	sub	sp, #56	@ 0x38
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003832:	2300      	movs	r3, #0
 8003834:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800383a:	2300      	movs	r3, #0
 800383c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800383e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10b      	bne.n	800385c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8003844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003848:	f383 8811 	msr	BASEPRI, r3
 800384c:	f3bf 8f6f 	isb	sy
 8003850:	f3bf 8f4f 	dsb	sy
 8003854:	623b      	str	r3, [r7, #32]
}
 8003856:	bf00      	nop
 8003858:	bf00      	nop
 800385a:	e7fd      	b.n	8003858 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800385c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800385e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00b      	beq.n	800387c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8003864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003868:	f383 8811 	msr	BASEPRI, r3
 800386c:	f3bf 8f6f 	isb	sy
 8003870:	f3bf 8f4f 	dsb	sy
 8003874:	61fb      	str	r3, [r7, #28]
}
 8003876:	bf00      	nop
 8003878:	bf00      	nop
 800387a:	e7fd      	b.n	8003878 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800387c:	f001 f866 	bl	800494c <xTaskGetSchedulerState>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d102      	bne.n	800388c <xQueueSemaphoreTake+0x64>
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d101      	bne.n	8003890 <xQueueSemaphoreTake+0x68>
 800388c:	2301      	movs	r3, #1
 800388e:	e000      	b.n	8003892 <xQueueSemaphoreTake+0x6a>
 8003890:	2300      	movs	r3, #0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10b      	bne.n	80038ae <xQueueSemaphoreTake+0x86>
	__asm volatile
 8003896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800389a:	f383 8811 	msr	BASEPRI, r3
 800389e:	f3bf 8f6f 	isb	sy
 80038a2:	f3bf 8f4f 	dsb	sy
 80038a6:	61bb      	str	r3, [r7, #24]
}
 80038a8:	bf00      	nop
 80038aa:	bf00      	nop
 80038ac:	e7fd      	b.n	80038aa <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80038ae:	f001 fbc3 	bl	8005038 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80038b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80038b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d024      	beq.n	8003908 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80038be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038c0:	1e5a      	subs	r2, r3, #1
 80038c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038c4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80038c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d104      	bne.n	80038d8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80038ce:	f001 fa0b 	bl	8004ce8 <pvTaskIncrementMutexHeldCount>
 80038d2:	4602      	mov	r2, r0
 80038d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038d6:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00f      	beq.n	8003900 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038e2:	3310      	adds	r3, #16
 80038e4:	4618      	mov	r0, r3
 80038e6:	f000 fe6b 	bl	80045c0 <xTaskRemoveFromEventList>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d007      	beq.n	8003900 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80038f0:	4b54      	ldr	r3, [pc, #336]	@ (8003a44 <xQueueSemaphoreTake+0x21c>)
 80038f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	f3bf 8f4f 	dsb	sy
 80038fc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003900:	f001 fbcc 	bl	800509c <vPortExitCritical>
				return pdPASS;
 8003904:	2301      	movs	r3, #1
 8003906:	e098      	b.n	8003a3a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d112      	bne.n	8003934 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800390e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00b      	beq.n	800392c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003918:	f383 8811 	msr	BASEPRI, r3
 800391c:	f3bf 8f6f 	isb	sy
 8003920:	f3bf 8f4f 	dsb	sy
 8003924:	617b      	str	r3, [r7, #20]
}
 8003926:	bf00      	nop
 8003928:	bf00      	nop
 800392a:	e7fd      	b.n	8003928 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800392c:	f001 fbb6 	bl	800509c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003930:	2300      	movs	r3, #0
 8003932:	e082      	b.n	8003a3a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003936:	2b00      	cmp	r3, #0
 8003938:	d106      	bne.n	8003948 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800393a:	f107 030c 	add.w	r3, r7, #12
 800393e:	4618      	mov	r0, r3
 8003940:	f000 fea2 	bl	8004688 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003944:	2301      	movs	r3, #1
 8003946:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003948:	f001 fba8 	bl	800509c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800394c:	f000 fc4c 	bl	80041e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003950:	f001 fb72 	bl	8005038 <vPortEnterCritical>
 8003954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003956:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800395a:	b25b      	sxtb	r3, r3
 800395c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003960:	d103      	bne.n	800396a <xQueueSemaphoreTake+0x142>
 8003962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800396a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800396c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003970:	b25b      	sxtb	r3, r3
 8003972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003976:	d103      	bne.n	8003980 <xQueueSemaphoreTake+0x158>
 8003978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003980:	f001 fb8c 	bl	800509c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003984:	463a      	mov	r2, r7
 8003986:	f107 030c 	add.w	r3, r7, #12
 800398a:	4611      	mov	r1, r2
 800398c:	4618      	mov	r0, r3
 800398e:	f000 fe91 	bl	80046b4 <xTaskCheckForTimeOut>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d132      	bne.n	80039fe <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003998:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800399a:	f000 f9d1 	bl	8003d40 <prvIsQueueEmpty>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d026      	beq.n	80039f2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80039a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d109      	bne.n	80039c0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80039ac:	f001 fb44 	bl	8005038 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80039b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f000 ffe7 	bl	8004988 <xTaskPriorityInherit>
 80039ba:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80039bc:	f001 fb6e 	bl	800509c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80039c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039c2:	3324      	adds	r3, #36	@ 0x24
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	4611      	mov	r1, r2
 80039c8:	4618      	mov	r0, r3
 80039ca:	f000 fdd3 	bl	8004574 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80039ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80039d0:	f000 f964 	bl	8003c9c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80039d4:	f000 fc16 	bl	8004204 <xTaskResumeAll>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f47f af67 	bne.w	80038ae <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80039e0:	4b18      	ldr	r3, [pc, #96]	@ (8003a44 <xQueueSemaphoreTake+0x21c>)
 80039e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	f3bf 8f4f 	dsb	sy
 80039ec:	f3bf 8f6f 	isb	sy
 80039f0:	e75d      	b.n	80038ae <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80039f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80039f4:	f000 f952 	bl	8003c9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80039f8:	f000 fc04 	bl	8004204 <xTaskResumeAll>
 80039fc:	e757      	b.n	80038ae <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80039fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003a00:	f000 f94c 	bl	8003c9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a04:	f000 fbfe 	bl	8004204 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a08:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003a0a:	f000 f999 	bl	8003d40 <prvIsQueueEmpty>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f43f af4c 	beq.w	80038ae <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00d      	beq.n	8003a38 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003a1c:	f001 fb0c 	bl	8005038 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003a20:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003a22:	f000 f893 	bl	8003b4c <prvGetDisinheritPriorityAfterTimeout>
 8003a26:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8003a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f001 f8b8 	bl	8004ba4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003a34:	f001 fb32 	bl	800509c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003a38:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3738      	adds	r7, #56	@ 0x38
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	e000ed04 	.word	0xe000ed04

08003a48 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b08e      	sub	sp, #56	@ 0x38
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10b      	bne.n	8003a76 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8003a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a62:	f383 8811 	msr	BASEPRI, r3
 8003a66:	f3bf 8f6f 	isb	sy
 8003a6a:	f3bf 8f4f 	dsb	sy
 8003a6e:	623b      	str	r3, [r7, #32]
}
 8003a70:	bf00      	nop
 8003a72:	bf00      	nop
 8003a74:	e7fd      	b.n	8003a72 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d103      	bne.n	8003a84 <xQueueReceiveFromISR+0x3c>
 8003a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d101      	bne.n	8003a88 <xQueueReceiveFromISR+0x40>
 8003a84:	2301      	movs	r3, #1
 8003a86:	e000      	b.n	8003a8a <xQueueReceiveFromISR+0x42>
 8003a88:	2300      	movs	r3, #0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10b      	bne.n	8003aa6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8003a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a92:	f383 8811 	msr	BASEPRI, r3
 8003a96:	f3bf 8f6f 	isb	sy
 8003a9a:	f3bf 8f4f 	dsb	sy
 8003a9e:	61fb      	str	r3, [r7, #28]
}
 8003aa0:	bf00      	nop
 8003aa2:	bf00      	nop
 8003aa4:	e7fd      	b.n	8003aa2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003aa6:	f001 fba7 	bl	80051f8 <vPortValidateInterruptPriority>
	__asm volatile
 8003aaa:	f3ef 8211 	mrs	r2, BASEPRI
 8003aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ab2:	f383 8811 	msr	BASEPRI, r3
 8003ab6:	f3bf 8f6f 	isb	sy
 8003aba:	f3bf 8f4f 	dsb	sy
 8003abe:	61ba      	str	r2, [r7, #24]
 8003ac0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003ac2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aca:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d02f      	beq.n	8003b32 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ad8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003adc:	68b9      	ldr	r1, [r7, #8]
 8003ade:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ae0:	f000 f8b6 	bl	8003c50 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ae6:	1e5a      	subs	r2, r3, #1
 8003ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aea:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003aec:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af4:	d112      	bne.n	8003b1c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d016      	beq.n	8003b2c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b00:	3310      	adds	r3, #16
 8003b02:	4618      	mov	r0, r3
 8003b04:	f000 fd5c 	bl	80045c0 <xTaskRemoveFromEventList>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00e      	beq.n	8003b2c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00b      	beq.n	8003b2c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	601a      	str	r2, [r3, #0]
 8003b1a:	e007      	b.n	8003b2c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003b1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b20:	3301      	adds	r3, #1
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	b25a      	sxtb	r2, r3
 8003b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b30:	e001      	b.n	8003b36 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8003b32:	2300      	movs	r3, #0
 8003b34:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b38:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	f383 8811 	msr	BASEPRI, r3
}
 8003b40:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003b42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3738      	adds	r7, #56	@ 0x38
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d006      	beq.n	8003b6a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f1c3 0307 	rsb	r3, r3, #7
 8003b66:	60fb      	str	r3, [r7, #12]
 8003b68:	e001      	b.n	8003b6e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
	}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3714      	adds	r7, #20
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b90:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10d      	bne.n	8003bb6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d14d      	bne.n	8003c3e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 ff74 	bl	8004a94 <xTaskPriorityDisinherit>
 8003bac:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	605a      	str	r2, [r3, #4]
 8003bb4:	e043      	b.n	8003c3e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d119      	bne.n	8003bf0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6898      	ldr	r0, [r3, #8]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	68b9      	ldr	r1, [r7, #8]
 8003bc8:	f001 fd64 	bl	8005694 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd4:	441a      	add	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	689a      	ldr	r2, [r3, #8]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d32b      	bcc.n	8003c3e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	609a      	str	r2, [r3, #8]
 8003bee:	e026      	b.n	8003c3e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	68d8      	ldr	r0, [r3, #12]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	68b9      	ldr	r1, [r7, #8]
 8003bfc:	f001 fd4a 	bl	8005694 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	68da      	ldr	r2, [r3, #12]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c08:	425b      	negs	r3, r3
 8003c0a:	441a      	add	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	68da      	ldr	r2, [r3, #12]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d207      	bcs.n	8003c2c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c24:	425b      	negs	r3, r3
 8003c26:	441a      	add	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d105      	bne.n	8003c3e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d002      	beq.n	8003c3e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	1c5a      	adds	r2, r3, #1
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003c46:	697b      	ldr	r3, [r7, #20]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3718      	adds	r7, #24
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d018      	beq.n	8003c94 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	68da      	ldr	r2, [r3, #12]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6a:	441a      	add	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	68da      	ldr	r2, [r3, #12]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d303      	bcc.n	8003c84 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68d9      	ldr	r1, [r3, #12]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	6838      	ldr	r0, [r7, #0]
 8003c90:	f001 fd00 	bl	8005694 <memcpy>
	}
}
 8003c94:	bf00      	nop
 8003c96:	3708      	adds	r7, #8
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003ca4:	f001 f9c8 	bl	8005038 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003cae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003cb0:	e011      	b.n	8003cd6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d012      	beq.n	8003ce0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	3324      	adds	r3, #36	@ 0x24
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 fc7e 	bl	80045c0 <xTaskRemoveFromEventList>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003cca:	f000 fd57 	bl	800477c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003cce:	7bfb      	ldrb	r3, [r7, #15]
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	dce9      	bgt.n	8003cb2 <prvUnlockQueue+0x16>
 8003cde:	e000      	b.n	8003ce2 <prvUnlockQueue+0x46>
					break;
 8003ce0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	22ff      	movs	r2, #255	@ 0xff
 8003ce6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003cea:	f001 f9d7 	bl	800509c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003cee:	f001 f9a3 	bl	8005038 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003cf8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003cfa:	e011      	b.n	8003d20 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d012      	beq.n	8003d2a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	3310      	adds	r3, #16
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f000 fc59 	bl	80045c0 <xTaskRemoveFromEventList>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003d14:	f000 fd32 	bl	800477c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003d18:	7bbb      	ldrb	r3, [r7, #14]
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	dce9      	bgt.n	8003cfc <prvUnlockQueue+0x60>
 8003d28:	e000      	b.n	8003d2c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003d2a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	22ff      	movs	r2, #255	@ 0xff
 8003d30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003d34:	f001 f9b2 	bl	800509c <vPortExitCritical>
}
 8003d38:	bf00      	nop
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d48:	f001 f976 	bl	8005038 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d102      	bne.n	8003d5a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003d54:	2301      	movs	r3, #1
 8003d56:	60fb      	str	r3, [r7, #12]
 8003d58:	e001      	b.n	8003d5e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d5e:	f001 f99d 	bl	800509c <vPortExitCritical>

	return xReturn;
 8003d62:	68fb      	ldr	r3, [r7, #12]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d74:	f001 f960 	bl	8005038 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d102      	bne.n	8003d8a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003d84:	2301      	movs	r3, #1
 8003d86:	60fb      	str	r3, [r7, #12]
 8003d88:	e001      	b.n	8003d8e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d8e:	f001 f985 	bl	800509c <vPortExitCritical>

	return xReturn;
 8003d92:	68fb      	ldr	r3, [r7, #12]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3710      	adds	r7, #16
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b08e      	sub	sp, #56	@ 0x38
 8003da0:	af04      	add	r7, sp, #16
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
 8003da8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10b      	bne.n	8003dc8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db4:	f383 8811 	msr	BASEPRI, r3
 8003db8:	f3bf 8f6f 	isb	sy
 8003dbc:	f3bf 8f4f 	dsb	sy
 8003dc0:	623b      	str	r3, [r7, #32]
}
 8003dc2:	bf00      	nop
 8003dc4:	bf00      	nop
 8003dc6:	e7fd      	b.n	8003dc4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10b      	bne.n	8003de6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dd2:	f383 8811 	msr	BASEPRI, r3
 8003dd6:	f3bf 8f6f 	isb	sy
 8003dda:	f3bf 8f4f 	dsb	sy
 8003dde:	61fb      	str	r3, [r7, #28]
}
 8003de0:	bf00      	nop
 8003de2:	bf00      	nop
 8003de4:	e7fd      	b.n	8003de2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003de6:	2354      	movs	r3, #84	@ 0x54
 8003de8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	2b54      	cmp	r3, #84	@ 0x54
 8003dee:	d00b      	beq.n	8003e08 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003df4:	f383 8811 	msr	BASEPRI, r3
 8003df8:	f3bf 8f6f 	isb	sy
 8003dfc:	f3bf 8f4f 	dsb	sy
 8003e00:	61bb      	str	r3, [r7, #24]
}
 8003e02:	bf00      	nop
 8003e04:	bf00      	nop
 8003e06:	e7fd      	b.n	8003e04 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d01e      	beq.n	8003e4c <xTaskCreateStatic+0xb0>
 8003e0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d01b      	beq.n	8003e4c <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e16:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003e1c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e20:	2202      	movs	r2, #2
 8003e22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003e26:	2300      	movs	r3, #0
 8003e28:	9303      	str	r3, [sp, #12]
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2c:	9302      	str	r3, [sp, #8]
 8003e2e:	f107 0314 	add.w	r3, r7, #20
 8003e32:	9301      	str	r3, [sp, #4]
 8003e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	68b9      	ldr	r1, [r7, #8]
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f000 f850 	bl	8003ee4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e44:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003e46:	f000 f8cd 	bl	8003fe4 <prvAddNewTaskToReadyList>
 8003e4a:	e001      	b.n	8003e50 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003e50:	697b      	ldr	r3, [r7, #20]
	}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3728      	adds	r7, #40	@ 0x28
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b08c      	sub	sp, #48	@ 0x30
 8003e5e:	af04      	add	r7, sp, #16
 8003e60:	60f8      	str	r0, [r7, #12]
 8003e62:	60b9      	str	r1, [r7, #8]
 8003e64:	603b      	str	r3, [r7, #0]
 8003e66:	4613      	mov	r3, r2
 8003e68:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e6a:	88fb      	ldrh	r3, [r7, #6]
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f001 fa04 	bl	800527c <pvPortMalloc>
 8003e74:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00e      	beq.n	8003e9a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003e7c:	2054      	movs	r0, #84	@ 0x54
 8003e7e:	f001 f9fd 	bl	800527c <pvPortMalloc>
 8003e82:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e90:	e005      	b.n	8003e9e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003e92:	6978      	ldr	r0, [r7, #20]
 8003e94:	f001 faba 	bl	800540c <vPortFree>
 8003e98:	e001      	b.n	8003e9e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d017      	beq.n	8003ed4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003eac:	88fa      	ldrh	r2, [r7, #6]
 8003eae:	2300      	movs	r3, #0
 8003eb0:	9303      	str	r3, [sp, #12]
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	9302      	str	r3, [sp, #8]
 8003eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eb8:	9301      	str	r3, [sp, #4]
 8003eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	68b9      	ldr	r1, [r7, #8]
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f000 f80e 	bl	8003ee4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ec8:	69f8      	ldr	r0, [r7, #28]
 8003eca:	f000 f88b 	bl	8003fe4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	61bb      	str	r3, [r7, #24]
 8003ed2:	e002      	b.n	8003eda <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ed8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003eda:	69bb      	ldr	r3, [r7, #24]
	}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3720      	adds	r7, #32
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b088      	sub	sp, #32
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
 8003ef0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003efc:	3b01      	subs	r3, #1
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4413      	add	r3, r2
 8003f02:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	f023 0307 	bic.w	r3, r3, #7
 8003f0a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	f003 0307 	and.w	r3, r3, #7
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00b      	beq.n	8003f2e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f1a:	f383 8811 	msr	BASEPRI, r3
 8003f1e:	f3bf 8f6f 	isb	sy
 8003f22:	f3bf 8f4f 	dsb	sy
 8003f26:	617b      	str	r3, [r7, #20]
}
 8003f28:	bf00      	nop
 8003f2a:	bf00      	nop
 8003f2c:	e7fd      	b.n	8003f2a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f2e:	2300      	movs	r3, #0
 8003f30:	61fb      	str	r3, [r7, #28]
 8003f32:	e012      	b.n	8003f5a <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	4413      	add	r3, r2
 8003f3a:	7819      	ldrb	r1, [r3, #0]
 8003f3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	4413      	add	r3, r2
 8003f42:	3334      	adds	r3, #52	@ 0x34
 8003f44:	460a      	mov	r2, r1
 8003f46:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d006      	beq.n	8003f62 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	3301      	adds	r3, #1
 8003f58:	61fb      	str	r3, [r7, #28]
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	2b0f      	cmp	r3, #15
 8003f5e:	d9e9      	bls.n	8003f34 <prvInitialiseNewTask+0x50>
 8003f60:	e000      	b.n	8003f64 <prvInitialiseNewTask+0x80>
		{
			break;
 8003f62:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f6e:	2b06      	cmp	r3, #6
 8003f70:	d901      	bls.n	8003f76 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003f72:	2306      	movs	r3, #6
 8003f74:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f7a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f80:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f84:	2200      	movs	r2, #0
 8003f86:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f8a:	3304      	adds	r3, #4
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7ff f8e1 	bl	8003154 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f94:	3318      	adds	r3, #24
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7ff f8dc 	bl	8003154 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fa0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fa4:	f1c3 0207 	rsb	r2, r3, #7
 8003fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003faa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fb0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	68f9      	ldr	r1, [r7, #12]
 8003fc4:	69b8      	ldr	r0, [r7, #24]
 8003fc6:	f000 ff09 	bl	8004ddc <pxPortInitialiseStack>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fce:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d002      	beq.n	8003fdc <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fda:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003fdc:	bf00      	nop
 8003fde:	3720      	adds	r7, #32
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003fec:	f001 f824 	bl	8005038 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003ff0:	4b2a      	ldr	r3, [pc, #168]	@ (800409c <prvAddNewTaskToReadyList+0xb8>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	4a29      	ldr	r2, [pc, #164]	@ (800409c <prvAddNewTaskToReadyList+0xb8>)
 8003ff8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003ffa:	4b29      	ldr	r3, [pc, #164]	@ (80040a0 <prvAddNewTaskToReadyList+0xbc>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d109      	bne.n	8004016 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004002:	4a27      	ldr	r2, [pc, #156]	@ (80040a0 <prvAddNewTaskToReadyList+0xbc>)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004008:	4b24      	ldr	r3, [pc, #144]	@ (800409c <prvAddNewTaskToReadyList+0xb8>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d110      	bne.n	8004032 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004010:	f000 fbd8 	bl	80047c4 <prvInitialiseTaskLists>
 8004014:	e00d      	b.n	8004032 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004016:	4b23      	ldr	r3, [pc, #140]	@ (80040a4 <prvAddNewTaskToReadyList+0xc0>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d109      	bne.n	8004032 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800401e:	4b20      	ldr	r3, [pc, #128]	@ (80040a0 <prvAddNewTaskToReadyList+0xbc>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004028:	429a      	cmp	r2, r3
 800402a:	d802      	bhi.n	8004032 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800402c:	4a1c      	ldr	r2, [pc, #112]	@ (80040a0 <prvAddNewTaskToReadyList+0xbc>)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004032:	4b1d      	ldr	r3, [pc, #116]	@ (80040a8 <prvAddNewTaskToReadyList+0xc4>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	3301      	adds	r3, #1
 8004038:	4a1b      	ldr	r2, [pc, #108]	@ (80040a8 <prvAddNewTaskToReadyList+0xc4>)
 800403a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004040:	2201      	movs	r2, #1
 8004042:	409a      	lsls	r2, r3
 8004044:	4b19      	ldr	r3, [pc, #100]	@ (80040ac <prvAddNewTaskToReadyList+0xc8>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4313      	orrs	r3, r2
 800404a:	4a18      	ldr	r2, [pc, #96]	@ (80040ac <prvAddNewTaskToReadyList+0xc8>)
 800404c:	6013      	str	r3, [r2, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004052:	4613      	mov	r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	4413      	add	r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4a15      	ldr	r2, [pc, #84]	@ (80040b0 <prvAddNewTaskToReadyList+0xcc>)
 800405c:	441a      	add	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	3304      	adds	r3, #4
 8004062:	4619      	mov	r1, r3
 8004064:	4610      	mov	r0, r2
 8004066:	f7ff f882 	bl	800316e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800406a:	f001 f817 	bl	800509c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800406e:	4b0d      	ldr	r3, [pc, #52]	@ (80040a4 <prvAddNewTaskToReadyList+0xc0>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00e      	beq.n	8004094 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004076:	4b0a      	ldr	r3, [pc, #40]	@ (80040a0 <prvAddNewTaskToReadyList+0xbc>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004080:	429a      	cmp	r2, r3
 8004082:	d207      	bcs.n	8004094 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004084:	4b0b      	ldr	r3, [pc, #44]	@ (80040b4 <prvAddNewTaskToReadyList+0xd0>)
 8004086:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800408a:	601a      	str	r2, [r3, #0]
 800408c:	f3bf 8f4f 	dsb	sy
 8004090:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004094:	bf00      	nop
 8004096:	3708      	adds	r7, #8
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	20000414 	.word	0x20000414
 80040a0:	20000314 	.word	0x20000314
 80040a4:	20000420 	.word	0x20000420
 80040a8:	20000430 	.word	0x20000430
 80040ac:	2000041c 	.word	0x2000041c
 80040b0:	20000318 	.word	0x20000318
 80040b4:	e000ed04 	.word	0xe000ed04

080040b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80040c0:	2300      	movs	r3, #0
 80040c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d018      	beq.n	80040fc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80040ca:	4b14      	ldr	r3, [pc, #80]	@ (800411c <vTaskDelay+0x64>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00b      	beq.n	80040ea <vTaskDelay+0x32>
	__asm volatile
 80040d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040d6:	f383 8811 	msr	BASEPRI, r3
 80040da:	f3bf 8f6f 	isb	sy
 80040de:	f3bf 8f4f 	dsb	sy
 80040e2:	60bb      	str	r3, [r7, #8]
}
 80040e4:	bf00      	nop
 80040e6:	bf00      	nop
 80040e8:	e7fd      	b.n	80040e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80040ea:	f000 f87d 	bl	80041e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80040ee:	2100      	movs	r1, #0
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 fe0d 	bl	8004d10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80040f6:	f000 f885 	bl	8004204 <xTaskResumeAll>
 80040fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d107      	bne.n	8004112 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004102:	4b07      	ldr	r3, [pc, #28]	@ (8004120 <vTaskDelay+0x68>)
 8004104:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004108:	601a      	str	r2, [r3, #0]
 800410a:	f3bf 8f4f 	dsb	sy
 800410e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004112:	bf00      	nop
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	2000043c 	.word	0x2000043c
 8004120:	e000ed04 	.word	0xe000ed04

08004124 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b08a      	sub	sp, #40	@ 0x28
 8004128:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800412a:	2300      	movs	r3, #0
 800412c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800412e:	2300      	movs	r3, #0
 8004130:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004132:	463a      	mov	r2, r7
 8004134:	1d39      	adds	r1, r7, #4
 8004136:	f107 0308 	add.w	r3, r7, #8
 800413a:	4618      	mov	r0, r3
 800413c:	f7fc fa06 	bl	800054c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004140:	6839      	ldr	r1, [r7, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68ba      	ldr	r2, [r7, #8]
 8004146:	9202      	str	r2, [sp, #8]
 8004148:	9301      	str	r3, [sp, #4]
 800414a:	2300      	movs	r3, #0
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	2300      	movs	r3, #0
 8004150:	460a      	mov	r2, r1
 8004152:	491f      	ldr	r1, [pc, #124]	@ (80041d0 <vTaskStartScheduler+0xac>)
 8004154:	481f      	ldr	r0, [pc, #124]	@ (80041d4 <vTaskStartScheduler+0xb0>)
 8004156:	f7ff fe21 	bl	8003d9c <xTaskCreateStatic>
 800415a:	4603      	mov	r3, r0
 800415c:	4a1e      	ldr	r2, [pc, #120]	@ (80041d8 <vTaskStartScheduler+0xb4>)
 800415e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004160:	4b1d      	ldr	r3, [pc, #116]	@ (80041d8 <vTaskStartScheduler+0xb4>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d002      	beq.n	800416e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004168:	2301      	movs	r3, #1
 800416a:	617b      	str	r3, [r7, #20]
 800416c:	e001      	b.n	8004172 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800416e:	2300      	movs	r3, #0
 8004170:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d116      	bne.n	80041a6 <vTaskStartScheduler+0x82>
	__asm volatile
 8004178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800417c:	f383 8811 	msr	BASEPRI, r3
 8004180:	f3bf 8f6f 	isb	sy
 8004184:	f3bf 8f4f 	dsb	sy
 8004188:	613b      	str	r3, [r7, #16]
}
 800418a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800418c:	4b13      	ldr	r3, [pc, #76]	@ (80041dc <vTaskStartScheduler+0xb8>)
 800418e:	f04f 32ff 	mov.w	r2, #4294967295
 8004192:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004194:	4b12      	ldr	r3, [pc, #72]	@ (80041e0 <vTaskStartScheduler+0xbc>)
 8004196:	2201      	movs	r2, #1
 8004198:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800419a:	4b12      	ldr	r3, [pc, #72]	@ (80041e4 <vTaskStartScheduler+0xc0>)
 800419c:	2200      	movs	r2, #0
 800419e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80041a0:	f000 fea6 	bl	8004ef0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80041a4:	e00f      	b.n	80041c6 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ac:	d10b      	bne.n	80041c6 <vTaskStartScheduler+0xa2>
	__asm volatile
 80041ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041b2:	f383 8811 	msr	BASEPRI, r3
 80041b6:	f3bf 8f6f 	isb	sy
 80041ba:	f3bf 8f4f 	dsb	sy
 80041be:	60fb      	str	r3, [r7, #12]
}
 80041c0:	bf00      	nop
 80041c2:	bf00      	nop
 80041c4:	e7fd      	b.n	80041c2 <vTaskStartScheduler+0x9e>
}
 80041c6:	bf00      	nop
 80041c8:	3718      	adds	r7, #24
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	0800585c 	.word	0x0800585c
 80041d4:	08004795 	.word	0x08004795
 80041d8:	20000438 	.word	0x20000438
 80041dc:	20000434 	.word	0x20000434
 80041e0:	20000420 	.word	0x20000420
 80041e4:	20000418 	.word	0x20000418

080041e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80041ec:	4b04      	ldr	r3, [pc, #16]	@ (8004200 <vTaskSuspendAll+0x18>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	3301      	adds	r3, #1
 80041f2:	4a03      	ldr	r2, [pc, #12]	@ (8004200 <vTaskSuspendAll+0x18>)
 80041f4:	6013      	str	r3, [r2, #0]
}
 80041f6:	bf00      	nop
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr
 8004200:	2000043c 	.word	0x2000043c

08004204 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800420a:	2300      	movs	r3, #0
 800420c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800420e:	2300      	movs	r3, #0
 8004210:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004212:	4b42      	ldr	r3, [pc, #264]	@ (800431c <xTaskResumeAll+0x118>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10b      	bne.n	8004232 <xTaskResumeAll+0x2e>
	__asm volatile
 800421a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800421e:	f383 8811 	msr	BASEPRI, r3
 8004222:	f3bf 8f6f 	isb	sy
 8004226:	f3bf 8f4f 	dsb	sy
 800422a:	603b      	str	r3, [r7, #0]
}
 800422c:	bf00      	nop
 800422e:	bf00      	nop
 8004230:	e7fd      	b.n	800422e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004232:	f000 ff01 	bl	8005038 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004236:	4b39      	ldr	r3, [pc, #228]	@ (800431c <xTaskResumeAll+0x118>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	3b01      	subs	r3, #1
 800423c:	4a37      	ldr	r2, [pc, #220]	@ (800431c <xTaskResumeAll+0x118>)
 800423e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004240:	4b36      	ldr	r3, [pc, #216]	@ (800431c <xTaskResumeAll+0x118>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d161      	bne.n	800430c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004248:	4b35      	ldr	r3, [pc, #212]	@ (8004320 <xTaskResumeAll+0x11c>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d05d      	beq.n	800430c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004250:	e02e      	b.n	80042b0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004252:	4b34      	ldr	r3, [pc, #208]	@ (8004324 <xTaskResumeAll+0x120>)
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	3318      	adds	r3, #24
 800425e:	4618      	mov	r0, r3
 8004260:	f7fe ffe2 	bl	8003228 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	3304      	adds	r3, #4
 8004268:	4618      	mov	r0, r3
 800426a:	f7fe ffdd 	bl	8003228 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004272:	2201      	movs	r2, #1
 8004274:	409a      	lsls	r2, r3
 8004276:	4b2c      	ldr	r3, [pc, #176]	@ (8004328 <xTaskResumeAll+0x124>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4313      	orrs	r3, r2
 800427c:	4a2a      	ldr	r2, [pc, #168]	@ (8004328 <xTaskResumeAll+0x124>)
 800427e:	6013      	str	r3, [r2, #0]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004284:	4613      	mov	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4a27      	ldr	r2, [pc, #156]	@ (800432c <xTaskResumeAll+0x128>)
 800428e:	441a      	add	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	3304      	adds	r3, #4
 8004294:	4619      	mov	r1, r3
 8004296:	4610      	mov	r0, r2
 8004298:	f7fe ff69 	bl	800316e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042a0:	4b23      	ldr	r3, [pc, #140]	@ (8004330 <xTaskResumeAll+0x12c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d302      	bcc.n	80042b0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80042aa:	4b22      	ldr	r3, [pc, #136]	@ (8004334 <xTaskResumeAll+0x130>)
 80042ac:	2201      	movs	r2, #1
 80042ae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042b0:	4b1c      	ldr	r3, [pc, #112]	@ (8004324 <xTaskResumeAll+0x120>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1cc      	bne.n	8004252 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80042be:	f000 fb1f 	bl	8004900 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80042c2:	4b1d      	ldr	r3, [pc, #116]	@ (8004338 <xTaskResumeAll+0x134>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d010      	beq.n	80042f0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80042ce:	f000 f837 	bl	8004340 <xTaskIncrementTick>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d002      	beq.n	80042de <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80042d8:	4b16      	ldr	r3, [pc, #88]	@ (8004334 <xTaskResumeAll+0x130>)
 80042da:	2201      	movs	r2, #1
 80042dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	3b01      	subs	r3, #1
 80042e2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1f1      	bne.n	80042ce <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80042ea:	4b13      	ldr	r3, [pc, #76]	@ (8004338 <xTaskResumeAll+0x134>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80042f0:	4b10      	ldr	r3, [pc, #64]	@ (8004334 <xTaskResumeAll+0x130>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d009      	beq.n	800430c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80042f8:	2301      	movs	r3, #1
 80042fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80042fc:	4b0f      	ldr	r3, [pc, #60]	@ (800433c <xTaskResumeAll+0x138>)
 80042fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004302:	601a      	str	r2, [r3, #0]
 8004304:	f3bf 8f4f 	dsb	sy
 8004308:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800430c:	f000 fec6 	bl	800509c <vPortExitCritical>

	return xAlreadyYielded;
 8004310:	68bb      	ldr	r3, [r7, #8]
}
 8004312:	4618      	mov	r0, r3
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	2000043c 	.word	0x2000043c
 8004320:	20000414 	.word	0x20000414
 8004324:	200003d4 	.word	0x200003d4
 8004328:	2000041c 	.word	0x2000041c
 800432c:	20000318 	.word	0x20000318
 8004330:	20000314 	.word	0x20000314
 8004334:	20000428 	.word	0x20000428
 8004338:	20000424 	.word	0x20000424
 800433c:	e000ed04 	.word	0xe000ed04

08004340 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004346:	2300      	movs	r3, #0
 8004348:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800434a:	4b51      	ldr	r3, [pc, #324]	@ (8004490 <xTaskIncrementTick+0x150>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	f040 808e 	bne.w	8004470 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004354:	4b4f      	ldr	r3, [pc, #316]	@ (8004494 <xTaskIncrementTick+0x154>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	3301      	adds	r3, #1
 800435a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800435c:	4a4d      	ldr	r2, [pc, #308]	@ (8004494 <xTaskIncrementTick+0x154>)
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d121      	bne.n	80043ac <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004368:	4b4b      	ldr	r3, [pc, #300]	@ (8004498 <xTaskIncrementTick+0x158>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00b      	beq.n	800438a <xTaskIncrementTick+0x4a>
	__asm volatile
 8004372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004376:	f383 8811 	msr	BASEPRI, r3
 800437a:	f3bf 8f6f 	isb	sy
 800437e:	f3bf 8f4f 	dsb	sy
 8004382:	603b      	str	r3, [r7, #0]
}
 8004384:	bf00      	nop
 8004386:	bf00      	nop
 8004388:	e7fd      	b.n	8004386 <xTaskIncrementTick+0x46>
 800438a:	4b43      	ldr	r3, [pc, #268]	@ (8004498 <xTaskIncrementTick+0x158>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	60fb      	str	r3, [r7, #12]
 8004390:	4b42      	ldr	r3, [pc, #264]	@ (800449c <xTaskIncrementTick+0x15c>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a40      	ldr	r2, [pc, #256]	@ (8004498 <xTaskIncrementTick+0x158>)
 8004396:	6013      	str	r3, [r2, #0]
 8004398:	4a40      	ldr	r2, [pc, #256]	@ (800449c <xTaskIncrementTick+0x15c>)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6013      	str	r3, [r2, #0]
 800439e:	4b40      	ldr	r3, [pc, #256]	@ (80044a0 <xTaskIncrementTick+0x160>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	3301      	adds	r3, #1
 80043a4:	4a3e      	ldr	r2, [pc, #248]	@ (80044a0 <xTaskIncrementTick+0x160>)
 80043a6:	6013      	str	r3, [r2, #0]
 80043a8:	f000 faaa 	bl	8004900 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80043ac:	4b3d      	ldr	r3, [pc, #244]	@ (80044a4 <xTaskIncrementTick+0x164>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d34d      	bcc.n	8004452 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043b6:	4b38      	ldr	r3, [pc, #224]	@ (8004498 <xTaskIncrementTick+0x158>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d101      	bne.n	80043c4 <xTaskIncrementTick+0x84>
 80043c0:	2301      	movs	r3, #1
 80043c2:	e000      	b.n	80043c6 <xTaskIncrementTick+0x86>
 80043c4:	2300      	movs	r3, #0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d004      	beq.n	80043d4 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043ca:	4b36      	ldr	r3, [pc, #216]	@ (80044a4 <xTaskIncrementTick+0x164>)
 80043cc:	f04f 32ff 	mov.w	r2, #4294967295
 80043d0:	601a      	str	r2, [r3, #0]
					break;
 80043d2:	e03e      	b.n	8004452 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80043d4:	4b30      	ldr	r3, [pc, #192]	@ (8004498 <xTaskIncrementTick+0x158>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d203      	bcs.n	80043f4 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80043ec:	4a2d      	ldr	r2, [pc, #180]	@ (80044a4 <xTaskIncrementTick+0x164>)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6013      	str	r3, [r2, #0]
						break;
 80043f2:	e02e      	b.n	8004452 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	3304      	adds	r3, #4
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7fe ff15 	bl	8003228 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004402:	2b00      	cmp	r3, #0
 8004404:	d004      	beq.n	8004410 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	3318      	adds	r3, #24
 800440a:	4618      	mov	r0, r3
 800440c:	f7fe ff0c 	bl	8003228 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004414:	2201      	movs	r2, #1
 8004416:	409a      	lsls	r2, r3
 8004418:	4b23      	ldr	r3, [pc, #140]	@ (80044a8 <xTaskIncrementTick+0x168>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4313      	orrs	r3, r2
 800441e:	4a22      	ldr	r2, [pc, #136]	@ (80044a8 <xTaskIncrementTick+0x168>)
 8004420:	6013      	str	r3, [r2, #0]
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004426:	4613      	mov	r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4413      	add	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	4a1f      	ldr	r2, [pc, #124]	@ (80044ac <xTaskIncrementTick+0x16c>)
 8004430:	441a      	add	r2, r3
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	3304      	adds	r3, #4
 8004436:	4619      	mov	r1, r3
 8004438:	4610      	mov	r0, r2
 800443a:	f7fe fe98 	bl	800316e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004442:	4b1b      	ldr	r3, [pc, #108]	@ (80044b0 <xTaskIncrementTick+0x170>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004448:	429a      	cmp	r2, r3
 800444a:	d3b4      	bcc.n	80043b6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800444c:	2301      	movs	r3, #1
 800444e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004450:	e7b1      	b.n	80043b6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004452:	4b17      	ldr	r3, [pc, #92]	@ (80044b0 <xTaskIncrementTick+0x170>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004458:	4914      	ldr	r1, [pc, #80]	@ (80044ac <xTaskIncrementTick+0x16c>)
 800445a:	4613      	mov	r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4413      	add	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	440b      	add	r3, r1
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d907      	bls.n	800447a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800446a:	2301      	movs	r3, #1
 800446c:	617b      	str	r3, [r7, #20]
 800446e:	e004      	b.n	800447a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004470:	4b10      	ldr	r3, [pc, #64]	@ (80044b4 <xTaskIncrementTick+0x174>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	3301      	adds	r3, #1
 8004476:	4a0f      	ldr	r2, [pc, #60]	@ (80044b4 <xTaskIncrementTick+0x174>)
 8004478:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800447a:	4b0f      	ldr	r3, [pc, #60]	@ (80044b8 <xTaskIncrementTick+0x178>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d001      	beq.n	8004486 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8004482:	2301      	movs	r3, #1
 8004484:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004486:	697b      	ldr	r3, [r7, #20]
}
 8004488:	4618      	mov	r0, r3
 800448a:	3718      	adds	r7, #24
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	2000043c 	.word	0x2000043c
 8004494:	20000418 	.word	0x20000418
 8004498:	200003cc 	.word	0x200003cc
 800449c:	200003d0 	.word	0x200003d0
 80044a0:	2000042c 	.word	0x2000042c
 80044a4:	20000434 	.word	0x20000434
 80044a8:	2000041c 	.word	0x2000041c
 80044ac:	20000318 	.word	0x20000318
 80044b0:	20000314 	.word	0x20000314
 80044b4:	20000424 	.word	0x20000424
 80044b8:	20000428 	.word	0x20000428

080044bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80044bc:	b480      	push	{r7}
 80044be:	b087      	sub	sp, #28
 80044c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80044c2:	4b27      	ldr	r3, [pc, #156]	@ (8004560 <vTaskSwitchContext+0xa4>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d003      	beq.n	80044d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80044ca:	4b26      	ldr	r3, [pc, #152]	@ (8004564 <vTaskSwitchContext+0xa8>)
 80044cc:	2201      	movs	r2, #1
 80044ce:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80044d0:	e040      	b.n	8004554 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80044d2:	4b24      	ldr	r3, [pc, #144]	@ (8004564 <vTaskSwitchContext+0xa8>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80044d8:	4b23      	ldr	r3, [pc, #140]	@ (8004568 <vTaskSwitchContext+0xac>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	fab3 f383 	clz	r3, r3
 80044e4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80044e6:	7afb      	ldrb	r3, [r7, #11]
 80044e8:	f1c3 031f 	rsb	r3, r3, #31
 80044ec:	617b      	str	r3, [r7, #20]
 80044ee:	491f      	ldr	r1, [pc, #124]	@ (800456c <vTaskSwitchContext+0xb0>)
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	4613      	mov	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	4413      	add	r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	440b      	add	r3, r1
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10b      	bne.n	800451a <vTaskSwitchContext+0x5e>
	__asm volatile
 8004502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004506:	f383 8811 	msr	BASEPRI, r3
 800450a:	f3bf 8f6f 	isb	sy
 800450e:	f3bf 8f4f 	dsb	sy
 8004512:	607b      	str	r3, [r7, #4]
}
 8004514:	bf00      	nop
 8004516:	bf00      	nop
 8004518:	e7fd      	b.n	8004516 <vTaskSwitchContext+0x5a>
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	4613      	mov	r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	4413      	add	r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	4a11      	ldr	r2, [pc, #68]	@ (800456c <vTaskSwitchContext+0xb0>)
 8004526:	4413      	add	r3, r2
 8004528:	613b      	str	r3, [r7, #16]
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	605a      	str	r2, [r3, #4]
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	3308      	adds	r3, #8
 800453c:	429a      	cmp	r2, r3
 800453e:	d104      	bne.n	800454a <vTaskSwitchContext+0x8e>
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	605a      	str	r2, [r3, #4]
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	4a07      	ldr	r2, [pc, #28]	@ (8004570 <vTaskSwitchContext+0xb4>)
 8004552:	6013      	str	r3, [r2, #0]
}
 8004554:	bf00      	nop
 8004556:	371c      	adds	r7, #28
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr
 8004560:	2000043c 	.word	0x2000043c
 8004564:	20000428 	.word	0x20000428
 8004568:	2000041c 	.word	0x2000041c
 800456c:	20000318 	.word	0x20000318
 8004570:	20000314 	.word	0x20000314

08004574 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10b      	bne.n	800459c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004588:	f383 8811 	msr	BASEPRI, r3
 800458c:	f3bf 8f6f 	isb	sy
 8004590:	f3bf 8f4f 	dsb	sy
 8004594:	60fb      	str	r3, [r7, #12]
}
 8004596:	bf00      	nop
 8004598:	bf00      	nop
 800459a:	e7fd      	b.n	8004598 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800459c:	4b07      	ldr	r3, [pc, #28]	@ (80045bc <vTaskPlaceOnEventList+0x48>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	3318      	adds	r3, #24
 80045a2:	4619      	mov	r1, r3
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f7fe fe06 	bl	80031b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80045aa:	2101      	movs	r1, #1
 80045ac:	6838      	ldr	r0, [r7, #0]
 80045ae:	f000 fbaf 	bl	8004d10 <prvAddCurrentTaskToDelayedList>
}
 80045b2:	bf00      	nop
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	20000314 	.word	0x20000314

080045c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10b      	bne.n	80045ee <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80045d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045da:	f383 8811 	msr	BASEPRI, r3
 80045de:	f3bf 8f6f 	isb	sy
 80045e2:	f3bf 8f4f 	dsb	sy
 80045e6:	60fb      	str	r3, [r7, #12]
}
 80045e8:	bf00      	nop
 80045ea:	bf00      	nop
 80045ec:	e7fd      	b.n	80045ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	3318      	adds	r3, #24
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7fe fe18 	bl	8003228 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045f8:	4b1d      	ldr	r3, [pc, #116]	@ (8004670 <xTaskRemoveFromEventList+0xb0>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d11c      	bne.n	800463a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	3304      	adds	r3, #4
 8004604:	4618      	mov	r0, r3
 8004606:	f7fe fe0f 	bl	8003228 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800460e:	2201      	movs	r2, #1
 8004610:	409a      	lsls	r2, r3
 8004612:	4b18      	ldr	r3, [pc, #96]	@ (8004674 <xTaskRemoveFromEventList+0xb4>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4313      	orrs	r3, r2
 8004618:	4a16      	ldr	r2, [pc, #88]	@ (8004674 <xTaskRemoveFromEventList+0xb4>)
 800461a:	6013      	str	r3, [r2, #0]
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004620:	4613      	mov	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	4a13      	ldr	r2, [pc, #76]	@ (8004678 <xTaskRemoveFromEventList+0xb8>)
 800462a:	441a      	add	r2, r3
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	3304      	adds	r3, #4
 8004630:	4619      	mov	r1, r3
 8004632:	4610      	mov	r0, r2
 8004634:	f7fe fd9b 	bl	800316e <vListInsertEnd>
 8004638:	e005      	b.n	8004646 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	3318      	adds	r3, #24
 800463e:	4619      	mov	r1, r3
 8004640:	480e      	ldr	r0, [pc, #56]	@ (800467c <xTaskRemoveFromEventList+0xbc>)
 8004642:	f7fe fd94 	bl	800316e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800464a:	4b0d      	ldr	r3, [pc, #52]	@ (8004680 <xTaskRemoveFromEventList+0xc0>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004650:	429a      	cmp	r2, r3
 8004652:	d905      	bls.n	8004660 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004654:	2301      	movs	r3, #1
 8004656:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004658:	4b0a      	ldr	r3, [pc, #40]	@ (8004684 <xTaskRemoveFromEventList+0xc4>)
 800465a:	2201      	movs	r2, #1
 800465c:	601a      	str	r2, [r3, #0]
 800465e:	e001      	b.n	8004664 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004660:	2300      	movs	r3, #0
 8004662:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004664:	697b      	ldr	r3, [r7, #20]
}
 8004666:	4618      	mov	r0, r3
 8004668:	3718      	adds	r7, #24
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	2000043c 	.word	0x2000043c
 8004674:	2000041c 	.word	0x2000041c
 8004678:	20000318 	.word	0x20000318
 800467c:	200003d4 	.word	0x200003d4
 8004680:	20000314 	.word	0x20000314
 8004684:	20000428 	.word	0x20000428

08004688 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004690:	4b06      	ldr	r3, [pc, #24]	@ (80046ac <vTaskInternalSetTimeOutState+0x24>)
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004698:	4b05      	ldr	r3, [pc, #20]	@ (80046b0 <vTaskInternalSetTimeOutState+0x28>)
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	605a      	str	r2, [r3, #4]
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr
 80046ac:	2000042c 	.word	0x2000042c
 80046b0:	20000418 	.word	0x20000418

080046b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b088      	sub	sp, #32
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10b      	bne.n	80046dc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80046c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046c8:	f383 8811 	msr	BASEPRI, r3
 80046cc:	f3bf 8f6f 	isb	sy
 80046d0:	f3bf 8f4f 	dsb	sy
 80046d4:	613b      	str	r3, [r7, #16]
}
 80046d6:	bf00      	nop
 80046d8:	bf00      	nop
 80046da:	e7fd      	b.n	80046d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10b      	bne.n	80046fa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80046e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046e6:	f383 8811 	msr	BASEPRI, r3
 80046ea:	f3bf 8f6f 	isb	sy
 80046ee:	f3bf 8f4f 	dsb	sy
 80046f2:	60fb      	str	r3, [r7, #12]
}
 80046f4:	bf00      	nop
 80046f6:	bf00      	nop
 80046f8:	e7fd      	b.n	80046f6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80046fa:	f000 fc9d 	bl	8005038 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80046fe:	4b1d      	ldr	r3, [pc, #116]	@ (8004774 <xTaskCheckForTimeOut+0xc0>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004716:	d102      	bne.n	800471e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004718:	2300      	movs	r3, #0
 800471a:	61fb      	str	r3, [r7, #28]
 800471c:	e023      	b.n	8004766 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	4b15      	ldr	r3, [pc, #84]	@ (8004778 <xTaskCheckForTimeOut+0xc4>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	429a      	cmp	r2, r3
 8004728:	d007      	beq.n	800473a <xTaskCheckForTimeOut+0x86>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	69ba      	ldr	r2, [r7, #24]
 8004730:	429a      	cmp	r2, r3
 8004732:	d302      	bcc.n	800473a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004734:	2301      	movs	r3, #1
 8004736:	61fb      	str	r3, [r7, #28]
 8004738:	e015      	b.n	8004766 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	429a      	cmp	r2, r3
 8004742:	d20b      	bcs.n	800475c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	1ad2      	subs	r2, r2, r3
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f7ff ff99 	bl	8004688 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004756:	2300      	movs	r3, #0
 8004758:	61fb      	str	r3, [r7, #28]
 800475a:	e004      	b.n	8004766 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	2200      	movs	r2, #0
 8004760:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004762:	2301      	movs	r3, #1
 8004764:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004766:	f000 fc99 	bl	800509c <vPortExitCritical>

	return xReturn;
 800476a:	69fb      	ldr	r3, [r7, #28]
}
 800476c:	4618      	mov	r0, r3
 800476e:	3720      	adds	r7, #32
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	20000418 	.word	0x20000418
 8004778:	2000042c 	.word	0x2000042c

0800477c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800477c:	b480      	push	{r7}
 800477e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004780:	4b03      	ldr	r3, [pc, #12]	@ (8004790 <vTaskMissedYield+0x14>)
 8004782:	2201      	movs	r2, #1
 8004784:	601a      	str	r2, [r3, #0]
}
 8004786:	bf00      	nop
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	20000428 	.word	0x20000428

08004794 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800479c:	f000 f852 	bl	8004844 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80047a0:	4b06      	ldr	r3, [pc, #24]	@ (80047bc <prvIdleTask+0x28>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d9f9      	bls.n	800479c <prvIdleTask+0x8>
			{
				taskYIELD();
 80047a8:	4b05      	ldr	r3, [pc, #20]	@ (80047c0 <prvIdleTask+0x2c>)
 80047aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047ae:	601a      	str	r2, [r3, #0]
 80047b0:	f3bf 8f4f 	dsb	sy
 80047b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80047b8:	e7f0      	b.n	800479c <prvIdleTask+0x8>
 80047ba:	bf00      	nop
 80047bc:	20000318 	.word	0x20000318
 80047c0:	e000ed04 	.word	0xe000ed04

080047c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80047ca:	2300      	movs	r3, #0
 80047cc:	607b      	str	r3, [r7, #4]
 80047ce:	e00c      	b.n	80047ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	4613      	mov	r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4413      	add	r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	4a12      	ldr	r2, [pc, #72]	@ (8004824 <prvInitialiseTaskLists+0x60>)
 80047dc:	4413      	add	r3, r2
 80047de:	4618      	mov	r0, r3
 80047e0:	f7fe fc98 	bl	8003114 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	3301      	adds	r3, #1
 80047e8:	607b      	str	r3, [r7, #4]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2b06      	cmp	r3, #6
 80047ee:	d9ef      	bls.n	80047d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80047f0:	480d      	ldr	r0, [pc, #52]	@ (8004828 <prvInitialiseTaskLists+0x64>)
 80047f2:	f7fe fc8f 	bl	8003114 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80047f6:	480d      	ldr	r0, [pc, #52]	@ (800482c <prvInitialiseTaskLists+0x68>)
 80047f8:	f7fe fc8c 	bl	8003114 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80047fc:	480c      	ldr	r0, [pc, #48]	@ (8004830 <prvInitialiseTaskLists+0x6c>)
 80047fe:	f7fe fc89 	bl	8003114 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004802:	480c      	ldr	r0, [pc, #48]	@ (8004834 <prvInitialiseTaskLists+0x70>)
 8004804:	f7fe fc86 	bl	8003114 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004808:	480b      	ldr	r0, [pc, #44]	@ (8004838 <prvInitialiseTaskLists+0x74>)
 800480a:	f7fe fc83 	bl	8003114 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800480e:	4b0b      	ldr	r3, [pc, #44]	@ (800483c <prvInitialiseTaskLists+0x78>)
 8004810:	4a05      	ldr	r2, [pc, #20]	@ (8004828 <prvInitialiseTaskLists+0x64>)
 8004812:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004814:	4b0a      	ldr	r3, [pc, #40]	@ (8004840 <prvInitialiseTaskLists+0x7c>)
 8004816:	4a05      	ldr	r2, [pc, #20]	@ (800482c <prvInitialiseTaskLists+0x68>)
 8004818:	601a      	str	r2, [r3, #0]
}
 800481a:	bf00      	nop
 800481c:	3708      	adds	r7, #8
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	20000318 	.word	0x20000318
 8004828:	200003a4 	.word	0x200003a4
 800482c:	200003b8 	.word	0x200003b8
 8004830:	200003d4 	.word	0x200003d4
 8004834:	200003e8 	.word	0x200003e8
 8004838:	20000400 	.word	0x20000400
 800483c:	200003cc 	.word	0x200003cc
 8004840:	200003d0 	.word	0x200003d0

08004844 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800484a:	e019      	b.n	8004880 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800484c:	f000 fbf4 	bl	8005038 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004850:	4b10      	ldr	r3, [pc, #64]	@ (8004894 <prvCheckTasksWaitingTermination+0x50>)
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	3304      	adds	r3, #4
 800485c:	4618      	mov	r0, r3
 800485e:	f7fe fce3 	bl	8003228 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004862:	4b0d      	ldr	r3, [pc, #52]	@ (8004898 <prvCheckTasksWaitingTermination+0x54>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	3b01      	subs	r3, #1
 8004868:	4a0b      	ldr	r2, [pc, #44]	@ (8004898 <prvCheckTasksWaitingTermination+0x54>)
 800486a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800486c:	4b0b      	ldr	r3, [pc, #44]	@ (800489c <prvCheckTasksWaitingTermination+0x58>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	3b01      	subs	r3, #1
 8004872:	4a0a      	ldr	r2, [pc, #40]	@ (800489c <prvCheckTasksWaitingTermination+0x58>)
 8004874:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004876:	f000 fc11 	bl	800509c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f810 	bl	80048a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004880:	4b06      	ldr	r3, [pc, #24]	@ (800489c <prvCheckTasksWaitingTermination+0x58>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1e1      	bne.n	800484c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004888:	bf00      	nop
 800488a:	bf00      	nop
 800488c:	3708      	adds	r7, #8
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	200003e8 	.word	0x200003e8
 8004898:	20000414 	.word	0x20000414
 800489c:	200003fc 	.word	0x200003fc

080048a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d108      	bne.n	80048c4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048b6:	4618      	mov	r0, r3
 80048b8:	f000 fda8 	bl	800540c <vPortFree>
				vPortFree( pxTCB );
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 fda5 	bl	800540c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80048c2:	e019      	b.n	80048f8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d103      	bne.n	80048d6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 fd9c 	bl	800540c <vPortFree>
	}
 80048d4:	e010      	b.n	80048f8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d00b      	beq.n	80048f8 <prvDeleteTCB+0x58>
	__asm volatile
 80048e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048e4:	f383 8811 	msr	BASEPRI, r3
 80048e8:	f3bf 8f6f 	isb	sy
 80048ec:	f3bf 8f4f 	dsb	sy
 80048f0:	60fb      	str	r3, [r7, #12]
}
 80048f2:	bf00      	nop
 80048f4:	bf00      	nop
 80048f6:	e7fd      	b.n	80048f4 <prvDeleteTCB+0x54>
	}
 80048f8:	bf00      	nop
 80048fa:	3710      	adds	r7, #16
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004906:	4b0f      	ldr	r3, [pc, #60]	@ (8004944 <prvResetNextTaskUnblockTime+0x44>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d101      	bne.n	8004914 <prvResetNextTaskUnblockTime+0x14>
 8004910:	2301      	movs	r3, #1
 8004912:	e000      	b.n	8004916 <prvResetNextTaskUnblockTime+0x16>
 8004914:	2300      	movs	r3, #0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d004      	beq.n	8004924 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800491a:	4b0b      	ldr	r3, [pc, #44]	@ (8004948 <prvResetNextTaskUnblockTime+0x48>)
 800491c:	f04f 32ff 	mov.w	r2, #4294967295
 8004920:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004922:	e008      	b.n	8004936 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004924:	4b07      	ldr	r3, [pc, #28]	@ (8004944 <prvResetNextTaskUnblockTime+0x44>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	4a05      	ldr	r2, [pc, #20]	@ (8004948 <prvResetNextTaskUnblockTime+0x48>)
 8004934:	6013      	str	r3, [r2, #0]
}
 8004936:	bf00      	nop
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	200003cc 	.word	0x200003cc
 8004948:	20000434 	.word	0x20000434

0800494c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004952:	4b0b      	ldr	r3, [pc, #44]	@ (8004980 <xTaskGetSchedulerState+0x34>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d102      	bne.n	8004960 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800495a:	2301      	movs	r3, #1
 800495c:	607b      	str	r3, [r7, #4]
 800495e:	e008      	b.n	8004972 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004960:	4b08      	ldr	r3, [pc, #32]	@ (8004984 <xTaskGetSchedulerState+0x38>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d102      	bne.n	800496e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004968:	2302      	movs	r3, #2
 800496a:	607b      	str	r3, [r7, #4]
 800496c:	e001      	b.n	8004972 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800496e:	2300      	movs	r3, #0
 8004970:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004972:	687b      	ldr	r3, [r7, #4]
	}
 8004974:	4618      	mov	r0, r3
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr
 8004980:	20000420 	.word	0x20000420
 8004984:	2000043c 	.word	0x2000043c

08004988 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004994:	2300      	movs	r3, #0
 8004996:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d06e      	beq.n	8004a7c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049a2:	4b39      	ldr	r3, [pc, #228]	@ (8004a88 <xTaskPriorityInherit+0x100>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d25e      	bcs.n	8004a6a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	db06      	blt.n	80049c2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049b4:	4b34      	ldr	r3, [pc, #208]	@ (8004a88 <xTaskPriorityInherit+0x100>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ba:	f1c3 0207 	rsb	r2, r3, #7
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	6959      	ldr	r1, [r3, #20]
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049ca:	4613      	mov	r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	4413      	add	r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	4a2e      	ldr	r2, [pc, #184]	@ (8004a8c <xTaskPriorityInherit+0x104>)
 80049d4:	4413      	add	r3, r2
 80049d6:	4299      	cmp	r1, r3
 80049d8:	d101      	bne.n	80049de <xTaskPriorityInherit+0x56>
 80049da:	2301      	movs	r3, #1
 80049dc:	e000      	b.n	80049e0 <xTaskPriorityInherit+0x58>
 80049de:	2300      	movs	r3, #0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d03a      	beq.n	8004a5a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	3304      	adds	r3, #4
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7fe fc1d 	bl	8003228 <uxListRemove>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d115      	bne.n	8004a20 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049f8:	4924      	ldr	r1, [pc, #144]	@ (8004a8c <xTaskPriorityInherit+0x104>)
 80049fa:	4613      	mov	r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4413      	add	r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	440b      	add	r3, r1
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d10a      	bne.n	8004a20 <xTaskPriorityInherit+0x98>
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a0e:	2201      	movs	r2, #1
 8004a10:	fa02 f303 	lsl.w	r3, r2, r3
 8004a14:	43da      	mvns	r2, r3
 8004a16:	4b1e      	ldr	r3, [pc, #120]	@ (8004a90 <xTaskPriorityInherit+0x108>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	4a1c      	ldr	r2, [pc, #112]	@ (8004a90 <xTaskPriorityInherit+0x108>)
 8004a1e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004a20:	4b19      	ldr	r3, [pc, #100]	@ (8004a88 <xTaskPriorityInherit+0x100>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a2e:	2201      	movs	r2, #1
 8004a30:	409a      	lsls	r2, r3
 8004a32:	4b17      	ldr	r3, [pc, #92]	@ (8004a90 <xTaskPriorityInherit+0x108>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	4a15      	ldr	r2, [pc, #84]	@ (8004a90 <xTaskPriorityInherit+0x108>)
 8004a3a:	6013      	str	r3, [r2, #0]
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a40:	4613      	mov	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4413      	add	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4a10      	ldr	r2, [pc, #64]	@ (8004a8c <xTaskPriorityInherit+0x104>)
 8004a4a:	441a      	add	r2, r3
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	3304      	adds	r3, #4
 8004a50:	4619      	mov	r1, r3
 8004a52:	4610      	mov	r0, r2
 8004a54:	f7fe fb8b 	bl	800316e <vListInsertEnd>
 8004a58:	e004      	b.n	8004a64 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8004a88 <xTaskPriorityInherit+0x100>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004a64:	2301      	movs	r3, #1
 8004a66:	60fb      	str	r3, [r7, #12]
 8004a68:	e008      	b.n	8004a7c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a6e:	4b06      	ldr	r3, [pc, #24]	@ (8004a88 <xTaskPriorityInherit+0x100>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d201      	bcs.n	8004a7c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
	}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	20000314 	.word	0x20000314
 8004a8c:	20000318 	.word	0x20000318
 8004a90:	2000041c 	.word	0x2000041c

08004a94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d070      	beq.n	8004b8c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004aaa:	4b3b      	ldr	r3, [pc, #236]	@ (8004b98 <xTaskPriorityDisinherit+0x104>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d00b      	beq.n	8004acc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ab8:	f383 8811 	msr	BASEPRI, r3
 8004abc:	f3bf 8f6f 	isb	sy
 8004ac0:	f3bf 8f4f 	dsb	sy
 8004ac4:	60fb      	str	r3, [r7, #12]
}
 8004ac6:	bf00      	nop
 8004ac8:	bf00      	nop
 8004aca:	e7fd      	b.n	8004ac8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d10b      	bne.n	8004aec <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ad8:	f383 8811 	msr	BASEPRI, r3
 8004adc:	f3bf 8f6f 	isb	sy
 8004ae0:	f3bf 8f4f 	dsb	sy
 8004ae4:	60bb      	str	r3, [r7, #8]
}
 8004ae6:	bf00      	nop
 8004ae8:	bf00      	nop
 8004aea:	e7fd      	b.n	8004ae8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004af0:	1e5a      	subs	r2, r3, #1
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d044      	beq.n	8004b8c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d140      	bne.n	8004b8c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	3304      	adds	r3, #4
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7fe fb8a 	bl	8003228 <uxListRemove>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d115      	bne.n	8004b46 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b1e:	491f      	ldr	r1, [pc, #124]	@ (8004b9c <xTaskPriorityDisinherit+0x108>)
 8004b20:	4613      	mov	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	4413      	add	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	440b      	add	r3, r1
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d10a      	bne.n	8004b46 <xTaskPriorityDisinherit+0xb2>
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b34:	2201      	movs	r2, #1
 8004b36:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3a:	43da      	mvns	r2, r3
 8004b3c:	4b18      	ldr	r3, [pc, #96]	@ (8004ba0 <xTaskPriorityDisinherit+0x10c>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4013      	ands	r3, r2
 8004b42:	4a17      	ldr	r2, [pc, #92]	@ (8004ba0 <xTaskPriorityDisinherit+0x10c>)
 8004b44:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b52:	f1c3 0207 	rsb	r2, r3, #7
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b5e:	2201      	movs	r2, #1
 8004b60:	409a      	lsls	r2, r3
 8004b62:	4b0f      	ldr	r3, [pc, #60]	@ (8004ba0 <xTaskPriorityDisinherit+0x10c>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	4a0d      	ldr	r2, [pc, #52]	@ (8004ba0 <xTaskPriorityDisinherit+0x10c>)
 8004b6a:	6013      	str	r3, [r2, #0]
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b70:	4613      	mov	r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	4413      	add	r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4a08      	ldr	r2, [pc, #32]	@ (8004b9c <xTaskPriorityDisinherit+0x108>)
 8004b7a:	441a      	add	r2, r3
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	3304      	adds	r3, #4
 8004b80:	4619      	mov	r1, r3
 8004b82:	4610      	mov	r0, r2
 8004b84:	f7fe faf3 	bl	800316e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004b8c:	697b      	ldr	r3, [r7, #20]
	}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3718      	adds	r7, #24
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	20000314 	.word	0x20000314
 8004b9c:	20000318 	.word	0x20000318
 8004ba0:	2000041c 	.word	0x2000041c

08004ba4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b088      	sub	sp, #32
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f000 808a 	beq.w	8004cd2 <vTaskPriorityDisinheritAfterTimeout+0x12e>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d10b      	bne.n	8004bde <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8004bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bca:	f383 8811 	msr	BASEPRI, r3
 8004bce:	f3bf 8f6f 	isb	sy
 8004bd2:	f3bf 8f4f 	dsb	sy
 8004bd6:	60fb      	str	r3, [r7, #12]
}
 8004bd8:	bf00      	nop
 8004bda:	bf00      	nop
 8004bdc:	e7fd      	b.n	8004bda <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004be2:	683a      	ldr	r2, [r7, #0]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d902      	bls.n	8004bee <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	61fb      	str	r3, [r7, #28]
 8004bec:	e002      	b.n	8004bf4 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bf2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf8:	69fa      	ldr	r2, [r7, #28]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d069      	beq.n	8004cd2 <vTaskPriorityDisinheritAfterTimeout+0x12e>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d164      	bne.n	8004cd2 <vTaskPriorityDisinheritAfterTimeout+0x12e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004c08:	4b34      	ldr	r3, [pc, #208]	@ (8004cdc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d10b      	bne.n	8004c2a <vTaskPriorityDisinheritAfterTimeout+0x86>
	__asm volatile
 8004c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c16:	f383 8811 	msr	BASEPRI, r3
 8004c1a:	f3bf 8f6f 	isb	sy
 8004c1e:	f3bf 8f4f 	dsb	sy
 8004c22:	60bb      	str	r3, [r7, #8]
}
 8004c24:	bf00      	nop
 8004c26:	bf00      	nop
 8004c28:	e7fd      	b.n	8004c26 <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c2e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	69fa      	ldr	r2, [r7, #28]
 8004c34:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	db04      	blt.n	8004c48 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	f1c3 0207 	rsb	r2, r3, #7
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	6959      	ldr	r1, [r3, #20]
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	4413      	add	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	4a22      	ldr	r2, [pc, #136]	@ (8004ce0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8004c58:	4413      	add	r3, r2
 8004c5a:	4299      	cmp	r1, r3
 8004c5c:	d101      	bne.n	8004c62 <vTaskPriorityDisinheritAfterTimeout+0xbe>
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e000      	b.n	8004c64 <vTaskPriorityDisinheritAfterTimeout+0xc0>
 8004c62:	2300      	movs	r3, #0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d034      	beq.n	8004cd2 <vTaskPriorityDisinheritAfterTimeout+0x12e>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	3304      	adds	r3, #4
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7fe fadb 	bl	8003228 <uxListRemove>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d115      	bne.n	8004ca4 <vTaskPriorityDisinheritAfterTimeout+0x100>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c7c:	4918      	ldr	r1, [pc, #96]	@ (8004ce0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8004c7e:	4613      	mov	r3, r2
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	4413      	add	r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	440b      	add	r3, r1
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10a      	bne.n	8004ca4 <vTaskPriorityDisinheritAfterTimeout+0x100>
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c92:	2201      	movs	r2, #1
 8004c94:	fa02 f303 	lsl.w	r3, r2, r3
 8004c98:	43da      	mvns	r2, r3
 8004c9a:	4b12      	ldr	r3, [pc, #72]	@ (8004ce4 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	4a10      	ldr	r2, [pc, #64]	@ (8004ce4 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8004ca2:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca8:	2201      	movs	r2, #1
 8004caa:	409a      	lsls	r2, r3
 8004cac:	4b0d      	ldr	r3, [pc, #52]	@ (8004ce4 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	4a0c      	ldr	r2, [pc, #48]	@ (8004ce4 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8004cb4:	6013      	str	r3, [r2, #0]
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cba:	4613      	mov	r3, r2
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	4413      	add	r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	4a07      	ldr	r2, [pc, #28]	@ (8004ce0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8004cc4:	441a      	add	r2, r3
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	3304      	adds	r3, #4
 8004cca:	4619      	mov	r1, r3
 8004ccc:	4610      	mov	r0, r2
 8004cce:	f7fe fa4e 	bl	800316e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004cd2:	bf00      	nop
 8004cd4:	3720      	adds	r7, #32
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	20000314 	.word	0x20000314
 8004ce0:	20000318 	.word	0x20000318
 8004ce4:	2000041c 	.word	0x2000041c

08004ce8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8004ce8:	b480      	push	{r7}
 8004cea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004cec:	4b07      	ldr	r3, [pc, #28]	@ (8004d0c <pvTaskIncrementMutexHeldCount+0x24>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d004      	beq.n	8004cfe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004cf4:	4b05      	ldr	r3, [pc, #20]	@ (8004d0c <pvTaskIncrementMutexHeldCount+0x24>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004cfa:	3201      	adds	r2, #1
 8004cfc:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8004cfe:	4b03      	ldr	r3, [pc, #12]	@ (8004d0c <pvTaskIncrementMutexHeldCount+0x24>)
 8004d00:	681b      	ldr	r3, [r3, #0]
	}
 8004d02:	4618      	mov	r0, r3
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr
 8004d0c:	20000314 	.word	0x20000314

08004d10 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004d1a:	4b29      	ldr	r3, [pc, #164]	@ (8004dc0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d20:	4b28      	ldr	r3, [pc, #160]	@ (8004dc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	3304      	adds	r3, #4
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7fe fa7e 	bl	8003228 <uxListRemove>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10b      	bne.n	8004d4a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004d32:	4b24      	ldr	r3, [pc, #144]	@ (8004dc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d38:	2201      	movs	r2, #1
 8004d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3e:	43da      	mvns	r2, r3
 8004d40:	4b21      	ldr	r3, [pc, #132]	@ (8004dc8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4013      	ands	r3, r2
 8004d46:	4a20      	ldr	r2, [pc, #128]	@ (8004dc8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004d48:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d50:	d10a      	bne.n	8004d68 <prvAddCurrentTaskToDelayedList+0x58>
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d007      	beq.n	8004d68 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d58:	4b1a      	ldr	r3, [pc, #104]	@ (8004dc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	3304      	adds	r3, #4
 8004d5e:	4619      	mov	r1, r3
 8004d60:	481a      	ldr	r0, [pc, #104]	@ (8004dcc <prvAddCurrentTaskToDelayedList+0xbc>)
 8004d62:	f7fe fa04 	bl	800316e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004d66:	e026      	b.n	8004db6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d70:	4b14      	ldr	r3, [pc, #80]	@ (8004dc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d209      	bcs.n	8004d94 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d80:	4b13      	ldr	r3, [pc, #76]	@ (8004dd0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	4b0f      	ldr	r3, [pc, #60]	@ (8004dc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	3304      	adds	r3, #4
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	4610      	mov	r0, r2
 8004d8e:	f7fe fa12 	bl	80031b6 <vListInsert>
}
 8004d92:	e010      	b.n	8004db6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d94:	4b0f      	ldr	r3, [pc, #60]	@ (8004dd4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	4b0a      	ldr	r3, [pc, #40]	@ (8004dc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	3304      	adds	r3, #4
 8004d9e:	4619      	mov	r1, r3
 8004da0:	4610      	mov	r0, r2
 8004da2:	f7fe fa08 	bl	80031b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004da6:	4b0c      	ldr	r3, [pc, #48]	@ (8004dd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68ba      	ldr	r2, [r7, #8]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d202      	bcs.n	8004db6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004db0:	4a09      	ldr	r2, [pc, #36]	@ (8004dd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	6013      	str	r3, [r2, #0]
}
 8004db6:	bf00      	nop
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	20000418 	.word	0x20000418
 8004dc4:	20000314 	.word	0x20000314
 8004dc8:	2000041c 	.word	0x2000041c
 8004dcc:	20000400 	.word	0x20000400
 8004dd0:	200003d0 	.word	0x200003d0
 8004dd4:	200003cc 	.word	0x200003cc
 8004dd8:	20000434 	.word	0x20000434

08004ddc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	3b04      	subs	r3, #4
 8004dec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004df4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	3b04      	subs	r3, #4
 8004dfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	f023 0201 	bic.w	r2, r3, #1
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	3b04      	subs	r3, #4
 8004e0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004e0c:	4a0c      	ldr	r2, [pc, #48]	@ (8004e40 <pxPortInitialiseStack+0x64>)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	3b14      	subs	r3, #20
 8004e16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	3b04      	subs	r3, #4
 8004e22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f06f 0202 	mvn.w	r2, #2
 8004e2a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	3b20      	subs	r3, #32
 8004e30:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004e32:	68fb      	ldr	r3, [r7, #12]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3714      	adds	r7, #20
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr
 8004e40:	08004e45 	.word	0x08004e45

08004e44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004e4e:	4b13      	ldr	r3, [pc, #76]	@ (8004e9c <prvTaskExitError+0x58>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e56:	d00b      	beq.n	8004e70 <prvTaskExitError+0x2c>
	__asm volatile
 8004e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e5c:	f383 8811 	msr	BASEPRI, r3
 8004e60:	f3bf 8f6f 	isb	sy
 8004e64:	f3bf 8f4f 	dsb	sy
 8004e68:	60fb      	str	r3, [r7, #12]
}
 8004e6a:	bf00      	nop
 8004e6c:	bf00      	nop
 8004e6e:	e7fd      	b.n	8004e6c <prvTaskExitError+0x28>
	__asm volatile
 8004e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e74:	f383 8811 	msr	BASEPRI, r3
 8004e78:	f3bf 8f6f 	isb	sy
 8004e7c:	f3bf 8f4f 	dsb	sy
 8004e80:	60bb      	str	r3, [r7, #8]
}
 8004e82:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004e84:	bf00      	nop
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d0fc      	beq.n	8004e86 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004e8c:	bf00      	nop
 8004e8e:	bf00      	nop
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	2000000c 	.word	0x2000000c

08004ea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ea0:	4b07      	ldr	r3, [pc, #28]	@ (8004ec0 <pxCurrentTCBConst2>)
 8004ea2:	6819      	ldr	r1, [r3, #0]
 8004ea4:	6808      	ldr	r0, [r1, #0]
 8004ea6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eaa:	f380 8809 	msr	PSP, r0
 8004eae:	f3bf 8f6f 	isb	sy
 8004eb2:	f04f 0000 	mov.w	r0, #0
 8004eb6:	f380 8811 	msr	BASEPRI, r0
 8004eba:	4770      	bx	lr
 8004ebc:	f3af 8000 	nop.w

08004ec0 <pxCurrentTCBConst2>:
 8004ec0:	20000314 	.word	0x20000314
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ec4:	bf00      	nop
 8004ec6:	bf00      	nop

08004ec8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004ec8:	4808      	ldr	r0, [pc, #32]	@ (8004eec <prvPortStartFirstTask+0x24>)
 8004eca:	6800      	ldr	r0, [r0, #0]
 8004ecc:	6800      	ldr	r0, [r0, #0]
 8004ece:	f380 8808 	msr	MSP, r0
 8004ed2:	f04f 0000 	mov.w	r0, #0
 8004ed6:	f380 8814 	msr	CONTROL, r0
 8004eda:	b662      	cpsie	i
 8004edc:	b661      	cpsie	f
 8004ede:	f3bf 8f4f 	dsb	sy
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	df00      	svc	0
 8004ee8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004eea:	bf00      	nop
 8004eec:	e000ed08 	.word	0xe000ed08

08004ef0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b086      	sub	sp, #24
 8004ef4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004ef6:	4b47      	ldr	r3, [pc, #284]	@ (8005014 <xPortStartScheduler+0x124>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a47      	ldr	r2, [pc, #284]	@ (8005018 <xPortStartScheduler+0x128>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d10b      	bne.n	8004f18 <xPortStartScheduler+0x28>
	__asm volatile
 8004f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f04:	f383 8811 	msr	BASEPRI, r3
 8004f08:	f3bf 8f6f 	isb	sy
 8004f0c:	f3bf 8f4f 	dsb	sy
 8004f10:	60fb      	str	r3, [r7, #12]
}
 8004f12:	bf00      	nop
 8004f14:	bf00      	nop
 8004f16:	e7fd      	b.n	8004f14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004f18:	4b3e      	ldr	r3, [pc, #248]	@ (8005014 <xPortStartScheduler+0x124>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a3f      	ldr	r2, [pc, #252]	@ (800501c <xPortStartScheduler+0x12c>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d10b      	bne.n	8004f3a <xPortStartScheduler+0x4a>
	__asm volatile
 8004f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f26:	f383 8811 	msr	BASEPRI, r3
 8004f2a:	f3bf 8f6f 	isb	sy
 8004f2e:	f3bf 8f4f 	dsb	sy
 8004f32:	613b      	str	r3, [r7, #16]
}
 8004f34:	bf00      	nop
 8004f36:	bf00      	nop
 8004f38:	e7fd      	b.n	8004f36 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004f3a:	4b39      	ldr	r3, [pc, #228]	@ (8005020 <xPortStartScheduler+0x130>)
 8004f3c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	22ff      	movs	r2, #255	@ 0xff
 8004f4a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004f54:	78fb      	ldrb	r3, [r7, #3]
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004f5c:	b2da      	uxtb	r2, r3
 8004f5e:	4b31      	ldr	r3, [pc, #196]	@ (8005024 <xPortStartScheduler+0x134>)
 8004f60:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004f62:	4b31      	ldr	r3, [pc, #196]	@ (8005028 <xPortStartScheduler+0x138>)
 8004f64:	2207      	movs	r2, #7
 8004f66:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f68:	e009      	b.n	8004f7e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004f6a:	4b2f      	ldr	r3, [pc, #188]	@ (8005028 <xPortStartScheduler+0x138>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	4a2d      	ldr	r2, [pc, #180]	@ (8005028 <xPortStartScheduler+0x138>)
 8004f72:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004f74:	78fb      	ldrb	r3, [r7, #3]
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f7e:	78fb      	ldrb	r3, [r7, #3]
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f86:	2b80      	cmp	r3, #128	@ 0x80
 8004f88:	d0ef      	beq.n	8004f6a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004f8a:	4b27      	ldr	r3, [pc, #156]	@ (8005028 <xPortStartScheduler+0x138>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f1c3 0307 	rsb	r3, r3, #7
 8004f92:	2b04      	cmp	r3, #4
 8004f94:	d00b      	beq.n	8004fae <xPortStartScheduler+0xbe>
	__asm volatile
 8004f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f9a:	f383 8811 	msr	BASEPRI, r3
 8004f9e:	f3bf 8f6f 	isb	sy
 8004fa2:	f3bf 8f4f 	dsb	sy
 8004fa6:	60bb      	str	r3, [r7, #8]
}
 8004fa8:	bf00      	nop
 8004faa:	bf00      	nop
 8004fac:	e7fd      	b.n	8004faa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004fae:	4b1e      	ldr	r3, [pc, #120]	@ (8005028 <xPortStartScheduler+0x138>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	021b      	lsls	r3, r3, #8
 8004fb4:	4a1c      	ldr	r2, [pc, #112]	@ (8005028 <xPortStartScheduler+0x138>)
 8004fb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8005028 <xPortStartScheduler+0x138>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004fc0:	4a19      	ldr	r2, [pc, #100]	@ (8005028 <xPortStartScheduler+0x138>)
 8004fc2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	b2da      	uxtb	r2, r3
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004fcc:	4b17      	ldr	r3, [pc, #92]	@ (800502c <xPortStartScheduler+0x13c>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a16      	ldr	r2, [pc, #88]	@ (800502c <xPortStartScheduler+0x13c>)
 8004fd2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004fd6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004fd8:	4b14      	ldr	r3, [pc, #80]	@ (800502c <xPortStartScheduler+0x13c>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a13      	ldr	r2, [pc, #76]	@ (800502c <xPortStartScheduler+0x13c>)
 8004fde:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004fe2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004fe4:	f000 f8da 	bl	800519c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004fe8:	4b11      	ldr	r3, [pc, #68]	@ (8005030 <xPortStartScheduler+0x140>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004fee:	f000 f8f9 	bl	80051e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004ff2:	4b10      	ldr	r3, [pc, #64]	@ (8005034 <xPortStartScheduler+0x144>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a0f      	ldr	r2, [pc, #60]	@ (8005034 <xPortStartScheduler+0x144>)
 8004ff8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004ffc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004ffe:	f7ff ff63 	bl	8004ec8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005002:	f7ff fa5b 	bl	80044bc <vTaskSwitchContext>
	prvTaskExitError();
 8005006:	f7ff ff1d 	bl	8004e44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3718      	adds	r7, #24
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	e000ed00 	.word	0xe000ed00
 8005018:	410fc271 	.word	0x410fc271
 800501c:	410fc270 	.word	0x410fc270
 8005020:	e000e400 	.word	0xe000e400
 8005024:	20000440 	.word	0x20000440
 8005028:	20000444 	.word	0x20000444
 800502c:	e000ed20 	.word	0xe000ed20
 8005030:	2000000c 	.word	0x2000000c
 8005034:	e000ef34 	.word	0xe000ef34

08005038 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
	__asm volatile
 800503e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005042:	f383 8811 	msr	BASEPRI, r3
 8005046:	f3bf 8f6f 	isb	sy
 800504a:	f3bf 8f4f 	dsb	sy
 800504e:	607b      	str	r3, [r7, #4]
}
 8005050:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005052:	4b10      	ldr	r3, [pc, #64]	@ (8005094 <vPortEnterCritical+0x5c>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	3301      	adds	r3, #1
 8005058:	4a0e      	ldr	r2, [pc, #56]	@ (8005094 <vPortEnterCritical+0x5c>)
 800505a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800505c:	4b0d      	ldr	r3, [pc, #52]	@ (8005094 <vPortEnterCritical+0x5c>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d110      	bne.n	8005086 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005064:	4b0c      	ldr	r3, [pc, #48]	@ (8005098 <vPortEnterCritical+0x60>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00b      	beq.n	8005086 <vPortEnterCritical+0x4e>
	__asm volatile
 800506e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005072:	f383 8811 	msr	BASEPRI, r3
 8005076:	f3bf 8f6f 	isb	sy
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	603b      	str	r3, [r7, #0]
}
 8005080:	bf00      	nop
 8005082:	bf00      	nop
 8005084:	e7fd      	b.n	8005082 <vPortEnterCritical+0x4a>
	}
}
 8005086:	bf00      	nop
 8005088:	370c      	adds	r7, #12
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	2000000c 	.word	0x2000000c
 8005098:	e000ed04 	.word	0xe000ed04

0800509c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80050a2:	4b12      	ldr	r3, [pc, #72]	@ (80050ec <vPortExitCritical+0x50>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10b      	bne.n	80050c2 <vPortExitCritical+0x26>
	__asm volatile
 80050aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ae:	f383 8811 	msr	BASEPRI, r3
 80050b2:	f3bf 8f6f 	isb	sy
 80050b6:	f3bf 8f4f 	dsb	sy
 80050ba:	607b      	str	r3, [r7, #4]
}
 80050bc:	bf00      	nop
 80050be:	bf00      	nop
 80050c0:	e7fd      	b.n	80050be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80050c2:	4b0a      	ldr	r3, [pc, #40]	@ (80050ec <vPortExitCritical+0x50>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	3b01      	subs	r3, #1
 80050c8:	4a08      	ldr	r2, [pc, #32]	@ (80050ec <vPortExitCritical+0x50>)
 80050ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80050cc:	4b07      	ldr	r3, [pc, #28]	@ (80050ec <vPortExitCritical+0x50>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d105      	bne.n	80050e0 <vPortExitCritical+0x44>
 80050d4:	2300      	movs	r3, #0
 80050d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	f383 8811 	msr	BASEPRI, r3
}
 80050de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	2000000c 	.word	0x2000000c

080050f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80050f0:	f3ef 8009 	mrs	r0, PSP
 80050f4:	f3bf 8f6f 	isb	sy
 80050f8:	4b15      	ldr	r3, [pc, #84]	@ (8005150 <pxCurrentTCBConst>)
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	f01e 0f10 	tst.w	lr, #16
 8005100:	bf08      	it	eq
 8005102:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005106:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800510a:	6010      	str	r0, [r2, #0]
 800510c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005110:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005114:	f380 8811 	msr	BASEPRI, r0
 8005118:	f3bf 8f4f 	dsb	sy
 800511c:	f3bf 8f6f 	isb	sy
 8005120:	f7ff f9cc 	bl	80044bc <vTaskSwitchContext>
 8005124:	f04f 0000 	mov.w	r0, #0
 8005128:	f380 8811 	msr	BASEPRI, r0
 800512c:	bc09      	pop	{r0, r3}
 800512e:	6819      	ldr	r1, [r3, #0]
 8005130:	6808      	ldr	r0, [r1, #0]
 8005132:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005136:	f01e 0f10 	tst.w	lr, #16
 800513a:	bf08      	it	eq
 800513c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005140:	f380 8809 	msr	PSP, r0
 8005144:	f3bf 8f6f 	isb	sy
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	f3af 8000 	nop.w

08005150 <pxCurrentTCBConst>:
 8005150:	20000314 	.word	0x20000314
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005154:	bf00      	nop
 8005156:	bf00      	nop

08005158 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
	__asm volatile
 800515e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005162:	f383 8811 	msr	BASEPRI, r3
 8005166:	f3bf 8f6f 	isb	sy
 800516a:	f3bf 8f4f 	dsb	sy
 800516e:	607b      	str	r3, [r7, #4]
}
 8005170:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005172:	f7ff f8e5 	bl	8004340 <xTaskIncrementTick>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d003      	beq.n	8005184 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800517c:	4b06      	ldr	r3, [pc, #24]	@ (8005198 <SysTick_Handler+0x40>)
 800517e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005182:	601a      	str	r2, [r3, #0]
 8005184:	2300      	movs	r3, #0
 8005186:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	f383 8811 	msr	BASEPRI, r3
}
 800518e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005190:	bf00      	nop
 8005192:	3708      	adds	r7, #8
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	e000ed04 	.word	0xe000ed04

0800519c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800519c:	b480      	push	{r7}
 800519e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80051a0:	4b0b      	ldr	r3, [pc, #44]	@ (80051d0 <vPortSetupTimerInterrupt+0x34>)
 80051a2:	2200      	movs	r2, #0
 80051a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80051a6:	4b0b      	ldr	r3, [pc, #44]	@ (80051d4 <vPortSetupTimerInterrupt+0x38>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80051ac:	4b0a      	ldr	r3, [pc, #40]	@ (80051d8 <vPortSetupTimerInterrupt+0x3c>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a0a      	ldr	r2, [pc, #40]	@ (80051dc <vPortSetupTimerInterrupt+0x40>)
 80051b2:	fba2 2303 	umull	r2, r3, r2, r3
 80051b6:	099b      	lsrs	r3, r3, #6
 80051b8:	4a09      	ldr	r2, [pc, #36]	@ (80051e0 <vPortSetupTimerInterrupt+0x44>)
 80051ba:	3b01      	subs	r3, #1
 80051bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80051be:	4b04      	ldr	r3, [pc, #16]	@ (80051d0 <vPortSetupTimerInterrupt+0x34>)
 80051c0:	2207      	movs	r2, #7
 80051c2:	601a      	str	r2, [r3, #0]
}
 80051c4:	bf00      	nop
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	e000e010 	.word	0xe000e010
 80051d4:	e000e018 	.word	0xe000e018
 80051d8:	20000000 	.word	0x20000000
 80051dc:	10624dd3 	.word	0x10624dd3
 80051e0:	e000e014 	.word	0xe000e014

080051e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80051e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80051f4 <vPortEnableVFP+0x10>
 80051e8:	6801      	ldr	r1, [r0, #0]
 80051ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80051ee:	6001      	str	r1, [r0, #0]
 80051f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80051f2:	bf00      	nop
 80051f4:	e000ed88 	.word	0xe000ed88

080051f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80051fe:	f3ef 8305 	mrs	r3, IPSR
 8005202:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2b0f      	cmp	r3, #15
 8005208:	d915      	bls.n	8005236 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800520a:	4a18      	ldr	r2, [pc, #96]	@ (800526c <vPortValidateInterruptPriority+0x74>)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4413      	add	r3, r2
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005214:	4b16      	ldr	r3, [pc, #88]	@ (8005270 <vPortValidateInterruptPriority+0x78>)
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	7afa      	ldrb	r2, [r7, #11]
 800521a:	429a      	cmp	r2, r3
 800521c:	d20b      	bcs.n	8005236 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800521e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005222:	f383 8811 	msr	BASEPRI, r3
 8005226:	f3bf 8f6f 	isb	sy
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	607b      	str	r3, [r7, #4]
}
 8005230:	bf00      	nop
 8005232:	bf00      	nop
 8005234:	e7fd      	b.n	8005232 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005236:	4b0f      	ldr	r3, [pc, #60]	@ (8005274 <vPortValidateInterruptPriority+0x7c>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800523e:	4b0e      	ldr	r3, [pc, #56]	@ (8005278 <vPortValidateInterruptPriority+0x80>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	429a      	cmp	r2, r3
 8005244:	d90b      	bls.n	800525e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800524a:	f383 8811 	msr	BASEPRI, r3
 800524e:	f3bf 8f6f 	isb	sy
 8005252:	f3bf 8f4f 	dsb	sy
 8005256:	603b      	str	r3, [r7, #0]
}
 8005258:	bf00      	nop
 800525a:	bf00      	nop
 800525c:	e7fd      	b.n	800525a <vPortValidateInterruptPriority+0x62>
	}
 800525e:	bf00      	nop
 8005260:	3714      	adds	r7, #20
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	e000e3f0 	.word	0xe000e3f0
 8005270:	20000440 	.word	0x20000440
 8005274:	e000ed0c 	.word	0xe000ed0c
 8005278:	20000444 	.word	0x20000444

0800527c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b08a      	sub	sp, #40	@ 0x28
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005284:	2300      	movs	r3, #0
 8005286:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005288:	f7fe ffae 	bl	80041e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800528c:	4b5a      	ldr	r3, [pc, #360]	@ (80053f8 <pvPortMalloc+0x17c>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d101      	bne.n	8005298 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005294:	f000 f916 	bl	80054c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005298:	4b58      	ldr	r3, [pc, #352]	@ (80053fc <pvPortMalloc+0x180>)
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4013      	ands	r3, r2
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f040 8090 	bne.w	80053c6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d01e      	beq.n	80052ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80052ac:	2208      	movs	r2, #8
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4413      	add	r3, r2
 80052b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f003 0307 	and.w	r3, r3, #7
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d015      	beq.n	80052ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f023 0307 	bic.w	r3, r3, #7
 80052c4:	3308      	adds	r3, #8
 80052c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f003 0307 	and.w	r3, r3, #7
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00b      	beq.n	80052ea <pvPortMalloc+0x6e>
	__asm volatile
 80052d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052d6:	f383 8811 	msr	BASEPRI, r3
 80052da:	f3bf 8f6f 	isb	sy
 80052de:	f3bf 8f4f 	dsb	sy
 80052e2:	617b      	str	r3, [r7, #20]
}
 80052e4:	bf00      	nop
 80052e6:	bf00      	nop
 80052e8:	e7fd      	b.n	80052e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d06a      	beq.n	80053c6 <pvPortMalloc+0x14a>
 80052f0:	4b43      	ldr	r3, [pc, #268]	@ (8005400 <pvPortMalloc+0x184>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d865      	bhi.n	80053c6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80052fa:	4b42      	ldr	r3, [pc, #264]	@ (8005404 <pvPortMalloc+0x188>)
 80052fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80052fe:	4b41      	ldr	r3, [pc, #260]	@ (8005404 <pvPortMalloc+0x188>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005304:	e004      	b.n	8005310 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005308:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800530a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	429a      	cmp	r2, r3
 8005318:	d903      	bls.n	8005322 <pvPortMalloc+0xa6>
 800531a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1f1      	bne.n	8005306 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005322:	4b35      	ldr	r3, [pc, #212]	@ (80053f8 <pvPortMalloc+0x17c>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005328:	429a      	cmp	r2, r3
 800532a:	d04c      	beq.n	80053c6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800532c:	6a3b      	ldr	r3, [r7, #32]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2208      	movs	r2, #8
 8005332:	4413      	add	r3, r2
 8005334:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	6a3b      	ldr	r3, [r7, #32]
 800533c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800533e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	1ad2      	subs	r2, r2, r3
 8005346:	2308      	movs	r3, #8
 8005348:	005b      	lsls	r3, r3, #1
 800534a:	429a      	cmp	r2, r3
 800534c:	d920      	bls.n	8005390 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800534e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4413      	add	r3, r2
 8005354:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	f003 0307 	and.w	r3, r3, #7
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00b      	beq.n	8005378 <pvPortMalloc+0xfc>
	__asm volatile
 8005360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005364:	f383 8811 	msr	BASEPRI, r3
 8005368:	f3bf 8f6f 	isb	sy
 800536c:	f3bf 8f4f 	dsb	sy
 8005370:	613b      	str	r3, [r7, #16]
}
 8005372:	bf00      	nop
 8005374:	bf00      	nop
 8005376:	e7fd      	b.n	8005374 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	1ad2      	subs	r2, r2, r3
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800538a:	69b8      	ldr	r0, [r7, #24]
 800538c:	f000 f8fc 	bl	8005588 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005390:	4b1b      	ldr	r3, [pc, #108]	@ (8005400 <pvPortMalloc+0x184>)
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	4a19      	ldr	r2, [pc, #100]	@ (8005400 <pvPortMalloc+0x184>)
 800539c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800539e:	4b18      	ldr	r3, [pc, #96]	@ (8005400 <pvPortMalloc+0x184>)
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	4b19      	ldr	r3, [pc, #100]	@ (8005408 <pvPortMalloc+0x18c>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d203      	bcs.n	80053b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80053aa:	4b15      	ldr	r3, [pc, #84]	@ (8005400 <pvPortMalloc+0x184>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a16      	ldr	r2, [pc, #88]	@ (8005408 <pvPortMalloc+0x18c>)
 80053b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80053b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b4:	685a      	ldr	r2, [r3, #4]
 80053b6:	4b11      	ldr	r3, [pc, #68]	@ (80053fc <pvPortMalloc+0x180>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	431a      	orrs	r2, r3
 80053bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80053c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c2:	2200      	movs	r2, #0
 80053c4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80053c6:	f7fe ff1d 	bl	8004204 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	f003 0307 	and.w	r3, r3, #7
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00b      	beq.n	80053ec <pvPortMalloc+0x170>
	__asm volatile
 80053d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d8:	f383 8811 	msr	BASEPRI, r3
 80053dc:	f3bf 8f6f 	isb	sy
 80053e0:	f3bf 8f4f 	dsb	sy
 80053e4:	60fb      	str	r3, [r7, #12]
}
 80053e6:	bf00      	nop
 80053e8:	bf00      	nop
 80053ea:	e7fd      	b.n	80053e8 <pvPortMalloc+0x16c>
	return pvReturn;
 80053ec:	69fb      	ldr	r3, [r7, #28]
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3728      	adds	r7, #40	@ 0x28
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	20004050 	.word	0x20004050
 80053fc:	2000405c 	.word	0x2000405c
 8005400:	20004054 	.word	0x20004054
 8005404:	20004048 	.word	0x20004048
 8005408:	20004058 	.word	0x20004058

0800540c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b086      	sub	sp, #24
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d04a      	beq.n	80054b4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800541e:	2308      	movs	r3, #8
 8005420:	425b      	negs	r3, r3
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	4413      	add	r3, r2
 8005426:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	685a      	ldr	r2, [r3, #4]
 8005430:	4b22      	ldr	r3, [pc, #136]	@ (80054bc <vPortFree+0xb0>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4013      	ands	r3, r2
 8005436:	2b00      	cmp	r3, #0
 8005438:	d10b      	bne.n	8005452 <vPortFree+0x46>
	__asm volatile
 800543a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800543e:	f383 8811 	msr	BASEPRI, r3
 8005442:	f3bf 8f6f 	isb	sy
 8005446:	f3bf 8f4f 	dsb	sy
 800544a:	60fb      	str	r3, [r7, #12]
}
 800544c:	bf00      	nop
 800544e:	bf00      	nop
 8005450:	e7fd      	b.n	800544e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00b      	beq.n	8005472 <vPortFree+0x66>
	__asm volatile
 800545a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800545e:	f383 8811 	msr	BASEPRI, r3
 8005462:	f3bf 8f6f 	isb	sy
 8005466:	f3bf 8f4f 	dsb	sy
 800546a:	60bb      	str	r3, [r7, #8]
}
 800546c:	bf00      	nop
 800546e:	bf00      	nop
 8005470:	e7fd      	b.n	800546e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	685a      	ldr	r2, [r3, #4]
 8005476:	4b11      	ldr	r3, [pc, #68]	@ (80054bc <vPortFree+0xb0>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4013      	ands	r3, r2
 800547c:	2b00      	cmp	r3, #0
 800547e:	d019      	beq.n	80054b4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d115      	bne.n	80054b4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	685a      	ldr	r2, [r3, #4]
 800548c:	4b0b      	ldr	r3, [pc, #44]	@ (80054bc <vPortFree+0xb0>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	43db      	mvns	r3, r3
 8005492:	401a      	ands	r2, r3
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005498:	f7fe fea6 	bl	80041e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	685a      	ldr	r2, [r3, #4]
 80054a0:	4b07      	ldr	r3, [pc, #28]	@ (80054c0 <vPortFree+0xb4>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4413      	add	r3, r2
 80054a6:	4a06      	ldr	r2, [pc, #24]	@ (80054c0 <vPortFree+0xb4>)
 80054a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80054aa:	6938      	ldr	r0, [r7, #16]
 80054ac:	f000 f86c 	bl	8005588 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80054b0:	f7fe fea8 	bl	8004204 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80054b4:	bf00      	nop
 80054b6:	3718      	adds	r7, #24
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	2000405c 	.word	0x2000405c
 80054c0:	20004054 	.word	0x20004054

080054c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80054c4:	b480      	push	{r7}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80054ca:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80054ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80054d0:	4b27      	ldr	r3, [pc, #156]	@ (8005570 <prvHeapInit+0xac>)
 80054d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f003 0307 	and.w	r3, r3, #7
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00c      	beq.n	80054f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	3307      	adds	r3, #7
 80054e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f023 0307 	bic.w	r3, r3, #7
 80054ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80054ec:	68ba      	ldr	r2, [r7, #8]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	4a1f      	ldr	r2, [pc, #124]	@ (8005570 <prvHeapInit+0xac>)
 80054f4:	4413      	add	r3, r2
 80054f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80054fc:	4a1d      	ldr	r2, [pc, #116]	@ (8005574 <prvHeapInit+0xb0>)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005502:	4b1c      	ldr	r3, [pc, #112]	@ (8005574 <prvHeapInit+0xb0>)
 8005504:	2200      	movs	r2, #0
 8005506:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	4413      	add	r3, r2
 800550e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005510:	2208      	movs	r2, #8
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	1a9b      	subs	r3, r3, r2
 8005516:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f023 0307 	bic.w	r3, r3, #7
 800551e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	4a15      	ldr	r2, [pc, #84]	@ (8005578 <prvHeapInit+0xb4>)
 8005524:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005526:	4b14      	ldr	r3, [pc, #80]	@ (8005578 <prvHeapInit+0xb4>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2200      	movs	r2, #0
 800552c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800552e:	4b12      	ldr	r3, [pc, #72]	@ (8005578 <prvHeapInit+0xb4>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2200      	movs	r2, #0
 8005534:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	1ad2      	subs	r2, r2, r3
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005544:	4b0c      	ldr	r3, [pc, #48]	@ (8005578 <prvHeapInit+0xb4>)
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	4a0a      	ldr	r2, [pc, #40]	@ (800557c <prvHeapInit+0xb8>)
 8005552:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	4a09      	ldr	r2, [pc, #36]	@ (8005580 <prvHeapInit+0xbc>)
 800555a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800555c:	4b09      	ldr	r3, [pc, #36]	@ (8005584 <prvHeapInit+0xc0>)
 800555e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005562:	601a      	str	r2, [r3, #0]
}
 8005564:	bf00      	nop
 8005566:	3714      	adds	r7, #20
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr
 8005570:	20000448 	.word	0x20000448
 8005574:	20004048 	.word	0x20004048
 8005578:	20004050 	.word	0x20004050
 800557c:	20004058 	.word	0x20004058
 8005580:	20004054 	.word	0x20004054
 8005584:	2000405c 	.word	0x2000405c

08005588 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005590:	4b28      	ldr	r3, [pc, #160]	@ (8005634 <prvInsertBlockIntoFreeList+0xac>)
 8005592:	60fb      	str	r3, [r7, #12]
 8005594:	e002      	b.n	800559c <prvInsertBlockIntoFreeList+0x14>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	60fb      	str	r3, [r7, #12]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d8f7      	bhi.n	8005596 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	68ba      	ldr	r2, [r7, #8]
 80055b0:	4413      	add	r3, r2
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d108      	bne.n	80055ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	685a      	ldr	r2, [r3, #4]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	441a      	add	r2, r3
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	441a      	add	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d118      	bne.n	8005610 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	4b15      	ldr	r3, [pc, #84]	@ (8005638 <prvInsertBlockIntoFreeList+0xb0>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d00d      	beq.n	8005606 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685a      	ldr	r2, [r3, #4]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	441a      	add	r2, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	601a      	str	r2, [r3, #0]
 8005604:	e008      	b.n	8005618 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005606:	4b0c      	ldr	r3, [pc, #48]	@ (8005638 <prvInsertBlockIntoFreeList+0xb0>)
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	601a      	str	r2, [r3, #0]
 800560e:	e003      	b.n	8005618 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	429a      	cmp	r2, r3
 800561e:	d002      	beq.n	8005626 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005626:	bf00      	nop
 8005628:	3714      	adds	r7, #20
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	20004048 	.word	0x20004048
 8005638:	20004050 	.word	0x20004050

0800563c <memset>:
 800563c:	4402      	add	r2, r0
 800563e:	4603      	mov	r3, r0
 8005640:	4293      	cmp	r3, r2
 8005642:	d100      	bne.n	8005646 <memset+0xa>
 8005644:	4770      	bx	lr
 8005646:	f803 1b01 	strb.w	r1, [r3], #1
 800564a:	e7f9      	b.n	8005640 <memset+0x4>

0800564c <__libc_init_array>:
 800564c:	b570      	push	{r4, r5, r6, lr}
 800564e:	4d0d      	ldr	r5, [pc, #52]	@ (8005684 <__libc_init_array+0x38>)
 8005650:	4c0d      	ldr	r4, [pc, #52]	@ (8005688 <__libc_init_array+0x3c>)
 8005652:	1b64      	subs	r4, r4, r5
 8005654:	10a4      	asrs	r4, r4, #2
 8005656:	2600      	movs	r6, #0
 8005658:	42a6      	cmp	r6, r4
 800565a:	d109      	bne.n	8005670 <__libc_init_array+0x24>
 800565c:	4d0b      	ldr	r5, [pc, #44]	@ (800568c <__libc_init_array+0x40>)
 800565e:	4c0c      	ldr	r4, [pc, #48]	@ (8005690 <__libc_init_array+0x44>)
 8005660:	f000 f826 	bl	80056b0 <_init>
 8005664:	1b64      	subs	r4, r4, r5
 8005666:	10a4      	asrs	r4, r4, #2
 8005668:	2600      	movs	r6, #0
 800566a:	42a6      	cmp	r6, r4
 800566c:	d105      	bne.n	800567a <__libc_init_array+0x2e>
 800566e:	bd70      	pop	{r4, r5, r6, pc}
 8005670:	f855 3b04 	ldr.w	r3, [r5], #4
 8005674:	4798      	blx	r3
 8005676:	3601      	adds	r6, #1
 8005678:	e7ee      	b.n	8005658 <__libc_init_array+0xc>
 800567a:	f855 3b04 	ldr.w	r3, [r5], #4
 800567e:	4798      	blx	r3
 8005680:	3601      	adds	r6, #1
 8005682:	e7f2      	b.n	800566a <__libc_init_array+0x1e>
 8005684:	08005884 	.word	0x08005884
 8005688:	08005884 	.word	0x08005884
 800568c:	08005884 	.word	0x08005884
 8005690:	08005888 	.word	0x08005888

08005694 <memcpy>:
 8005694:	440a      	add	r2, r1
 8005696:	4291      	cmp	r1, r2
 8005698:	f100 33ff 	add.w	r3, r0, #4294967295
 800569c:	d100      	bne.n	80056a0 <memcpy+0xc>
 800569e:	4770      	bx	lr
 80056a0:	b510      	push	{r4, lr}
 80056a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056aa:	4291      	cmp	r1, r2
 80056ac:	d1f9      	bne.n	80056a2 <memcpy+0xe>
 80056ae:	bd10      	pop	{r4, pc}

080056b0 <_init>:
 80056b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056b2:	bf00      	nop
 80056b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056b6:	bc08      	pop	{r3}
 80056b8:	469e      	mov	lr, r3
 80056ba:	4770      	bx	lr

080056bc <_fini>:
 80056bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056be:	bf00      	nop
 80056c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056c2:	bc08      	pop	{r3}
 80056c4:	469e      	mov	lr, r3
 80056c6:	4770      	bx	lr
