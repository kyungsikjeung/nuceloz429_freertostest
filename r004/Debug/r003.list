
r003.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005064  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08005214  08005214  00006214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053c4  080053c4  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080053c4  080053c4  000063c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053cc  080053cc  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053cc  080053cc  000063cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080053d0  080053d0  000063d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080053d4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007010  2**0
                  CONTENTS
 10 .bss          00004068  20000010  20000010  00007010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004078  20004078  00007010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013e90  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d37  00000000  00000000  0001aed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011b8  00000000  00000000  0001dc08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dcd  00000000  00000000  0001edc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026421  00000000  00000000  0001fb8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013ca0  00000000  00000000  00045fae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e941b  00000000  00000000  00059c4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00143069  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a28  00000000  00000000  001430ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000055  00000000  00000000  00147ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080051fc 	.word	0x080051fc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	080051fc 	.word	0x080051fc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b988 	b.w	8000528 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	468e      	mov	lr, r1
 8000238:	4604      	mov	r4, r0
 800023a:	4688      	mov	r8, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14a      	bne.n	80002d6 <__udivmoddi4+0xa6>
 8000240:	428a      	cmp	r2, r1
 8000242:	4617      	mov	r7, r2
 8000244:	d962      	bls.n	800030c <__udivmoddi4+0xdc>
 8000246:	fab2 f682 	clz	r6, r2
 800024a:	b14e      	cbz	r6, 8000260 <__udivmoddi4+0x30>
 800024c:	f1c6 0320 	rsb	r3, r6, #32
 8000250:	fa01 f806 	lsl.w	r8, r1, r6
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	40b7      	lsls	r7, r6
 800025a:	ea43 0808 	orr.w	r8, r3, r8
 800025e:	40b4      	lsls	r4, r6
 8000260:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000264:	fa1f fc87 	uxth.w	ip, r7
 8000268:	fbb8 f1fe 	udiv	r1, r8, lr
 800026c:	0c23      	lsrs	r3, r4, #16
 800026e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000272:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000276:	fb01 f20c 	mul.w	r2, r1, ip
 800027a:	429a      	cmp	r2, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x62>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f101 30ff 	add.w	r0, r1, #4294967295
 8000284:	f080 80ea 	bcs.w	800045c <__udivmoddi4+0x22c>
 8000288:	429a      	cmp	r2, r3
 800028a:	f240 80e7 	bls.w	800045c <__udivmoddi4+0x22c>
 800028e:	3902      	subs	r1, #2
 8000290:	443b      	add	r3, r7
 8000292:	1a9a      	subs	r2, r3, r2
 8000294:	b2a3      	uxth	r3, r4
 8000296:	fbb2 f0fe 	udiv	r0, r2, lr
 800029a:	fb0e 2210 	mls	r2, lr, r0, r2
 800029e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a6:	459c      	cmp	ip, r3
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0x8e>
 80002aa:	18fb      	adds	r3, r7, r3
 80002ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b0:	f080 80d6 	bcs.w	8000460 <__udivmoddi4+0x230>
 80002b4:	459c      	cmp	ip, r3
 80002b6:	f240 80d3 	bls.w	8000460 <__udivmoddi4+0x230>
 80002ba:	443b      	add	r3, r7
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c2:	eba3 030c 	sub.w	r3, r3, ip
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa2>
 80002ca:	40f3      	lsrs	r3, r6
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xb6>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb0>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa2>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x14c>
 80002ee:	4573      	cmp	r3, lr
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xc8>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 8105 	bhi.w	8000502 <__udivmoddi4+0x2d2>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb6e 0203 	sbc.w	r2, lr, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	4690      	mov	r8, r2
 8000302:	2d00      	cmp	r5, #0
 8000304:	d0e5      	beq.n	80002d2 <__udivmoddi4+0xa2>
 8000306:	e9c5 4800 	strd	r4, r8, [r5]
 800030a:	e7e2      	b.n	80002d2 <__udivmoddi4+0xa2>
 800030c:	2a00      	cmp	r2, #0
 800030e:	f000 8090 	beq.w	8000432 <__udivmoddi4+0x202>
 8000312:	fab2 f682 	clz	r6, r2
 8000316:	2e00      	cmp	r6, #0
 8000318:	f040 80a4 	bne.w	8000464 <__udivmoddi4+0x234>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	0c03      	lsrs	r3, r0, #16
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	b280      	uxth	r0, r0
 8000326:	b2bc      	uxth	r4, r7
 8000328:	2101      	movs	r1, #1
 800032a:	fbb2 fcfe 	udiv	ip, r2, lr
 800032e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000332:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000336:	fb04 f20c 	mul.w	r2, r4, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d907      	bls.n	800034e <__udivmoddi4+0x11e>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x11c>
 8000346:	429a      	cmp	r2, r3
 8000348:	f200 80e0 	bhi.w	800050c <__udivmoddi4+0x2dc>
 800034c:	46c4      	mov	ip, r8
 800034e:	1a9b      	subs	r3, r3, r2
 8000350:	fbb3 f2fe 	udiv	r2, r3, lr
 8000354:	fb0e 3312 	mls	r3, lr, r2, r3
 8000358:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800035c:	fb02 f404 	mul.w	r4, r2, r4
 8000360:	429c      	cmp	r4, r3
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x144>
 8000364:	18fb      	adds	r3, r7, r3
 8000366:	f102 30ff 	add.w	r0, r2, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x142>
 800036c:	429c      	cmp	r4, r3
 800036e:	f200 80ca 	bhi.w	8000506 <__udivmoddi4+0x2d6>
 8000372:	4602      	mov	r2, r0
 8000374:	1b1b      	subs	r3, r3, r4
 8000376:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x98>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa0e f401 	lsl.w	r4, lr, r1
 800038c:	fa20 f306 	lsr.w	r3, r0, r6
 8000390:	fa2e fe06 	lsr.w	lr, lr, r6
 8000394:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000398:	4323      	orrs	r3, r4
 800039a:	fa00 f801 	lsl.w	r8, r0, r1
 800039e:	fa1f fc87 	uxth.w	ip, r7
 80003a2:	fbbe f0f9 	udiv	r0, lr, r9
 80003a6:	0c1c      	lsrs	r4, r3, #16
 80003a8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003ac:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x1a0>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c2:	f080 809c 	bcs.w	80004fe <__udivmoddi4+0x2ce>
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	f240 8099 	bls.w	80004fe <__udivmoddi4+0x2ce>
 80003cc:	3802      	subs	r0, #2
 80003ce:	443c      	add	r4, r7
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	fa1f fe83 	uxth.w	lr, r3
 80003d8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003dc:	fb09 4413 	mls	r4, r9, r3, r4
 80003e0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1ce>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f2:	f080 8082 	bcs.w	80004fa <__udivmoddi4+0x2ca>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d97f      	bls.n	80004fa <__udivmoddi4+0x2ca>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000402:	eba4 040c 	sub.w	r4, r4, ip
 8000406:	fba0 ec02 	umull	lr, ip, r0, r2
 800040a:	4564      	cmp	r4, ip
 800040c:	4673      	mov	r3, lr
 800040e:	46e1      	mov	r9, ip
 8000410:	d362      	bcc.n	80004d8 <__udivmoddi4+0x2a8>
 8000412:	d05f      	beq.n	80004d4 <__udivmoddi4+0x2a4>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x1fe>
 8000416:	ebb8 0203 	subs.w	r2, r8, r3
 800041a:	eb64 0409 	sbc.w	r4, r4, r9
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	fa22 f301 	lsr.w	r3, r2, r1
 8000426:	431e      	orrs	r6, r3
 8000428:	40cc      	lsrs	r4, r1
 800042a:	e9c5 6400 	strd	r6, r4, [r5]
 800042e:	2100      	movs	r1, #0
 8000430:	e74f      	b.n	80002d2 <__udivmoddi4+0xa2>
 8000432:	fbb1 fcf2 	udiv	ip, r1, r2
 8000436:	0c01      	lsrs	r1, r0, #16
 8000438:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800043c:	b280      	uxth	r0, r0
 800043e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000442:	463b      	mov	r3, r7
 8000444:	4638      	mov	r0, r7
 8000446:	463c      	mov	r4, r7
 8000448:	46b8      	mov	r8, r7
 800044a:	46be      	mov	lr, r7
 800044c:	2620      	movs	r6, #32
 800044e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000452:	eba2 0208 	sub.w	r2, r2, r8
 8000456:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045a:	e766      	b.n	800032a <__udivmoddi4+0xfa>
 800045c:	4601      	mov	r1, r0
 800045e:	e718      	b.n	8000292 <__udivmoddi4+0x62>
 8000460:	4610      	mov	r0, r2
 8000462:	e72c      	b.n	80002be <__udivmoddi4+0x8e>
 8000464:	f1c6 0220 	rsb	r2, r6, #32
 8000468:	fa2e f302 	lsr.w	r3, lr, r2
 800046c:	40b7      	lsls	r7, r6
 800046e:	40b1      	lsls	r1, r6
 8000470:	fa20 f202 	lsr.w	r2, r0, r2
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	430a      	orrs	r2, r1
 800047a:	fbb3 f8fe 	udiv	r8, r3, lr
 800047e:	b2bc      	uxth	r4, r7
 8000480:	fb0e 3318 	mls	r3, lr, r8, r3
 8000484:	0c11      	lsrs	r1, r2, #16
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb08 f904 	mul.w	r9, r8, r4
 800048e:	40b0      	lsls	r0, r6
 8000490:	4589      	cmp	r9, r1
 8000492:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000496:	b280      	uxth	r0, r0
 8000498:	d93e      	bls.n	8000518 <__udivmoddi4+0x2e8>
 800049a:	1879      	adds	r1, r7, r1
 800049c:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a0:	d201      	bcs.n	80004a6 <__udivmoddi4+0x276>
 80004a2:	4589      	cmp	r9, r1
 80004a4:	d81f      	bhi.n	80004e6 <__udivmoddi4+0x2b6>
 80004a6:	eba1 0109 	sub.w	r1, r1, r9
 80004aa:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ae:	fb09 f804 	mul.w	r8, r9, r4
 80004b2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004b6:	b292      	uxth	r2, r2
 80004b8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004bc:	4542      	cmp	r2, r8
 80004be:	d229      	bcs.n	8000514 <__udivmoddi4+0x2e4>
 80004c0:	18ba      	adds	r2, r7, r2
 80004c2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004c6:	d2c4      	bcs.n	8000452 <__udivmoddi4+0x222>
 80004c8:	4542      	cmp	r2, r8
 80004ca:	d2c2      	bcs.n	8000452 <__udivmoddi4+0x222>
 80004cc:	f1a9 0102 	sub.w	r1, r9, #2
 80004d0:	443a      	add	r2, r7
 80004d2:	e7be      	b.n	8000452 <__udivmoddi4+0x222>
 80004d4:	45f0      	cmp	r8, lr
 80004d6:	d29d      	bcs.n	8000414 <__udivmoddi4+0x1e4>
 80004d8:	ebbe 0302 	subs.w	r3, lr, r2
 80004dc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e0:	3801      	subs	r0, #1
 80004e2:	46e1      	mov	r9, ip
 80004e4:	e796      	b.n	8000414 <__udivmoddi4+0x1e4>
 80004e6:	eba7 0909 	sub.w	r9, r7, r9
 80004ea:	4449      	add	r1, r9
 80004ec:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f4:	fb09 f804 	mul.w	r8, r9, r4
 80004f8:	e7db      	b.n	80004b2 <__udivmoddi4+0x282>
 80004fa:	4673      	mov	r3, lr
 80004fc:	e77f      	b.n	80003fe <__udivmoddi4+0x1ce>
 80004fe:	4650      	mov	r0, sl
 8000500:	e766      	b.n	80003d0 <__udivmoddi4+0x1a0>
 8000502:	4608      	mov	r0, r1
 8000504:	e6fd      	b.n	8000302 <__udivmoddi4+0xd2>
 8000506:	443b      	add	r3, r7
 8000508:	3a02      	subs	r2, #2
 800050a:	e733      	b.n	8000374 <__udivmoddi4+0x144>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	443b      	add	r3, r7
 8000512:	e71c      	b.n	800034e <__udivmoddi4+0x11e>
 8000514:	4649      	mov	r1, r9
 8000516:	e79c      	b.n	8000452 <__udivmoddi4+0x222>
 8000518:	eba1 0109 	sub.w	r1, r1, r9
 800051c:	46c4      	mov	ip, r8
 800051e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000522:	fb09 f804 	mul.w	r8, r9, r4
 8000526:	e7c4      	b.n	80004b2 <__udivmoddi4+0x282>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800052c:	b480      	push	{r7}
 800052e:	b085      	sub	sp, #20
 8000530:	af00      	add	r7, sp, #0
 8000532:	60f8      	str	r0, [r7, #12]
 8000534:	60b9      	str	r1, [r7, #8]
 8000536:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	4a07      	ldr	r2, [pc, #28]	@ (8000558 <vApplicationGetIdleTaskMemory+0x2c>)
 800053c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800053e:	68bb      	ldr	r3, [r7, #8]
 8000540:	4a06      	ldr	r2, [pc, #24]	@ (800055c <vApplicationGetIdleTaskMemory+0x30>)
 8000542:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2280      	movs	r2, #128	@ 0x80
 8000548:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800054a:	bf00      	nop
 800054c:	3714      	adds	r7, #20
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	2000002c 	.word	0x2000002c
 800055c:	20000080 	.word	0x20000080

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b5b0      	push	{r4, r5, r7, lr}
 8000562:	b098      	sub	sp, #96	@ 0x60
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000566:	f000 fbd5 	bl	8000d14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056a:	f000 f85b 	bl	8000624 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056e:	f000 f8ed 	bl	800074c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000572:	f000 f8c1 	bl	80006f8 <MX_USART3_UART_Init>
osSemaphoreWait(semephoreHandle, osWaitForever);
osSemaphoreRelease(semephoreHandle);

*/

  osSemaphoreDef(TestBinary);
 8000576:	2300      	movs	r3, #0
 8000578:	65bb      	str	r3, [r7, #88]	@ 0x58
 800057a:	2300      	movs	r3, #0
 800057c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  semephoreHandle = osSemaphoreCreate(osSemaphore(TestBinary), 1);
 800057e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000582:	2101      	movs	r1, #1
 8000584:	4618      	mov	r0, r3
 8000586:	f002 faca 	bl	8002b1e <osSemaphoreCreate>
 800058a:	4603      	mov	r3, r0
 800058c:	4a1e      	ldr	r2, [pc, #120]	@ (8000608 <main+0xa8>)
 800058e:	6013      	str	r3, [r2, #0]
  osThreadDef(task1, oneTask, osPriorityBelowNormal, 0, 128);
 8000590:	4b1e      	ldr	r3, [pc, #120]	@ (800060c <main+0xac>)
 8000592:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000596:	461d      	mov	r5, r3
 8000598:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800059a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800059c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadDef(task2, twoTask, osPriorityNormal, 0, 128);
 80005a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000610 <main+0xb0>)
 80005a6:	f107 0420 	add.w	r4, r7, #32
 80005aa:	461d      	mov	r5, r3
 80005ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadDef(task3, threeTask, osPriorityHigh, 0, 128);
 80005b8:	4b16      	ldr	r3, [pc, #88]	@ (8000614 <main+0xb4>)
 80005ba:	1d3c      	adds	r4, r7, #4
 80005bc:	461d      	mov	r5, r3
 80005be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskHandle1 = osThreadCreate(osThread(task1), NULL);
 80005ca:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80005ce:	2100      	movs	r1, #0
 80005d0:	4618      	mov	r0, r3
 80005d2:	f002 fa44 	bl	8002a5e <osThreadCreate>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a0f      	ldr	r2, [pc, #60]	@ (8000618 <main+0xb8>)
 80005da:	6013      	str	r3, [r2, #0]
  taskHandle2 = osThreadCreate(osThread(task2), NULL);
 80005dc:	f107 0320 	add.w	r3, r7, #32
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f002 fa3b 	bl	8002a5e <osThreadCreate>
 80005e8:	4603      	mov	r3, r0
 80005ea:	4a0c      	ldr	r2, [pc, #48]	@ (800061c <main+0xbc>)
 80005ec:	6013      	str	r3, [r2, #0]
  taskHandle3 = osThreadCreate(osThread(task3), NULL);
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f002 fa33 	bl	8002a5e <osThreadCreate>
 80005f8:	4603      	mov	r3, r0
 80005fa:	4a09      	ldr	r2, [pc, #36]	@ (8000620 <main+0xc0>)
 80005fc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005fe:	f002 fa27 	bl	8002a50 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000602:	bf00      	nop
 8000604:	e7fd      	b.n	8000602 <main+0xa2>
 8000606:	bf00      	nop
 8000608:	200002d4 	.word	0x200002d4
 800060c:	0800521c 	.word	0x0800521c
 8000610:	08005240 	.word	0x08005240
 8000614:	08005264 	.word	0x08005264
 8000618:	200002c8 	.word	0x200002c8
 800061c:	200002cc 	.word	0x200002cc
 8000620:	200002d0 	.word	0x200002d0

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b094      	sub	sp, #80	@ 0x50
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 0320 	add.w	r3, r7, #32
 800062e:	2230      	movs	r2, #48	@ 0x30
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f004 fda8 	bl	8005188 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000648:	2300      	movs	r3, #0
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	4b28      	ldr	r3, [pc, #160]	@ (80006f0 <SystemClock_Config+0xcc>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000650:	4a27      	ldr	r2, [pc, #156]	@ (80006f0 <SystemClock_Config+0xcc>)
 8000652:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000656:	6413      	str	r3, [r2, #64]	@ 0x40
 8000658:	4b25      	ldr	r3, [pc, #148]	@ (80006f0 <SystemClock_Config+0xcc>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800065c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000664:	2300      	movs	r3, #0
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	4b22      	ldr	r3, [pc, #136]	@ (80006f4 <SystemClock_Config+0xd0>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a21      	ldr	r2, [pc, #132]	@ (80006f4 <SystemClock_Config+0xd0>)
 800066e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000672:	6013      	str	r3, [r2, #0]
 8000674:	4b1f      	ldr	r3, [pc, #124]	@ (80006f4 <SystemClock_Config+0xd0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000680:	2301      	movs	r3, #1
 8000682:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000684:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000688:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068a:	2302      	movs	r3, #2
 800068c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000692:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000694:	2304      	movs	r3, #4
 8000696:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000698:	23a8      	movs	r3, #168	@ 0xa8
 800069a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800069c:	2302      	movs	r3, #2
 800069e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006a0:	2307      	movs	r3, #7
 80006a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a4:	f107 0320 	add.w	r3, r7, #32
 80006a8:	4618      	mov	r0, r3
 80006aa:	f000 fe35 	bl	8001318 <HAL_RCC_OscConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006b4:	f000 f9de 	bl	8000a74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b8:	230f      	movs	r3, #15
 80006ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006bc:	2302      	movs	r3, #2
 80006be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	2105      	movs	r1, #5
 80006d6:	4618      	mov	r0, r3
 80006d8:	f001 f896 	bl	8001808 <HAL_RCC_ClockConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006e2:	f000 f9c7 	bl	8000a74 <Error_Handler>
  }
}
 80006e6:	bf00      	nop
 80006e8:	3750      	adds	r7, #80	@ 0x50
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40007000 	.word	0x40007000

080006f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006fc:	4b11      	ldr	r3, [pc, #68]	@ (8000744 <MX_USART3_UART_Init+0x4c>)
 80006fe:	4a12      	ldr	r2, [pc, #72]	@ (8000748 <MX_USART3_UART_Init+0x50>)
 8000700:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000702:	4b10      	ldr	r3, [pc, #64]	@ (8000744 <MX_USART3_UART_Init+0x4c>)
 8000704:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000708:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800070a:	4b0e      	ldr	r3, [pc, #56]	@ (8000744 <MX_USART3_UART_Init+0x4c>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000710:	4b0c      	ldr	r3, [pc, #48]	@ (8000744 <MX_USART3_UART_Init+0x4c>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000716:	4b0b      	ldr	r3, [pc, #44]	@ (8000744 <MX_USART3_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800071c:	4b09      	ldr	r3, [pc, #36]	@ (8000744 <MX_USART3_UART_Init+0x4c>)
 800071e:	220c      	movs	r2, #12
 8000720:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000722:	4b08      	ldr	r3, [pc, #32]	@ (8000744 <MX_USART3_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000728:	4b06      	ldr	r3, [pc, #24]	@ (8000744 <MX_USART3_UART_Init+0x4c>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800072e:	4805      	ldr	r0, [pc, #20]	@ (8000744 <MX_USART3_UART_Init+0x4c>)
 8000730:	f001 fd58 	bl	80021e4 <HAL_UART_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800073a:	f000 f99b 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000280 	.word	0x20000280
 8000748:	40004800 	.word	0x40004800

0800074c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08c      	sub	sp, #48	@ 0x30
 8000750:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	f107 031c 	add.w	r3, r7, #28
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	61bb      	str	r3, [r7, #24]
 8000766:	4b58      	ldr	r3, [pc, #352]	@ (80008c8 <MX_GPIO_Init+0x17c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a57      	ldr	r2, [pc, #348]	@ (80008c8 <MX_GPIO_Init+0x17c>)
 800076c:	f043 0304 	orr.w	r3, r3, #4
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
 8000772:	4b55      	ldr	r3, [pc, #340]	@ (80008c8 <MX_GPIO_Init+0x17c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f003 0304 	and.w	r3, r3, #4
 800077a:	61bb      	str	r3, [r7, #24]
 800077c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]
 8000782:	4b51      	ldr	r3, [pc, #324]	@ (80008c8 <MX_GPIO_Init+0x17c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	4a50      	ldr	r2, [pc, #320]	@ (80008c8 <MX_GPIO_Init+0x17c>)
 8000788:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800078c:	6313      	str	r3, [r2, #48]	@ 0x30
 800078e:	4b4e      	ldr	r3, [pc, #312]	@ (80008c8 <MX_GPIO_Init+0x17c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000796:	617b      	str	r3, [r7, #20]
 8000798:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	613b      	str	r3, [r7, #16]
 800079e:	4b4a      	ldr	r3, [pc, #296]	@ (80008c8 <MX_GPIO_Init+0x17c>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	4a49      	ldr	r2, [pc, #292]	@ (80008c8 <MX_GPIO_Init+0x17c>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007aa:	4b47      	ldr	r3, [pc, #284]	@ (80008c8 <MX_GPIO_Init+0x17c>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	613b      	str	r3, [r7, #16]
 80007b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	4b43      	ldr	r3, [pc, #268]	@ (80008c8 <MX_GPIO_Init+0x17c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	4a42      	ldr	r2, [pc, #264]	@ (80008c8 <MX_GPIO_Init+0x17c>)
 80007c0:	f043 0302 	orr.w	r3, r3, #2
 80007c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c6:	4b40      	ldr	r3, [pc, #256]	@ (80008c8 <MX_GPIO_Init+0x17c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	f003 0302 	and.w	r3, r3, #2
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	4b3c      	ldr	r3, [pc, #240]	@ (80008c8 <MX_GPIO_Init+0x17c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	4a3b      	ldr	r2, [pc, #236]	@ (80008c8 <MX_GPIO_Init+0x17c>)
 80007dc:	f043 0308 	orr.w	r3, r3, #8
 80007e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e2:	4b39      	ldr	r3, [pc, #228]	@ (80008c8 <MX_GPIO_Init+0x17c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	f003 0308 	and.w	r3, r3, #8
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	4b35      	ldr	r3, [pc, #212]	@ (80008c8 <MX_GPIO_Init+0x17c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	4a34      	ldr	r2, [pc, #208]	@ (80008c8 <MX_GPIO_Init+0x17c>)
 80007f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fe:	4b32      	ldr	r3, [pc, #200]	@ (80008c8 <MX_GPIO_Init+0x17c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000810:	482e      	ldr	r0, [pc, #184]	@ (80008cc <MX_GPIO_Init+0x180>)
 8000812:	f000 fd67 	bl	80012e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	2140      	movs	r1, #64	@ 0x40
 800081a:	482d      	ldr	r0, [pc, #180]	@ (80008d0 <MX_GPIO_Init+0x184>)
 800081c:	f000 fd62 	bl	80012e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000820:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000826:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800082a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000830:	f107 031c 	add.w	r3, r7, #28
 8000834:	4619      	mov	r1, r3
 8000836:	4827      	ldr	r0, [pc, #156]	@ (80008d4 <MX_GPIO_Init+0x188>)
 8000838:	f000 fb90 	bl	8000f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800083c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	2301      	movs	r3, #1
 8000844:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	4619      	mov	r1, r3
 8000854:	481d      	ldr	r0, [pc, #116]	@ (80008cc <MX_GPIO_Init+0x180>)
 8000856:	f000 fb81 	bl	8000f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800085a:	2340      	movs	r3, #64	@ 0x40
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085e:	2301      	movs	r3, #1
 8000860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2300      	movs	r3, #0
 8000868:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	4619      	mov	r1, r3
 8000870:	4817      	ldr	r0, [pc, #92]	@ (80008d0 <MX_GPIO_Init+0x184>)
 8000872:	f000 fb73 	bl	8000f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000876:	2380      	movs	r3, #128	@ 0x80
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087a:	2300      	movs	r3, #0
 800087c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4619      	mov	r1, r3
 8000888:	4811      	ldr	r0, [pc, #68]	@ (80008d0 <MX_GPIO_Init+0x184>)
 800088a:	f000 fb67 	bl	8000f5c <HAL_GPIO_Init>



  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800088e:	2301      	movs	r3, #1
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000892:	2300      	movs	r3, #0
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	480d      	ldr	r0, [pc, #52]	@ (80008d8 <MX_GPIO_Init+0x18c>)
 80008a2:	f000 fb5b 	bl	8000f5c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ac:	2300      	movs	r3, #0
 80008ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	4806      	ldr	r0, [pc, #24]	@ (80008d4 <MX_GPIO_Init+0x188>)
 80008bc:	f000 fb4e 	bl	8000f5c <HAL_GPIO_Init>


/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008c0:	bf00      	nop
 80008c2:	3730      	adds	r7, #48	@ 0x30
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40020400 	.word	0x40020400
 80008d0:	40021800 	.word	0x40021800
 80008d4:	40020800 	.word	0x40020800
 80008d8:	40020000 	.word	0x40020000

080008dc <oneTask>:

/* USER CODE BEGIN 4 */
void oneTask(void const * argument){
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
		char *str1 = "Entered LOWTask and waiting for semaphore\r\n";
 80008e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000960 <oneTask+0x84>)
 80008e6:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(&huart3, (uint8_t *) str1, strlen (str1), 100);
 80008e8:	6978      	ldr	r0, [r7, #20]
 80008ea:	f7ff fc81 	bl	80001f0 <strlen>
 80008ee:	4603      	mov	r3, r0
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	2364      	movs	r3, #100	@ 0x64
 80008f4:	6979      	ldr	r1, [r7, #20]
 80008f6:	481b      	ldr	r0, [pc, #108]	@ (8000964 <oneTask+0x88>)
 80008f8:	f001 fcc4 	bl	8002284 <HAL_UART_Transmit>

		osSemaphoreWait(semephoreHandle, osWaitForever);
 80008fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000968 <oneTask+0x8c>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f04f 31ff 	mov.w	r1, #4294967295
 8000904:	4618      	mov	r0, r3
 8000906:	f002 f93d 	bl	8002b84 <osSemaphoreWait>

		char *str3 = "Semaphore acquired by LOW Task\n";
 800090a:	4b18      	ldr	r3, [pc, #96]	@ (800096c <oneTask+0x90>)
 800090c:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart3, (uint8_t *) str3, strlen (str3), 100);
 800090e:	6938      	ldr	r0, [r7, #16]
 8000910:	f7ff fc6e 	bl	80001f0 <strlen>
 8000914:	4603      	mov	r3, r0
 8000916:	b29a      	uxth	r2, r3
 8000918:	2364      	movs	r3, #100	@ 0x64
 800091a:	6939      	ldr	r1, [r7, #16]
 800091c:	4811      	ldr	r0, [pc, #68]	@ (8000964 <oneTask+0x88>)
 800091e:	f001 fcb1 	bl	8002284 <HAL_UART_Transmit>

		while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13));  // wait till the pin go low
 8000922:	bf00      	nop
 8000924:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000928:	4811      	ldr	r0, [pc, #68]	@ (8000970 <oneTask+0x94>)
 800092a:	f000 fcc3 	bl	80012b4 <HAL_GPIO_ReadPin>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d1f7      	bne.n	8000924 <oneTask+0x48>

		char *str2 = "Leaving LOWTask and releasing Semaphore\r\n\n";
 8000934:	4b0f      	ldr	r3, [pc, #60]	@ (8000974 <oneTask+0x98>)
 8000936:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart3, (uint8_t *) str2, strlen (str2), 100);
 8000938:	68f8      	ldr	r0, [r7, #12]
 800093a:	f7ff fc59 	bl	80001f0 <strlen>
 800093e:	4603      	mov	r3, r0
 8000940:	b29a      	uxth	r2, r3
 8000942:	2364      	movs	r3, #100	@ 0x64
 8000944:	68f9      	ldr	r1, [r7, #12]
 8000946:	4807      	ldr	r0, [pc, #28]	@ (8000964 <oneTask+0x88>)
 8000948:	f001 fc9c 	bl	8002284 <HAL_UART_Transmit>

		osSemaphoreRelease(semephoreHandle);
 800094c:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <oneTask+0x8c>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4618      	mov	r0, r3
 8000952:	f002 f965 	bl	8002c20 <osSemaphoreRelease>
		osDelay(500);
 8000956:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800095a:	f002 f8cc 	bl	8002af6 <osDelay>
  {
 800095e:	e7c1      	b.n	80008e4 <oneTask+0x8>
 8000960:	08005280 	.word	0x08005280
 8000964:	20000280 	.word	0x20000280
 8000968:	200002d4 	.word	0x200002d4
 800096c:	080052ac 	.word	0x080052ac
 8000970:	40020800 	.word	0x40020800
 8000974:	080052cc 	.word	0x080052cc

08000978 <twoTask>:
  }
}
void twoTask(void const * argument){
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
 /* Infinite loop */
  for(;;)
  {
		char *str1 = "Entered MediumTask\n";
 8000980:	4b0e      	ldr	r3, [pc, #56]	@ (80009bc <twoTask+0x44>)
 8000982:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart3, (uint8_t *) str1, strlen (str1), 100);
 8000984:	68f8      	ldr	r0, [r7, #12]
 8000986:	f7ff fc33 	bl	80001f0 <strlen>
 800098a:	4603      	mov	r3, r0
 800098c:	b29a      	uxth	r2, r3
 800098e:	2364      	movs	r3, #100	@ 0x64
 8000990:	68f9      	ldr	r1, [r7, #12]
 8000992:	480b      	ldr	r0, [pc, #44]	@ (80009c0 <twoTask+0x48>)
 8000994:	f001 fc76 	bl	8002284 <HAL_UART_Transmit>


		char *str2 = "Leaving MediumTask\n\n";
 8000998:	4b0a      	ldr	r3, [pc, #40]	@ (80009c4 <twoTask+0x4c>)
 800099a:	60bb      	str	r3, [r7, #8]
		HAL_UART_Transmit(&huart3, (uint8_t *) str2, strlen (str2), 100);
 800099c:	68b8      	ldr	r0, [r7, #8]
 800099e:	f7ff fc27 	bl	80001f0 <strlen>
 80009a2:	4603      	mov	r3, r0
 80009a4:	b29a      	uxth	r2, r3
 80009a6:	2364      	movs	r3, #100	@ 0x64
 80009a8:	68b9      	ldr	r1, [r7, #8]
 80009aa:	4805      	ldr	r0, [pc, #20]	@ (80009c0 <twoTask+0x48>)
 80009ac:	f001 fc6a 	bl	8002284 <HAL_UART_Transmit>
		osDelay(500);
 80009b0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009b4:	f002 f89f 	bl	8002af6 <osDelay>
  {
 80009b8:	bf00      	nop
 80009ba:	e7e1      	b.n	8000980 <twoTask+0x8>
 80009bc:	080052f8 	.word	0x080052f8
 80009c0:	20000280 	.word	0x20000280
 80009c4:	0800530c 	.word	0x0800530c

080009c8 <threeTask>:
  }
}
void threeTask(void const * argument){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  /* Infinite loop */
  for(;;)
  {
	char *str1 = "Entered HighTask and waiting for Semaphore\r\n";
 80009d0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a3c <threeTask+0x74>)
 80009d2:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(&huart3, (uint8_t *) str1, strlen (str1), 100);
 80009d4:	6978      	ldr	r0, [r7, #20]
 80009d6:	f7ff fc0b 	bl	80001f0 <strlen>
 80009da:	4603      	mov	r3, r0
 80009dc:	b29a      	uxth	r2, r3
 80009de:	2364      	movs	r3, #100	@ 0x64
 80009e0:	6979      	ldr	r1, [r7, #20]
 80009e2:	4817      	ldr	r0, [pc, #92]	@ (8000a40 <threeTask+0x78>)
 80009e4:	f001 fc4e 	bl	8002284 <HAL_UART_Transmit>

	osSemaphoreWait(semephoreHandle, osWaitForever);
 80009e8:	4b16      	ldr	r3, [pc, #88]	@ (8000a44 <threeTask+0x7c>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f04f 31ff 	mov.w	r1, #4294967295
 80009f0:	4618      	mov	r0, r3
 80009f2:	f002 f8c7 	bl	8002b84 <osSemaphoreWait>

	char *str3 = "Semaphore acquired by HIGH Task\n";
 80009f6:	4b14      	ldr	r3, [pc, #80]	@ (8000a48 <threeTask+0x80>)
 80009f8:	613b      	str	r3, [r7, #16]
	HAL_UART_Transmit(&huart3, (uint8_t *) str3, strlen (str3), 100);
 80009fa:	6938      	ldr	r0, [r7, #16]
 80009fc:	f7ff fbf8 	bl	80001f0 <strlen>
 8000a00:	4603      	mov	r3, r0
 8000a02:	b29a      	uxth	r2, r3
 8000a04:	2364      	movs	r3, #100	@ 0x64
 8000a06:	6939      	ldr	r1, [r7, #16]
 8000a08:	480d      	ldr	r0, [pc, #52]	@ (8000a40 <threeTask+0x78>)
 8000a0a:	f001 fc3b 	bl	8002284 <HAL_UART_Transmit>

	char *str2 = "Leaving HighTask and releasing Semaphore\r\n\n";
 8000a0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a4c <threeTask+0x84>)
 8000a10:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart3, (uint8_t *) str2, strlen (str2), 100);
 8000a12:	68f8      	ldr	r0, [r7, #12]
 8000a14:	f7ff fbec 	bl	80001f0 <strlen>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	b29a      	uxth	r2, r3
 8000a1c:	2364      	movs	r3, #100	@ 0x64
 8000a1e:	68f9      	ldr	r1, [r7, #12]
 8000a20:	4807      	ldr	r0, [pc, #28]	@ (8000a40 <threeTask+0x78>)
 8000a22:	f001 fc2f 	bl	8002284 <HAL_UART_Transmit>

	osSemaphoreRelease(semephoreHandle);
 8000a26:	4b07      	ldr	r3, [pc, #28]	@ (8000a44 <threeTask+0x7c>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f002 f8f8 	bl	8002c20 <osSemaphoreRelease>
    osDelay(500);
 8000a30:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a34:	f002 f85f 	bl	8002af6 <osDelay>
  {
 8000a38:	bf00      	nop
 8000a3a:	e7c9      	b.n	80009d0 <threeTask+0x8>
 8000a3c:	08005324 	.word	0x08005324
 8000a40:	20000280 	.word	0x20000280
 8000a44:	200002d4 	.word	0x200002d4
 8000a48:	08005354 	.word	0x08005354
 8000a4c:	08005378 	.word	0x08005378

08000a50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a04      	ldr	r2, [pc, #16]	@ (8000a70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d101      	bne.n	8000a66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a62:	f000 f979 	bl	8000d58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40010000 	.word	0x40010000

08000a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a78:	b672      	cpsid	i
}
 8000a7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <Error_Handler+0x8>

08000a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	607b      	str	r3, [r7, #4]
 8000a8a:	4b12      	ldr	r3, [pc, #72]	@ (8000ad4 <HAL_MspInit+0x54>)
 8000a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a8e:	4a11      	ldr	r2, [pc, #68]	@ (8000ad4 <HAL_MspInit+0x54>)
 8000a90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a94:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a96:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad4 <HAL_MspInit+0x54>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	603b      	str	r3, [r7, #0]
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad4 <HAL_MspInit+0x54>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8000ad4 <HAL_MspInit+0x54>)
 8000aac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ab0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ab2:	4b08      	ldr	r3, [pc, #32]	@ (8000ad4 <HAL_MspInit+0x54>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	210f      	movs	r1, #15
 8000ac2:	f06f 0001 	mvn.w	r0, #1
 8000ac6:	f000 fa1f 	bl	8000f08 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40023800 	.word	0x40023800

08000ad8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	@ 0x28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a19      	ldr	r2, [pc, #100]	@ (8000b5c <HAL_UART_MspInit+0x84>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d12c      	bne.n	8000b54 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	4b18      	ldr	r3, [pc, #96]	@ (8000b60 <HAL_UART_MspInit+0x88>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b02:	4a17      	ldr	r2, [pc, #92]	@ (8000b60 <HAL_UART_MspInit+0x88>)
 8000b04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b0a:	4b15      	ldr	r3, [pc, #84]	@ (8000b60 <HAL_UART_MspInit+0x88>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	4b11      	ldr	r3, [pc, #68]	@ (8000b60 <HAL_UART_MspInit+0x88>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	4a10      	ldr	r2, [pc, #64]	@ (8000b60 <HAL_UART_MspInit+0x88>)
 8000b20:	f043 0308 	orr.w	r3, r3, #8
 8000b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b26:	4b0e      	ldr	r3, [pc, #56]	@ (8000b60 <HAL_UART_MspInit+0x88>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	f003 0308 	and.w	r3, r3, #8
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b32:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b40:	2303      	movs	r3, #3
 8000b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b44:	2307      	movs	r3, #7
 8000b46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4805      	ldr	r0, [pc, #20]	@ (8000b64 <HAL_UART_MspInit+0x8c>)
 8000b50:	f000 fa04 	bl	8000f5c <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000b54:	bf00      	nop
 8000b56:	3728      	adds	r7, #40	@ 0x28
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40004800 	.word	0x40004800
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40020c00 	.word	0x40020c00

08000b68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08c      	sub	sp, #48	@ 0x30
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000b70:	2300      	movs	r3, #0
 8000b72:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000b74:	2300      	movs	r3, #0
 8000b76:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	4b2f      	ldr	r3, [pc, #188]	@ (8000c3c <HAL_InitTick+0xd4>)
 8000b7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b80:	4a2e      	ldr	r2, [pc, #184]	@ (8000c3c <HAL_InitTick+0xd4>)
 8000b82:	f043 0301 	orr.w	r3, r3, #1
 8000b86:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b88:	4b2c      	ldr	r3, [pc, #176]	@ (8000c3c <HAL_InitTick+0xd4>)
 8000b8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b8c:	f003 0301 	and.w	r3, r3, #1
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b94:	f107 020c 	add.w	r2, r7, #12
 8000b98:	f107 0310 	add.w	r3, r7, #16
 8000b9c:	4611      	mov	r1, r2
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f001 f852 	bl	8001c48 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000ba4:	f001 f83c 	bl	8001c20 <HAL_RCC_GetPCLK2Freq>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bb0:	4a23      	ldr	r2, [pc, #140]	@ (8000c40 <HAL_InitTick+0xd8>)
 8000bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb6:	0c9b      	lsrs	r3, r3, #18
 8000bb8:	3b01      	subs	r3, #1
 8000bba:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000bbc:	4b21      	ldr	r3, [pc, #132]	@ (8000c44 <HAL_InitTick+0xdc>)
 8000bbe:	4a22      	ldr	r2, [pc, #136]	@ (8000c48 <HAL_InitTick+0xe0>)
 8000bc0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000bc2:	4b20      	ldr	r3, [pc, #128]	@ (8000c44 <HAL_InitTick+0xdc>)
 8000bc4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bc8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000bca:	4a1e      	ldr	r2, [pc, #120]	@ (8000c44 <HAL_InitTick+0xdc>)
 8000bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bce:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000bd0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c44 <HAL_InitTick+0xdc>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd6:	4b1b      	ldr	r3, [pc, #108]	@ (8000c44 <HAL_InitTick+0xdc>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bdc:	4b19      	ldr	r3, [pc, #100]	@ (8000c44 <HAL_InitTick+0xdc>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000be2:	4818      	ldr	r0, [pc, #96]	@ (8000c44 <HAL_InitTick+0xdc>)
 8000be4:	f001 f862 	bl	8001cac <HAL_TIM_Base_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000bee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d11b      	bne.n	8000c2e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000bf6:	4813      	ldr	r0, [pc, #76]	@ (8000c44 <HAL_InitTick+0xdc>)
 8000bf8:	f001 f8b2 	bl	8001d60 <HAL_TIM_Base_Start_IT>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000c02:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d111      	bne.n	8000c2e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c0a:	2019      	movs	r0, #25
 8000c0c:	f000 f998 	bl	8000f40 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2b0f      	cmp	r3, #15
 8000c14:	d808      	bhi.n	8000c28 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000c16:	2200      	movs	r2, #0
 8000c18:	6879      	ldr	r1, [r7, #4]
 8000c1a:	2019      	movs	r0, #25
 8000c1c:	f000 f974 	bl	8000f08 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c20:	4a0a      	ldr	r2, [pc, #40]	@ (8000c4c <HAL_InitTick+0xe4>)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6013      	str	r3, [r2, #0]
 8000c26:	e002      	b.n	8000c2e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3730      	adds	r7, #48	@ 0x30
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	431bde83 	.word	0x431bde83
 8000c44:	200002d8 	.word	0x200002d8
 8000c48:	40010000 	.word	0x40010000
 8000c4c:	20000004 	.word	0x20000004

08000c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <NMI_Handler+0x4>

08000c58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <HardFault_Handler+0x4>

08000c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <MemManage_Handler+0x4>

08000c68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c6c:	bf00      	nop
 8000c6e:	e7fd      	b.n	8000c6c <BusFault_Handler+0x4>

08000c70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <UsageFault_Handler+0x4>

08000c78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
	...

08000c88 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c8c:	4802      	ldr	r0, [pc, #8]	@ (8000c98 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c8e:	f001 f8d7 	bl	8001e40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	200002d8 	.word	0x200002d8

08000c9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca0:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <SystemInit+0x20>)
 8000ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ca6:	4a05      	ldr	r2, [pc, #20]	@ (8000cbc <SystemInit+0x20>)
 8000ca8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000cc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cf8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cc4:	f7ff ffea 	bl	8000c9c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cc8:	480c      	ldr	r0, [pc, #48]	@ (8000cfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cca:	490d      	ldr	r1, [pc, #52]	@ (8000d00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd0:	e002      	b.n	8000cd8 <LoopCopyDataInit>

08000cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd6:	3304      	adds	r3, #4

08000cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cdc:	d3f9      	bcc.n	8000cd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cde:	4a0a      	ldr	r2, [pc, #40]	@ (8000d08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ce0:	4c0a      	ldr	r4, [pc, #40]	@ (8000d0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce4:	e001      	b.n	8000cea <LoopFillZerobss>

08000ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce8:	3204      	adds	r2, #4

08000cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cec:	d3fb      	bcc.n	8000ce6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000cee:	f004 fa53 	bl	8005198 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cf2:	f7ff fc35 	bl	8000560 <main>
  bx  lr    
 8000cf6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000cf8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d00:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d04:	080053d4 	.word	0x080053d4
  ldr r2, =_sbss
 8000d08:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d0c:	20004078 	.word	0x20004078

08000d10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d10:	e7fe      	b.n	8000d10 <ADC_IRQHandler>
	...

08000d14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d18:	4b0e      	ldr	r3, [pc, #56]	@ (8000d54 <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d54 <HAL_Init+0x40>)
 8000d1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d24:	4b0b      	ldr	r3, [pc, #44]	@ (8000d54 <HAL_Init+0x40>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a0a      	ldr	r2, [pc, #40]	@ (8000d54 <HAL_Init+0x40>)
 8000d2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d30:	4b08      	ldr	r3, [pc, #32]	@ (8000d54 <HAL_Init+0x40>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a07      	ldr	r2, [pc, #28]	@ (8000d54 <HAL_Init+0x40>)
 8000d36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d3c:	2003      	movs	r0, #3
 8000d3e:	f000 f8d8 	bl	8000ef2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d42:	200f      	movs	r0, #15
 8000d44:	f7ff ff10 	bl	8000b68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d48:	f7ff fe9a 	bl	8000a80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023c00 	.word	0x40023c00

08000d58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	@ (8000d78 <HAL_IncTick+0x20>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	461a      	mov	r2, r3
 8000d62:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <HAL_IncTick+0x24>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4413      	add	r3, r2
 8000d68:	4a04      	ldr	r2, [pc, #16]	@ (8000d7c <HAL_IncTick+0x24>)
 8000d6a:	6013      	str	r3, [r2, #0]
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	20000008 	.word	0x20000008
 8000d7c:	20000320 	.word	0x20000320

08000d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return uwTick;
 8000d84:	4b03      	ldr	r3, [pc, #12]	@ (8000d94 <HAL_GetTick+0x14>)
 8000d86:	681b      	ldr	r3, [r3, #0]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	20000320 	.word	0x20000320

08000d98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da8:	4b0c      	ldr	r3, [pc, #48]	@ (8000ddc <__NVIC_SetPriorityGrouping+0x44>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dae:	68ba      	ldr	r2, [r7, #8]
 8000db0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000db4:	4013      	ands	r3, r2
 8000db6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dca:	4a04      	ldr	r2, [pc, #16]	@ (8000ddc <__NVIC_SetPriorityGrouping+0x44>)
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	60d3      	str	r3, [r2, #12]
}
 8000dd0:	bf00      	nop
 8000dd2:	3714      	adds	r7, #20
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de4:	4b04      	ldr	r3, [pc, #16]	@ (8000df8 <__NVIC_GetPriorityGrouping+0x18>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	0a1b      	lsrs	r3, r3, #8
 8000dea:	f003 0307 	and.w	r3, r3, #7
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	db0b      	blt.n	8000e26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	f003 021f 	and.w	r2, r3, #31
 8000e14:	4907      	ldr	r1, [pc, #28]	@ (8000e34 <__NVIC_EnableIRQ+0x38>)
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	095b      	lsrs	r3, r3, #5
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e26:	bf00      	nop
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	e000e100 	.word	0xe000e100

08000e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	6039      	str	r1, [r7, #0]
 8000e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	db0a      	blt.n	8000e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	b2da      	uxtb	r2, r3
 8000e50:	490c      	ldr	r1, [pc, #48]	@ (8000e84 <__NVIC_SetPriority+0x4c>)
 8000e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e56:	0112      	lsls	r2, r2, #4
 8000e58:	b2d2      	uxtb	r2, r2
 8000e5a:	440b      	add	r3, r1
 8000e5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e60:	e00a      	b.n	8000e78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	4908      	ldr	r1, [pc, #32]	@ (8000e88 <__NVIC_SetPriority+0x50>)
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	f003 030f 	and.w	r3, r3, #15
 8000e6e:	3b04      	subs	r3, #4
 8000e70:	0112      	lsls	r2, r2, #4
 8000e72:	b2d2      	uxtb	r2, r2
 8000e74:	440b      	add	r3, r1
 8000e76:	761a      	strb	r2, [r3, #24]
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000e100 	.word	0xe000e100
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b089      	sub	sp, #36	@ 0x24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	f1c3 0307 	rsb	r3, r3, #7
 8000ea6:	2b04      	cmp	r3, #4
 8000ea8:	bf28      	it	cs
 8000eaa:	2304      	movcs	r3, #4
 8000eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	3304      	adds	r3, #4
 8000eb2:	2b06      	cmp	r3, #6
 8000eb4:	d902      	bls.n	8000ebc <NVIC_EncodePriority+0x30>
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3b03      	subs	r3, #3
 8000eba:	e000      	b.n	8000ebe <NVIC_EncodePriority+0x32>
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43da      	mvns	r2, r3
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	401a      	ands	r2, r3
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	fa01 f303 	lsl.w	r3, r1, r3
 8000ede:	43d9      	mvns	r1, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee4:	4313      	orrs	r3, r2
         );
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3724      	adds	r7, #36	@ 0x24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff ff4c 	bl	8000d98 <__NVIC_SetPriorityGrouping>
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
 8000f14:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f1a:	f7ff ff61 	bl	8000de0 <__NVIC_GetPriorityGrouping>
 8000f1e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	68b9      	ldr	r1, [r7, #8]
 8000f24:	6978      	ldr	r0, [r7, #20]
 8000f26:	f7ff ffb1 	bl	8000e8c <NVIC_EncodePriority>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f30:	4611      	mov	r1, r2
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff ff80 	bl	8000e38 <__NVIC_SetPriority>
}
 8000f38:	bf00      	nop
 8000f3a:	3718      	adds	r7, #24
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff ff54 	bl	8000dfc <__NVIC_EnableIRQ>
}
 8000f54:	bf00      	nop
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b089      	sub	sp, #36	@ 0x24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f66:	2300      	movs	r3, #0
 8000f68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f72:	2300      	movs	r3, #0
 8000f74:	61fb      	str	r3, [r7, #28]
 8000f76:	e177      	b.n	8001268 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f78:	2201      	movs	r2, #1
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	697a      	ldr	r2, [r7, #20]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	f040 8166 	bne.w	8001262 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f003 0303 	and.w	r3, r3, #3
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d005      	beq.n	8000fae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d130      	bne.n	8001010 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	2203      	movs	r2, #3
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	68da      	ldr	r2, [r3, #12]
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	091b      	lsrs	r3, r3, #4
 8000ffa:	f003 0201 	and.w	r2, r3, #1
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f003 0303 	and.w	r3, r3, #3
 8001018:	2b03      	cmp	r3, #3
 800101a:	d017      	beq.n	800104c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	2203      	movs	r2, #3
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	689a      	ldr	r2, [r3, #8]
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 0303 	and.w	r3, r3, #3
 8001054:	2b02      	cmp	r3, #2
 8001056:	d123      	bne.n	80010a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	08da      	lsrs	r2, r3, #3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3208      	adds	r2, #8
 8001060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001064:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	f003 0307 	and.w	r3, r3, #7
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	220f      	movs	r2, #15
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	691a      	ldr	r2, [r3, #16]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4313      	orrs	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	08da      	lsrs	r2, r3, #3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	3208      	adds	r2, #8
 800109a:	69b9      	ldr	r1, [r7, #24]
 800109c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	2203      	movs	r2, #3
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	43db      	mvns	r3, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4013      	ands	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 0203 	and.w	r2, r3, #3
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	f000 80c0 	beq.w	8001262 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	4b66      	ldr	r3, [pc, #408]	@ (8001280 <HAL_GPIO_Init+0x324>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ea:	4a65      	ldr	r2, [pc, #404]	@ (8001280 <HAL_GPIO_Init+0x324>)
 80010ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80010f2:	4b63      	ldr	r3, [pc, #396]	@ (8001280 <HAL_GPIO_Init+0x324>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010fe:	4a61      	ldr	r2, [pc, #388]	@ (8001284 <HAL_GPIO_Init+0x328>)
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	089b      	lsrs	r3, r3, #2
 8001104:	3302      	adds	r3, #2
 8001106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	f003 0303 	and.w	r3, r3, #3
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	220f      	movs	r2, #15
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43db      	mvns	r3, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4013      	ands	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a58      	ldr	r2, [pc, #352]	@ (8001288 <HAL_GPIO_Init+0x32c>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d037      	beq.n	800119a <HAL_GPIO_Init+0x23e>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a57      	ldr	r2, [pc, #348]	@ (800128c <HAL_GPIO_Init+0x330>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d031      	beq.n	8001196 <HAL_GPIO_Init+0x23a>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a56      	ldr	r2, [pc, #344]	@ (8001290 <HAL_GPIO_Init+0x334>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d02b      	beq.n	8001192 <HAL_GPIO_Init+0x236>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a55      	ldr	r2, [pc, #340]	@ (8001294 <HAL_GPIO_Init+0x338>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d025      	beq.n	800118e <HAL_GPIO_Init+0x232>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a54      	ldr	r2, [pc, #336]	@ (8001298 <HAL_GPIO_Init+0x33c>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d01f      	beq.n	800118a <HAL_GPIO_Init+0x22e>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a53      	ldr	r2, [pc, #332]	@ (800129c <HAL_GPIO_Init+0x340>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d019      	beq.n	8001186 <HAL_GPIO_Init+0x22a>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a52      	ldr	r2, [pc, #328]	@ (80012a0 <HAL_GPIO_Init+0x344>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d013      	beq.n	8001182 <HAL_GPIO_Init+0x226>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a51      	ldr	r2, [pc, #324]	@ (80012a4 <HAL_GPIO_Init+0x348>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d00d      	beq.n	800117e <HAL_GPIO_Init+0x222>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a50      	ldr	r2, [pc, #320]	@ (80012a8 <HAL_GPIO_Init+0x34c>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d007      	beq.n	800117a <HAL_GPIO_Init+0x21e>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a4f      	ldr	r2, [pc, #316]	@ (80012ac <HAL_GPIO_Init+0x350>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d101      	bne.n	8001176 <HAL_GPIO_Init+0x21a>
 8001172:	2309      	movs	r3, #9
 8001174:	e012      	b.n	800119c <HAL_GPIO_Init+0x240>
 8001176:	230a      	movs	r3, #10
 8001178:	e010      	b.n	800119c <HAL_GPIO_Init+0x240>
 800117a:	2308      	movs	r3, #8
 800117c:	e00e      	b.n	800119c <HAL_GPIO_Init+0x240>
 800117e:	2307      	movs	r3, #7
 8001180:	e00c      	b.n	800119c <HAL_GPIO_Init+0x240>
 8001182:	2306      	movs	r3, #6
 8001184:	e00a      	b.n	800119c <HAL_GPIO_Init+0x240>
 8001186:	2305      	movs	r3, #5
 8001188:	e008      	b.n	800119c <HAL_GPIO_Init+0x240>
 800118a:	2304      	movs	r3, #4
 800118c:	e006      	b.n	800119c <HAL_GPIO_Init+0x240>
 800118e:	2303      	movs	r3, #3
 8001190:	e004      	b.n	800119c <HAL_GPIO_Init+0x240>
 8001192:	2302      	movs	r3, #2
 8001194:	e002      	b.n	800119c <HAL_GPIO_Init+0x240>
 8001196:	2301      	movs	r3, #1
 8001198:	e000      	b.n	800119c <HAL_GPIO_Init+0x240>
 800119a:	2300      	movs	r3, #0
 800119c:	69fa      	ldr	r2, [r7, #28]
 800119e:	f002 0203 	and.w	r2, r2, #3
 80011a2:	0092      	lsls	r2, r2, #2
 80011a4:	4093      	lsls	r3, r2
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011ac:	4935      	ldr	r1, [pc, #212]	@ (8001284 <HAL_GPIO_Init+0x328>)
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	089b      	lsrs	r3, r3, #2
 80011b2:	3302      	adds	r3, #2
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ba:	4b3d      	ldr	r3, [pc, #244]	@ (80012b0 <HAL_GPIO_Init+0x354>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	43db      	mvns	r3, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4013      	ands	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011de:	4a34      	ldr	r2, [pc, #208]	@ (80012b0 <HAL_GPIO_Init+0x354>)
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011e4:	4b32      	ldr	r3, [pc, #200]	@ (80012b0 <HAL_GPIO_Init+0x354>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	43db      	mvns	r3, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4013      	ands	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d003      	beq.n	8001208 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	4313      	orrs	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001208:	4a29      	ldr	r2, [pc, #164]	@ (80012b0 <HAL_GPIO_Init+0x354>)
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800120e:	4b28      	ldr	r3, [pc, #160]	@ (80012b0 <HAL_GPIO_Init+0x354>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	43db      	mvns	r3, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4013      	ands	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	4313      	orrs	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001232:	4a1f      	ldr	r2, [pc, #124]	@ (80012b0 <HAL_GPIO_Init+0x354>)
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001238:	4b1d      	ldr	r3, [pc, #116]	@ (80012b0 <HAL_GPIO_Init+0x354>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	43db      	mvns	r3, r3
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d003      	beq.n	800125c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	4313      	orrs	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800125c:	4a14      	ldr	r2, [pc, #80]	@ (80012b0 <HAL_GPIO_Init+0x354>)
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3301      	adds	r3, #1
 8001266:	61fb      	str	r3, [r7, #28]
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	2b0f      	cmp	r3, #15
 800126c:	f67f ae84 	bls.w	8000f78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001270:	bf00      	nop
 8001272:	bf00      	nop
 8001274:	3724      	adds	r7, #36	@ 0x24
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	40023800 	.word	0x40023800
 8001284:	40013800 	.word	0x40013800
 8001288:	40020000 	.word	0x40020000
 800128c:	40020400 	.word	0x40020400
 8001290:	40020800 	.word	0x40020800
 8001294:	40020c00 	.word	0x40020c00
 8001298:	40021000 	.word	0x40021000
 800129c:	40021400 	.word	0x40021400
 80012a0:	40021800 	.word	0x40021800
 80012a4:	40021c00 	.word	0x40021c00
 80012a8:	40022000 	.word	0x40022000
 80012ac:	40022400 	.word	0x40022400
 80012b0:	40013c00 	.word	0x40013c00

080012b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	460b      	mov	r3, r1
 80012be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	691a      	ldr	r2, [r3, #16]
 80012c4:	887b      	ldrh	r3, [r7, #2]
 80012c6:	4013      	ands	r3, r2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d002      	beq.n	80012d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012cc:	2301      	movs	r3, #1
 80012ce:	73fb      	strb	r3, [r7, #15]
 80012d0:	e001      	b.n	80012d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012d2:	2300      	movs	r3, #0
 80012d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3714      	adds	r7, #20
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	460b      	mov	r3, r1
 80012ee:	807b      	strh	r3, [r7, #2]
 80012f0:	4613      	mov	r3, r2
 80012f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012f4:	787b      	ldrb	r3, [r7, #1]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012fa:	887a      	ldrh	r2, [r7, #2]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001300:	e003      	b.n	800130a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001302:	887b      	ldrh	r3, [r7, #2]
 8001304:	041a      	lsls	r2, r3, #16
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	619a      	str	r2, [r3, #24]
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
	...

08001318 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d101      	bne.n	800132a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e267      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	2b00      	cmp	r3, #0
 8001334:	d075      	beq.n	8001422 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001336:	4b88      	ldr	r3, [pc, #544]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f003 030c 	and.w	r3, r3, #12
 800133e:	2b04      	cmp	r3, #4
 8001340:	d00c      	beq.n	800135c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001342:	4b85      	ldr	r3, [pc, #532]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800134a:	2b08      	cmp	r3, #8
 800134c:	d112      	bne.n	8001374 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800134e:	4b82      	ldr	r3, [pc, #520]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001356:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800135a:	d10b      	bne.n	8001374 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800135c:	4b7e      	ldr	r3, [pc, #504]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d05b      	beq.n	8001420 <HAL_RCC_OscConfig+0x108>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d157      	bne.n	8001420 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e242      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800137c:	d106      	bne.n	800138c <HAL_RCC_OscConfig+0x74>
 800137e:	4b76      	ldr	r3, [pc, #472]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a75      	ldr	r2, [pc, #468]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 8001384:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	e01d      	b.n	80013c8 <HAL_RCC_OscConfig+0xb0>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001394:	d10c      	bne.n	80013b0 <HAL_RCC_OscConfig+0x98>
 8001396:	4b70      	ldr	r3, [pc, #448]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a6f      	ldr	r2, [pc, #444]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 800139c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	4b6d      	ldr	r3, [pc, #436]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a6c      	ldr	r2, [pc, #432]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 80013a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	e00b      	b.n	80013c8 <HAL_RCC_OscConfig+0xb0>
 80013b0:	4b69      	ldr	r3, [pc, #420]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a68      	ldr	r2, [pc, #416]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 80013b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013ba:	6013      	str	r3, [r2, #0]
 80013bc:	4b66      	ldr	r3, [pc, #408]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a65      	ldr	r2, [pc, #404]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 80013c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d013      	beq.n	80013f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d0:	f7ff fcd6 	bl	8000d80 <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013d8:	f7ff fcd2 	bl	8000d80 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b64      	cmp	r3, #100	@ 0x64
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e207      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ea:	4b5b      	ldr	r3, [pc, #364]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d0f0      	beq.n	80013d8 <HAL_RCC_OscConfig+0xc0>
 80013f6:	e014      	b.n	8001422 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f8:	f7ff fcc2 	bl	8000d80 <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001400:	f7ff fcbe 	bl	8000d80 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b64      	cmp	r3, #100	@ 0x64
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e1f3      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001412:	4b51      	ldr	r3, [pc, #324]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1f0      	bne.n	8001400 <HAL_RCC_OscConfig+0xe8>
 800141e:	e000      	b.n	8001422 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001420:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d063      	beq.n	80014f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800142e:	4b4a      	ldr	r3, [pc, #296]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f003 030c 	and.w	r3, r3, #12
 8001436:	2b00      	cmp	r3, #0
 8001438:	d00b      	beq.n	8001452 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800143a:	4b47      	ldr	r3, [pc, #284]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001442:	2b08      	cmp	r3, #8
 8001444:	d11c      	bne.n	8001480 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001446:	4b44      	ldr	r3, [pc, #272]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d116      	bne.n	8001480 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001452:	4b41      	ldr	r3, [pc, #260]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d005      	beq.n	800146a <HAL_RCC_OscConfig+0x152>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d001      	beq.n	800146a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e1c7      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800146a:	4b3b      	ldr	r3, [pc, #236]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	691b      	ldr	r3, [r3, #16]
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	4937      	ldr	r1, [pc, #220]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 800147a:	4313      	orrs	r3, r2
 800147c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800147e:	e03a      	b.n	80014f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d020      	beq.n	80014ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001488:	4b34      	ldr	r3, [pc, #208]	@ (800155c <HAL_RCC_OscConfig+0x244>)
 800148a:	2201      	movs	r2, #1
 800148c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800148e:	f7ff fc77 	bl	8000d80 <HAL_GetTick>
 8001492:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001494:	e008      	b.n	80014a8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001496:	f7ff fc73 	bl	8000d80 <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e1a8      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0f0      	beq.n	8001496 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b4:	4b28      	ldr	r3, [pc, #160]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	691b      	ldr	r3, [r3, #16]
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	4925      	ldr	r1, [pc, #148]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 80014c4:	4313      	orrs	r3, r2
 80014c6:	600b      	str	r3, [r1, #0]
 80014c8:	e015      	b.n	80014f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ca:	4b24      	ldr	r3, [pc, #144]	@ (800155c <HAL_RCC_OscConfig+0x244>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d0:	f7ff fc56 	bl	8000d80 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014d8:	f7ff fc52 	bl	8000d80 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e187      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1f0      	bne.n	80014d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0308 	and.w	r3, r3, #8
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d036      	beq.n	8001570 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d016      	beq.n	8001538 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800150a:	4b15      	ldr	r3, [pc, #84]	@ (8001560 <HAL_RCC_OscConfig+0x248>)
 800150c:	2201      	movs	r2, #1
 800150e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001510:	f7ff fc36 	bl	8000d80 <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001518:	f7ff fc32 	bl	8000d80 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e167      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800152a:	4b0b      	ldr	r3, [pc, #44]	@ (8001558 <HAL_RCC_OscConfig+0x240>)
 800152c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d0f0      	beq.n	8001518 <HAL_RCC_OscConfig+0x200>
 8001536:	e01b      	b.n	8001570 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001538:	4b09      	ldr	r3, [pc, #36]	@ (8001560 <HAL_RCC_OscConfig+0x248>)
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800153e:	f7ff fc1f 	bl	8000d80 <HAL_GetTick>
 8001542:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001544:	e00e      	b.n	8001564 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001546:	f7ff fc1b 	bl	8000d80 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d907      	bls.n	8001564 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e150      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
 8001558:	40023800 	.word	0x40023800
 800155c:	42470000 	.word	0x42470000
 8001560:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001564:	4b88      	ldr	r3, [pc, #544]	@ (8001788 <HAL_RCC_OscConfig+0x470>)
 8001566:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1ea      	bne.n	8001546 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0304 	and.w	r3, r3, #4
 8001578:	2b00      	cmp	r3, #0
 800157a:	f000 8097 	beq.w	80016ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800157e:	2300      	movs	r3, #0
 8001580:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001582:	4b81      	ldr	r3, [pc, #516]	@ (8001788 <HAL_RCC_OscConfig+0x470>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001586:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d10f      	bne.n	80015ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60bb      	str	r3, [r7, #8]
 8001592:	4b7d      	ldr	r3, [pc, #500]	@ (8001788 <HAL_RCC_OscConfig+0x470>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001596:	4a7c      	ldr	r2, [pc, #496]	@ (8001788 <HAL_RCC_OscConfig+0x470>)
 8001598:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800159c:	6413      	str	r3, [r2, #64]	@ 0x40
 800159e:	4b7a      	ldr	r3, [pc, #488]	@ (8001788 <HAL_RCC_OscConfig+0x470>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015a6:	60bb      	str	r3, [r7, #8]
 80015a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015aa:	2301      	movs	r3, #1
 80015ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ae:	4b77      	ldr	r3, [pc, #476]	@ (800178c <HAL_RCC_OscConfig+0x474>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d118      	bne.n	80015ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015ba:	4b74      	ldr	r3, [pc, #464]	@ (800178c <HAL_RCC_OscConfig+0x474>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a73      	ldr	r2, [pc, #460]	@ (800178c <HAL_RCC_OscConfig+0x474>)
 80015c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015c6:	f7ff fbdb 	bl	8000d80 <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ce:	f7ff fbd7 	bl	8000d80 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e10c      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e0:	4b6a      	ldr	r3, [pc, #424]	@ (800178c <HAL_RCC_OscConfig+0x474>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d0f0      	beq.n	80015ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d106      	bne.n	8001602 <HAL_RCC_OscConfig+0x2ea>
 80015f4:	4b64      	ldr	r3, [pc, #400]	@ (8001788 <HAL_RCC_OscConfig+0x470>)
 80015f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015f8:	4a63      	ldr	r2, [pc, #396]	@ (8001788 <HAL_RCC_OscConfig+0x470>)
 80015fa:	f043 0301 	orr.w	r3, r3, #1
 80015fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8001600:	e01c      	b.n	800163c <HAL_RCC_OscConfig+0x324>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	2b05      	cmp	r3, #5
 8001608:	d10c      	bne.n	8001624 <HAL_RCC_OscConfig+0x30c>
 800160a:	4b5f      	ldr	r3, [pc, #380]	@ (8001788 <HAL_RCC_OscConfig+0x470>)
 800160c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800160e:	4a5e      	ldr	r2, [pc, #376]	@ (8001788 <HAL_RCC_OscConfig+0x470>)
 8001610:	f043 0304 	orr.w	r3, r3, #4
 8001614:	6713      	str	r3, [r2, #112]	@ 0x70
 8001616:	4b5c      	ldr	r3, [pc, #368]	@ (8001788 <HAL_RCC_OscConfig+0x470>)
 8001618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800161a:	4a5b      	ldr	r2, [pc, #364]	@ (8001788 <HAL_RCC_OscConfig+0x470>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	6713      	str	r3, [r2, #112]	@ 0x70
 8001622:	e00b      	b.n	800163c <HAL_RCC_OscConfig+0x324>
 8001624:	4b58      	ldr	r3, [pc, #352]	@ (8001788 <HAL_RCC_OscConfig+0x470>)
 8001626:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001628:	4a57      	ldr	r2, [pc, #348]	@ (8001788 <HAL_RCC_OscConfig+0x470>)
 800162a:	f023 0301 	bic.w	r3, r3, #1
 800162e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001630:	4b55      	ldr	r3, [pc, #340]	@ (8001788 <HAL_RCC_OscConfig+0x470>)
 8001632:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001634:	4a54      	ldr	r2, [pc, #336]	@ (8001788 <HAL_RCC_OscConfig+0x470>)
 8001636:	f023 0304 	bic.w	r3, r3, #4
 800163a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d015      	beq.n	8001670 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001644:	f7ff fb9c 	bl	8000d80 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800164a:	e00a      	b.n	8001662 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800164c:	f7ff fb98 	bl	8000d80 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	f241 3288 	movw	r2, #5000	@ 0x1388
 800165a:	4293      	cmp	r3, r2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e0cb      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001662:	4b49      	ldr	r3, [pc, #292]	@ (8001788 <HAL_RCC_OscConfig+0x470>)
 8001664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d0ee      	beq.n	800164c <HAL_RCC_OscConfig+0x334>
 800166e:	e014      	b.n	800169a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001670:	f7ff fb86 	bl	8000d80 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001676:	e00a      	b.n	800168e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001678:	f7ff fb82 	bl	8000d80 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001686:	4293      	cmp	r3, r2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e0b5      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800168e:	4b3e      	ldr	r3, [pc, #248]	@ (8001788 <HAL_RCC_OscConfig+0x470>)
 8001690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1ee      	bne.n	8001678 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800169a:	7dfb      	ldrb	r3, [r7, #23]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d105      	bne.n	80016ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016a0:	4b39      	ldr	r3, [pc, #228]	@ (8001788 <HAL_RCC_OscConfig+0x470>)
 80016a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a4:	4a38      	ldr	r2, [pc, #224]	@ (8001788 <HAL_RCC_OscConfig+0x470>)
 80016a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f000 80a1 	beq.w	80017f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016b6:	4b34      	ldr	r3, [pc, #208]	@ (8001788 <HAL_RCC_OscConfig+0x470>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f003 030c 	and.w	r3, r3, #12
 80016be:	2b08      	cmp	r3, #8
 80016c0:	d05c      	beq.n	800177c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d141      	bne.n	800174e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ca:	4b31      	ldr	r3, [pc, #196]	@ (8001790 <HAL_RCC_OscConfig+0x478>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d0:	f7ff fb56 	bl	8000d80 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d8:	f7ff fb52 	bl	8000d80 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e087      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ea:	4b27      	ldr	r3, [pc, #156]	@ (8001788 <HAL_RCC_OscConfig+0x470>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f0      	bne.n	80016d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	69da      	ldr	r2, [r3, #28]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a1b      	ldr	r3, [r3, #32]
 80016fe:	431a      	orrs	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001704:	019b      	lsls	r3, r3, #6
 8001706:	431a      	orrs	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800170c:	085b      	lsrs	r3, r3, #1
 800170e:	3b01      	subs	r3, #1
 8001710:	041b      	lsls	r3, r3, #16
 8001712:	431a      	orrs	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001718:	061b      	lsls	r3, r3, #24
 800171a:	491b      	ldr	r1, [pc, #108]	@ (8001788 <HAL_RCC_OscConfig+0x470>)
 800171c:	4313      	orrs	r3, r2
 800171e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001720:	4b1b      	ldr	r3, [pc, #108]	@ (8001790 <HAL_RCC_OscConfig+0x478>)
 8001722:	2201      	movs	r2, #1
 8001724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001726:	f7ff fb2b 	bl	8000d80 <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800172e:	f7ff fb27 	bl	8000d80 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e05c      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001740:	4b11      	ldr	r3, [pc, #68]	@ (8001788 <HAL_RCC_OscConfig+0x470>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d0f0      	beq.n	800172e <HAL_RCC_OscConfig+0x416>
 800174c:	e054      	b.n	80017f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800174e:	4b10      	ldr	r3, [pc, #64]	@ (8001790 <HAL_RCC_OscConfig+0x478>)
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001754:	f7ff fb14 	bl	8000d80 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800175c:	f7ff fb10 	bl	8000d80 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e045      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800176e:	4b06      	ldr	r3, [pc, #24]	@ (8001788 <HAL_RCC_OscConfig+0x470>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f0      	bne.n	800175c <HAL_RCC_OscConfig+0x444>
 800177a:	e03d      	b.n	80017f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d107      	bne.n	8001794 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e038      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
 8001788:	40023800 	.word	0x40023800
 800178c:	40007000 	.word	0x40007000
 8001790:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001794:	4b1b      	ldr	r3, [pc, #108]	@ (8001804 <HAL_RCC_OscConfig+0x4ec>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d028      	beq.n	80017f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d121      	bne.n	80017f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d11a      	bne.n	80017f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80017c4:	4013      	ands	r3, r2
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80017ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d111      	bne.n	80017f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017da:	085b      	lsrs	r3, r3, #1
 80017dc:	3b01      	subs	r3, #1
 80017de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d107      	bne.n	80017f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d001      	beq.n	80017f8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e000      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40023800 	.word	0x40023800

08001808 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d101      	bne.n	800181c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e0cc      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800181c:	4b68      	ldr	r3, [pc, #416]	@ (80019c0 <HAL_RCC_ClockConfig+0x1b8>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 030f 	and.w	r3, r3, #15
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	429a      	cmp	r2, r3
 8001828:	d90c      	bls.n	8001844 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800182a:	4b65      	ldr	r3, [pc, #404]	@ (80019c0 <HAL_RCC_ClockConfig+0x1b8>)
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001832:	4b63      	ldr	r3, [pc, #396]	@ (80019c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 030f 	and.w	r3, r3, #15
 800183a:	683a      	ldr	r2, [r7, #0]
 800183c:	429a      	cmp	r2, r3
 800183e:	d001      	beq.n	8001844 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e0b8      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d020      	beq.n	8001892 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	2b00      	cmp	r3, #0
 800185a:	d005      	beq.n	8001868 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800185c:	4b59      	ldr	r3, [pc, #356]	@ (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	4a58      	ldr	r2, [pc, #352]	@ (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001862:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001866:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0308 	and.w	r3, r3, #8
 8001870:	2b00      	cmp	r3, #0
 8001872:	d005      	beq.n	8001880 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001874:	4b53      	ldr	r3, [pc, #332]	@ (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	4a52      	ldr	r2, [pc, #328]	@ (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800187e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001880:	4b50      	ldr	r3, [pc, #320]	@ (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	494d      	ldr	r1, [pc, #308]	@ (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800188e:	4313      	orrs	r3, r2
 8001890:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	d044      	beq.n	8001928 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d107      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018a6:	4b47      	ldr	r3, [pc, #284]	@ (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d119      	bne.n	80018e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e07f      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d003      	beq.n	80018c6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018c2:	2b03      	cmp	r3, #3
 80018c4:	d107      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018c6:	4b3f      	ldr	r3, [pc, #252]	@ (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d109      	bne.n	80018e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e06f      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d6:	4b3b      	ldr	r3, [pc, #236]	@ (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e067      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018e6:	4b37      	ldr	r3, [pc, #220]	@ (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f023 0203 	bic.w	r2, r3, #3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	4934      	ldr	r1, [pc, #208]	@ (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018f8:	f7ff fa42 	bl	8000d80 <HAL_GetTick>
 80018fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018fe:	e00a      	b.n	8001916 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001900:	f7ff fa3e 	bl	8000d80 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800190e:	4293      	cmp	r3, r2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e04f      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001916:	4b2b      	ldr	r3, [pc, #172]	@ (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f003 020c 	and.w	r2, r3, #12
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	429a      	cmp	r2, r3
 8001926:	d1eb      	bne.n	8001900 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001928:	4b25      	ldr	r3, [pc, #148]	@ (80019c0 <HAL_RCC_ClockConfig+0x1b8>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 030f 	and.w	r3, r3, #15
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	429a      	cmp	r2, r3
 8001934:	d20c      	bcs.n	8001950 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001936:	4b22      	ldr	r3, [pc, #136]	@ (80019c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800193e:	4b20      	ldr	r3, [pc, #128]	@ (80019c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 030f 	and.w	r3, r3, #15
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	429a      	cmp	r2, r3
 800194a:	d001      	beq.n	8001950 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e032      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0304 	and.w	r3, r3, #4
 8001958:	2b00      	cmp	r3, #0
 800195a:	d008      	beq.n	800196e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800195c:	4b19      	ldr	r3, [pc, #100]	@ (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	4916      	ldr	r1, [pc, #88]	@ (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800196a:	4313      	orrs	r3, r2
 800196c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0308 	and.w	r3, r3, #8
 8001976:	2b00      	cmp	r3, #0
 8001978:	d009      	beq.n	800198e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800197a:	4b12      	ldr	r3, [pc, #72]	@ (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	490e      	ldr	r1, [pc, #56]	@ (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800198a:	4313      	orrs	r3, r2
 800198c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800198e:	f000 f821 	bl	80019d4 <HAL_RCC_GetSysClockFreq>
 8001992:	4602      	mov	r2, r0
 8001994:	4b0b      	ldr	r3, [pc, #44]	@ (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	091b      	lsrs	r3, r3, #4
 800199a:	f003 030f 	and.w	r3, r3, #15
 800199e:	490a      	ldr	r1, [pc, #40]	@ (80019c8 <HAL_RCC_ClockConfig+0x1c0>)
 80019a0:	5ccb      	ldrb	r3, [r1, r3]
 80019a2:	fa22 f303 	lsr.w	r3, r2, r3
 80019a6:	4a09      	ldr	r2, [pc, #36]	@ (80019cc <HAL_RCC_ClockConfig+0x1c4>)
 80019a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80019aa:	4b09      	ldr	r3, [pc, #36]	@ (80019d0 <HAL_RCC_ClockConfig+0x1c8>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff f8da 	bl	8000b68 <HAL_InitTick>

  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40023c00 	.word	0x40023c00
 80019c4:	40023800 	.word	0x40023800
 80019c8:	080053ac 	.word	0x080053ac
 80019cc:	20000000 	.word	0x20000000
 80019d0:	20000004 	.word	0x20000004

080019d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019d8:	b094      	sub	sp, #80	@ 0x50
 80019da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80019dc:	2300      	movs	r3, #0
 80019de:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80019e4:	2300      	movs	r3, #0
 80019e6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80019e8:	2300      	movs	r3, #0
 80019ea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019ec:	4b79      	ldr	r3, [pc, #484]	@ (8001bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f003 030c 	and.w	r3, r3, #12
 80019f4:	2b08      	cmp	r3, #8
 80019f6:	d00d      	beq.n	8001a14 <HAL_RCC_GetSysClockFreq+0x40>
 80019f8:	2b08      	cmp	r3, #8
 80019fa:	f200 80e1 	bhi.w	8001bc0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d002      	beq.n	8001a08 <HAL_RCC_GetSysClockFreq+0x34>
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	d003      	beq.n	8001a0e <HAL_RCC_GetSysClockFreq+0x3a>
 8001a06:	e0db      	b.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a08:	4b73      	ldr	r3, [pc, #460]	@ (8001bd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a0a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a0c:	e0db      	b.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a0e:	4b73      	ldr	r3, [pc, #460]	@ (8001bdc <HAL_RCC_GetSysClockFreq+0x208>)
 8001a10:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a12:	e0d8      	b.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a14:	4b6f      	ldr	r3, [pc, #444]	@ (8001bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a1c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a1e:	4b6d      	ldr	r3, [pc, #436]	@ (8001bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d063      	beq.n	8001af2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a2a:	4b6a      	ldr	r3, [pc, #424]	@ (8001bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	099b      	lsrs	r3, r3, #6
 8001a30:	2200      	movs	r2, #0
 8001a32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001a34:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a3e:	2300      	movs	r3, #0
 8001a40:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001a46:	4622      	mov	r2, r4
 8001a48:	462b      	mov	r3, r5
 8001a4a:	f04f 0000 	mov.w	r0, #0
 8001a4e:	f04f 0100 	mov.w	r1, #0
 8001a52:	0159      	lsls	r1, r3, #5
 8001a54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a58:	0150      	lsls	r0, r2, #5
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	4621      	mov	r1, r4
 8001a60:	1a51      	subs	r1, r2, r1
 8001a62:	6139      	str	r1, [r7, #16]
 8001a64:	4629      	mov	r1, r5
 8001a66:	eb63 0301 	sbc.w	r3, r3, r1
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	f04f 0300 	mov.w	r3, #0
 8001a74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a78:	4659      	mov	r1, fp
 8001a7a:	018b      	lsls	r3, r1, #6
 8001a7c:	4651      	mov	r1, sl
 8001a7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a82:	4651      	mov	r1, sl
 8001a84:	018a      	lsls	r2, r1, #6
 8001a86:	4651      	mov	r1, sl
 8001a88:	ebb2 0801 	subs.w	r8, r2, r1
 8001a8c:	4659      	mov	r1, fp
 8001a8e:	eb63 0901 	sbc.w	r9, r3, r1
 8001a92:	f04f 0200 	mov.w	r2, #0
 8001a96:	f04f 0300 	mov.w	r3, #0
 8001a9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001aa2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001aa6:	4690      	mov	r8, r2
 8001aa8:	4699      	mov	r9, r3
 8001aaa:	4623      	mov	r3, r4
 8001aac:	eb18 0303 	adds.w	r3, r8, r3
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	462b      	mov	r3, r5
 8001ab4:	eb49 0303 	adc.w	r3, r9, r3
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	f04f 0200 	mov.w	r2, #0
 8001abe:	f04f 0300 	mov.w	r3, #0
 8001ac2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ac6:	4629      	mov	r1, r5
 8001ac8:	024b      	lsls	r3, r1, #9
 8001aca:	4621      	mov	r1, r4
 8001acc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ad0:	4621      	mov	r1, r4
 8001ad2:	024a      	lsls	r2, r1, #9
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ada:	2200      	movs	r2, #0
 8001adc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ade:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ae0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001ae4:	f7fe fb8c 	bl	8000200 <__aeabi_uldivmod>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4613      	mov	r3, r2
 8001aee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001af0:	e058      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001af2:	4b38      	ldr	r3, [pc, #224]	@ (8001bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	099b      	lsrs	r3, r3, #6
 8001af8:	2200      	movs	r2, #0
 8001afa:	4618      	mov	r0, r3
 8001afc:	4611      	mov	r1, r2
 8001afe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b02:	623b      	str	r3, [r7, #32]
 8001b04:	2300      	movs	r3, #0
 8001b06:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b0c:	4642      	mov	r2, r8
 8001b0e:	464b      	mov	r3, r9
 8001b10:	f04f 0000 	mov.w	r0, #0
 8001b14:	f04f 0100 	mov.w	r1, #0
 8001b18:	0159      	lsls	r1, r3, #5
 8001b1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b1e:	0150      	lsls	r0, r2, #5
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4641      	mov	r1, r8
 8001b26:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b2a:	4649      	mov	r1, r9
 8001b2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b30:	f04f 0200 	mov.w	r2, #0
 8001b34:	f04f 0300 	mov.w	r3, #0
 8001b38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b44:	ebb2 040a 	subs.w	r4, r2, sl
 8001b48:	eb63 050b 	sbc.w	r5, r3, fp
 8001b4c:	f04f 0200 	mov.w	r2, #0
 8001b50:	f04f 0300 	mov.w	r3, #0
 8001b54:	00eb      	lsls	r3, r5, #3
 8001b56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b5a:	00e2      	lsls	r2, r4, #3
 8001b5c:	4614      	mov	r4, r2
 8001b5e:	461d      	mov	r5, r3
 8001b60:	4643      	mov	r3, r8
 8001b62:	18e3      	adds	r3, r4, r3
 8001b64:	603b      	str	r3, [r7, #0]
 8001b66:	464b      	mov	r3, r9
 8001b68:	eb45 0303 	adc.w	r3, r5, r3
 8001b6c:	607b      	str	r3, [r7, #4]
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	f04f 0300 	mov.w	r3, #0
 8001b76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b7a:	4629      	mov	r1, r5
 8001b7c:	028b      	lsls	r3, r1, #10
 8001b7e:	4621      	mov	r1, r4
 8001b80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b84:	4621      	mov	r1, r4
 8001b86:	028a      	lsls	r2, r1, #10
 8001b88:	4610      	mov	r0, r2
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b8e:	2200      	movs	r2, #0
 8001b90:	61bb      	str	r3, [r7, #24]
 8001b92:	61fa      	str	r2, [r7, #28]
 8001b94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b98:	f7fe fb32 	bl	8000200 <__aeabi_uldivmod>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	0c1b      	lsrs	r3, r3, #16
 8001baa:	f003 0303 	and.w	r3, r3, #3
 8001bae:	3301      	adds	r3, #1
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001bb4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001bb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bbc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001bbe:	e002      	b.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bc0:	4b05      	ldr	r3, [pc, #20]	@ (8001bd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001bc2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001bc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3750      	adds	r7, #80	@ 0x50
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	00f42400 	.word	0x00f42400
 8001bdc:	007a1200 	.word	0x007a1200

08001be0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001be4:	4b03      	ldr	r3, [pc, #12]	@ (8001bf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001be6:	681b      	ldr	r3, [r3, #0]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	20000000 	.word	0x20000000

08001bf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bfc:	f7ff fff0 	bl	8001be0 <HAL_RCC_GetHCLKFreq>
 8001c00:	4602      	mov	r2, r0
 8001c02:	4b05      	ldr	r3, [pc, #20]	@ (8001c18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	0a9b      	lsrs	r3, r3, #10
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	4903      	ldr	r1, [pc, #12]	@ (8001c1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c0e:	5ccb      	ldrb	r3, [r1, r3]
 8001c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	080053bc 	.word	0x080053bc

08001c20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c24:	f7ff ffdc 	bl	8001be0 <HAL_RCC_GetHCLKFreq>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	4b05      	ldr	r3, [pc, #20]	@ (8001c40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	0b5b      	lsrs	r3, r3, #13
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	4903      	ldr	r1, [pc, #12]	@ (8001c44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c36:	5ccb      	ldrb	r3, [r1, r3]
 8001c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40023800 	.word	0x40023800
 8001c44:	080053bc 	.word	0x080053bc

08001c48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	220f      	movs	r2, #15
 8001c56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c58:	4b12      	ldr	r3, [pc, #72]	@ (8001ca4 <HAL_RCC_GetClockConfig+0x5c>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 0203 	and.w	r2, r3, #3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c64:	4b0f      	ldr	r3, [pc, #60]	@ (8001ca4 <HAL_RCC_GetClockConfig+0x5c>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c70:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca4 <HAL_RCC_GetClockConfig+0x5c>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c7c:	4b09      	ldr	r3, [pc, #36]	@ (8001ca4 <HAL_RCC_GetClockConfig+0x5c>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	08db      	lsrs	r3, r3, #3
 8001c82:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c8a:	4b07      	ldr	r3, [pc, #28]	@ (8001ca8 <HAL_RCC_GetClockConfig+0x60>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 020f 	and.w	r2, r3, #15
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	601a      	str	r2, [r3, #0]
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40023c00 	.word	0x40023c00

08001cac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e041      	b.n	8001d42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d106      	bne.n	8001cd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 f839 	bl	8001d4a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2202      	movs	r2, #2
 8001cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3304      	adds	r3, #4
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4610      	mov	r0, r2
 8001cec:	f000 f9c0 	bl	8002070 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
	...

08001d60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d001      	beq.n	8001d78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e04e      	b.n	8001e16 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	68da      	ldr	r2, [r3, #12]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f042 0201 	orr.w	r2, r2, #1
 8001d8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a23      	ldr	r2, [pc, #140]	@ (8001e24 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d022      	beq.n	8001de0 <HAL_TIM_Base_Start_IT+0x80>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001da2:	d01d      	beq.n	8001de0 <HAL_TIM_Base_Start_IT+0x80>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a1f      	ldr	r2, [pc, #124]	@ (8001e28 <HAL_TIM_Base_Start_IT+0xc8>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d018      	beq.n	8001de0 <HAL_TIM_Base_Start_IT+0x80>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a1e      	ldr	r2, [pc, #120]	@ (8001e2c <HAL_TIM_Base_Start_IT+0xcc>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d013      	beq.n	8001de0 <HAL_TIM_Base_Start_IT+0x80>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a1c      	ldr	r2, [pc, #112]	@ (8001e30 <HAL_TIM_Base_Start_IT+0xd0>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d00e      	beq.n	8001de0 <HAL_TIM_Base_Start_IT+0x80>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a1b      	ldr	r2, [pc, #108]	@ (8001e34 <HAL_TIM_Base_Start_IT+0xd4>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d009      	beq.n	8001de0 <HAL_TIM_Base_Start_IT+0x80>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a19      	ldr	r2, [pc, #100]	@ (8001e38 <HAL_TIM_Base_Start_IT+0xd8>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d004      	beq.n	8001de0 <HAL_TIM_Base_Start_IT+0x80>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a18      	ldr	r2, [pc, #96]	@ (8001e3c <HAL_TIM_Base_Start_IT+0xdc>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d111      	bne.n	8001e04 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2b06      	cmp	r3, #6
 8001df0:	d010      	beq.n	8001e14 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f042 0201 	orr.w	r2, r2, #1
 8001e00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e02:	e007      	b.n	8001e14 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f042 0201 	orr.w	r2, r2, #1
 8001e12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	40010000 	.word	0x40010000
 8001e28:	40000400 	.word	0x40000400
 8001e2c:	40000800 	.word	0x40000800
 8001e30:	40000c00 	.word	0x40000c00
 8001e34:	40010400 	.word	0x40010400
 8001e38:	40014000 	.word	0x40014000
 8001e3c:	40001800 	.word	0x40001800

08001e40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d020      	beq.n	8001ea4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d01b      	beq.n	8001ea4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f06f 0202 	mvn.w	r2, #2
 8001e74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	f003 0303 	and.w	r3, r3, #3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f8d2 	bl	8002034 <HAL_TIM_IC_CaptureCallback>
 8001e90:	e005      	b.n	8001e9e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f8c4 	bl	8002020 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 f8d5 	bl	8002048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	f003 0304 	and.w	r3, r3, #4
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d020      	beq.n	8001ef0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d01b      	beq.n	8001ef0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f06f 0204 	mvn.w	r2, #4
 8001ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f8ac 	bl	8002034 <HAL_TIM_IC_CaptureCallback>
 8001edc:	e005      	b.n	8001eea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f89e 	bl	8002020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 f8af 	bl	8002048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d020      	beq.n	8001f3c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f003 0308 	and.w	r3, r3, #8
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d01b      	beq.n	8001f3c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f06f 0208 	mvn.w	r2, #8
 8001f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2204      	movs	r2, #4
 8001f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	f003 0303 	and.w	r3, r3, #3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f886 	bl	8002034 <HAL_TIM_IC_CaptureCallback>
 8001f28:	e005      	b.n	8001f36 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f878 	bl	8002020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 f889 	bl	8002048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f003 0310 	and.w	r3, r3, #16
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d020      	beq.n	8001f88 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f003 0310 	and.w	r3, r3, #16
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d01b      	beq.n	8001f88 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f06f 0210 	mvn.w	r2, #16
 8001f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2208      	movs	r2, #8
 8001f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f860 	bl	8002034 <HAL_TIM_IC_CaptureCallback>
 8001f74:	e005      	b.n	8001f82 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 f852 	bl	8002020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f863 	bl	8002048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00c      	beq.n	8001fac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d007      	beq.n	8001fac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f06f 0201 	mvn.w	r2, #1
 8001fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7fe fd52 	bl	8000a50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00c      	beq.n	8001fd0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d007      	beq.n	8001fd0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 f900 	bl	80021d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00c      	beq.n	8001ff4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d007      	beq.n	8001ff4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f834 	bl	800205c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	f003 0320 	and.w	r3, r3, #32
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00c      	beq.n	8002018 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f003 0320 	and.w	r3, r3, #32
 8002004:	2b00      	cmp	r3, #0
 8002006:	d007      	beq.n	8002018 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f06f 0220 	mvn.w	r2, #32
 8002010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f8d2 	bl	80021bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002018:	bf00      	nop
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a43      	ldr	r2, [pc, #268]	@ (8002190 <TIM_Base_SetConfig+0x120>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d013      	beq.n	80020b0 <TIM_Base_SetConfig+0x40>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800208e:	d00f      	beq.n	80020b0 <TIM_Base_SetConfig+0x40>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a40      	ldr	r2, [pc, #256]	@ (8002194 <TIM_Base_SetConfig+0x124>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d00b      	beq.n	80020b0 <TIM_Base_SetConfig+0x40>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a3f      	ldr	r2, [pc, #252]	@ (8002198 <TIM_Base_SetConfig+0x128>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d007      	beq.n	80020b0 <TIM_Base_SetConfig+0x40>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a3e      	ldr	r2, [pc, #248]	@ (800219c <TIM_Base_SetConfig+0x12c>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d003      	beq.n	80020b0 <TIM_Base_SetConfig+0x40>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a3d      	ldr	r2, [pc, #244]	@ (80021a0 <TIM_Base_SetConfig+0x130>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d108      	bne.n	80020c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	4313      	orrs	r3, r2
 80020c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a32      	ldr	r2, [pc, #200]	@ (8002190 <TIM_Base_SetConfig+0x120>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d02b      	beq.n	8002122 <TIM_Base_SetConfig+0xb2>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020d0:	d027      	beq.n	8002122 <TIM_Base_SetConfig+0xb2>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a2f      	ldr	r2, [pc, #188]	@ (8002194 <TIM_Base_SetConfig+0x124>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d023      	beq.n	8002122 <TIM_Base_SetConfig+0xb2>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a2e      	ldr	r2, [pc, #184]	@ (8002198 <TIM_Base_SetConfig+0x128>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d01f      	beq.n	8002122 <TIM_Base_SetConfig+0xb2>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a2d      	ldr	r2, [pc, #180]	@ (800219c <TIM_Base_SetConfig+0x12c>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d01b      	beq.n	8002122 <TIM_Base_SetConfig+0xb2>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a2c      	ldr	r2, [pc, #176]	@ (80021a0 <TIM_Base_SetConfig+0x130>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d017      	beq.n	8002122 <TIM_Base_SetConfig+0xb2>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a2b      	ldr	r2, [pc, #172]	@ (80021a4 <TIM_Base_SetConfig+0x134>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d013      	beq.n	8002122 <TIM_Base_SetConfig+0xb2>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a2a      	ldr	r2, [pc, #168]	@ (80021a8 <TIM_Base_SetConfig+0x138>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d00f      	beq.n	8002122 <TIM_Base_SetConfig+0xb2>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a29      	ldr	r2, [pc, #164]	@ (80021ac <TIM_Base_SetConfig+0x13c>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d00b      	beq.n	8002122 <TIM_Base_SetConfig+0xb2>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a28      	ldr	r2, [pc, #160]	@ (80021b0 <TIM_Base_SetConfig+0x140>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d007      	beq.n	8002122 <TIM_Base_SetConfig+0xb2>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a27      	ldr	r2, [pc, #156]	@ (80021b4 <TIM_Base_SetConfig+0x144>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d003      	beq.n	8002122 <TIM_Base_SetConfig+0xb2>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a26      	ldr	r2, [pc, #152]	@ (80021b8 <TIM_Base_SetConfig+0x148>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d108      	bne.n	8002134 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002128:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	4313      	orrs	r3, r2
 8002132:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	4313      	orrs	r3, r2
 8002140:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	689a      	ldr	r2, [r3, #8]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a0e      	ldr	r2, [pc, #56]	@ (8002190 <TIM_Base_SetConfig+0x120>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d003      	beq.n	8002162 <TIM_Base_SetConfig+0xf2>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a10      	ldr	r2, [pc, #64]	@ (80021a0 <TIM_Base_SetConfig+0x130>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d103      	bne.n	800216a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	691a      	ldr	r2, [r3, #16]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f043 0204 	orr.w	r2, r3, #4
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	601a      	str	r2, [r3, #0]
}
 8002182:	bf00      	nop
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	40010000 	.word	0x40010000
 8002194:	40000400 	.word	0x40000400
 8002198:	40000800 	.word	0x40000800
 800219c:	40000c00 	.word	0x40000c00
 80021a0:	40010400 	.word	0x40010400
 80021a4:	40014000 	.word	0x40014000
 80021a8:	40014400 	.word	0x40014400
 80021ac:	40014800 	.word	0x40014800
 80021b0:	40001800 	.word	0x40001800
 80021b4:	40001c00 	.word	0x40001c00
 80021b8:	40002000 	.word	0x40002000

080021bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e042      	b.n	800227c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d106      	bne.n	8002210 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7fe fc64 	bl	8000ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2224      	movs	r2, #36	@ 0x24
 8002214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68da      	ldr	r2, [r3, #12]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002226:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 f973 	bl	8002514 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	691a      	ldr	r2, [r3, #16]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800223c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	695a      	ldr	r2, [r3, #20]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800224c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68da      	ldr	r2, [r3, #12]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800225c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2220      	movs	r2, #32
 8002268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2220      	movs	r2, #32
 8002270:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b08a      	sub	sp, #40	@ 0x28
 8002288:	af02      	add	r7, sp, #8
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	603b      	str	r3, [r7, #0]
 8002290:	4613      	mov	r3, r2
 8002292:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b20      	cmp	r3, #32
 80022a2:	d175      	bne.n	8002390 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d002      	beq.n	80022b0 <HAL_UART_Transmit+0x2c>
 80022aa:	88fb      	ldrh	r3, [r7, #6]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d101      	bne.n	80022b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e06e      	b.n	8002392 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2221      	movs	r2, #33	@ 0x21
 80022be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022c2:	f7fe fd5d 	bl	8000d80 <HAL_GetTick>
 80022c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	88fa      	ldrh	r2, [r7, #6]
 80022cc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	88fa      	ldrh	r2, [r7, #6]
 80022d2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022dc:	d108      	bne.n	80022f0 <HAL_UART_Transmit+0x6c>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d104      	bne.n	80022f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	61bb      	str	r3, [r7, #24]
 80022ee:	e003      	b.n	80022f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022f4:	2300      	movs	r3, #0
 80022f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80022f8:	e02e      	b.n	8002358 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	9300      	str	r3, [sp, #0]
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	2200      	movs	r2, #0
 8002302:	2180      	movs	r1, #128	@ 0x80
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f000 f848 	bl	800239a <UART_WaitOnFlagUntilTimeout>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d005      	beq.n	800231c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2220      	movs	r2, #32
 8002314:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e03a      	b.n	8002392 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10b      	bne.n	800233a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	881b      	ldrh	r3, [r3, #0]
 8002326:	461a      	mov	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002330:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	3302      	adds	r3, #2
 8002336:	61bb      	str	r3, [r7, #24]
 8002338:	e007      	b.n	800234a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	781a      	ldrb	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	3301      	adds	r3, #1
 8002348:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800234e:	b29b      	uxth	r3, r3
 8002350:	3b01      	subs	r3, #1
 8002352:	b29a      	uxth	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800235c:	b29b      	uxth	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1cb      	bne.n	80022fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	2200      	movs	r2, #0
 800236a:	2140      	movs	r1, #64	@ 0x40
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f000 f814 	bl	800239a <UART_WaitOnFlagUntilTimeout>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d005      	beq.n	8002384 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2220      	movs	r2, #32
 800237c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e006      	b.n	8002392 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2220      	movs	r2, #32
 8002388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800238c:	2300      	movs	r3, #0
 800238e:	e000      	b.n	8002392 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002390:	2302      	movs	r3, #2
  }
}
 8002392:	4618      	mov	r0, r3
 8002394:	3720      	adds	r7, #32
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b086      	sub	sp, #24
 800239e:	af00      	add	r7, sp, #0
 80023a0:	60f8      	str	r0, [r7, #12]
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	603b      	str	r3, [r7, #0]
 80023a6:	4613      	mov	r3, r2
 80023a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023aa:	e03b      	b.n	8002424 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023ac:	6a3b      	ldr	r3, [r7, #32]
 80023ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b2:	d037      	beq.n	8002424 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023b4:	f7fe fce4 	bl	8000d80 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	6a3a      	ldr	r2, [r7, #32]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d302      	bcc.n	80023ca <UART_WaitOnFlagUntilTimeout+0x30>
 80023c4:	6a3b      	ldr	r3, [r7, #32]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e03a      	b.n	8002444 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d023      	beq.n	8002424 <UART_WaitOnFlagUntilTimeout+0x8a>
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	2b80      	cmp	r3, #128	@ 0x80
 80023e0:	d020      	beq.n	8002424 <UART_WaitOnFlagUntilTimeout+0x8a>
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	2b40      	cmp	r3, #64	@ 0x40
 80023e6:	d01d      	beq.n	8002424 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0308 	and.w	r3, r3, #8
 80023f2:	2b08      	cmp	r3, #8
 80023f4:	d116      	bne.n	8002424 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80023f6:	2300      	movs	r3, #0
 80023f8:	617b      	str	r3, [r7, #20]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	617b      	str	r3, [r7, #20]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	617b      	str	r3, [r7, #20]
 800240a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f000 f81d 	bl	800244c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2208      	movs	r2, #8
 8002416:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e00f      	b.n	8002444 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	4013      	ands	r3, r2
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	429a      	cmp	r2, r3
 8002432:	bf0c      	ite	eq
 8002434:	2301      	moveq	r3, #1
 8002436:	2300      	movne	r3, #0
 8002438:	b2db      	uxtb	r3, r3
 800243a:	461a      	mov	r2, r3
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	429a      	cmp	r2, r3
 8002440:	d0b4      	beq.n	80023ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3718      	adds	r7, #24
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800244c:	b480      	push	{r7}
 800244e:	b095      	sub	sp, #84	@ 0x54
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	330c      	adds	r3, #12
 800245a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800245c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800245e:	e853 3f00 	ldrex	r3, [r3]
 8002462:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002466:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800246a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	330c      	adds	r3, #12
 8002472:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002474:	643a      	str	r2, [r7, #64]	@ 0x40
 8002476:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002478:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800247a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800247c:	e841 2300 	strex	r3, r2, [r1]
 8002480:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1e5      	bne.n	8002454 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	3314      	adds	r3, #20
 800248e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002490:	6a3b      	ldr	r3, [r7, #32]
 8002492:	e853 3f00 	ldrex	r3, [r3]
 8002496:	61fb      	str	r3, [r7, #28]
   return(result);
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	f023 0301 	bic.w	r3, r3, #1
 800249e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	3314      	adds	r3, #20
 80024a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80024a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80024aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80024ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024b0:	e841 2300 	strex	r3, r2, [r1]
 80024b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80024b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1e5      	bne.n	8002488 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d119      	bne.n	80024f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	330c      	adds	r3, #12
 80024ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	e853 3f00 	ldrex	r3, [r3]
 80024d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	f023 0310 	bic.w	r3, r3, #16
 80024da:	647b      	str	r3, [r7, #68]	@ 0x44
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	330c      	adds	r3, #12
 80024e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80024e4:	61ba      	str	r2, [r7, #24]
 80024e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024e8:	6979      	ldr	r1, [r7, #20]
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	e841 2300 	strex	r3, r2, [r1]
 80024f0:	613b      	str	r3, [r7, #16]
   return(result);
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1e5      	bne.n	80024c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2220      	movs	r2, #32
 80024fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002506:	bf00      	nop
 8002508:	3754      	adds	r7, #84	@ 0x54
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
	...

08002514 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002518:	b0c0      	sub	sp, #256	@ 0x100
 800251a:	af00      	add	r7, sp, #0
 800251c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800252c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002530:	68d9      	ldr	r1, [r3, #12]
 8002532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	ea40 0301 	orr.w	r3, r0, r1
 800253c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800253e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002542:	689a      	ldr	r2, [r3, #8]
 8002544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	431a      	orrs	r2, r3
 800254c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	431a      	orrs	r2, r3
 8002554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	4313      	orrs	r3, r2
 800255c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800256c:	f021 010c 	bic.w	r1, r1, #12
 8002570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800257a:	430b      	orrs	r3, r1
 800257c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800257e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800258a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800258e:	6999      	ldr	r1, [r3, #24]
 8002590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	ea40 0301 	orr.w	r3, r0, r1
 800259a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800259c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	4b8f      	ldr	r3, [pc, #572]	@ (80027e0 <UART_SetConfig+0x2cc>)
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d005      	beq.n	80025b4 <UART_SetConfig+0xa0>
 80025a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	4b8d      	ldr	r3, [pc, #564]	@ (80027e4 <UART_SetConfig+0x2d0>)
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d104      	bne.n	80025be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80025b4:	f7ff fb34 	bl	8001c20 <HAL_RCC_GetPCLK2Freq>
 80025b8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80025bc:	e003      	b.n	80025c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80025be:	f7ff fb1b 	bl	8001bf8 <HAL_RCC_GetPCLK1Freq>
 80025c2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025ca:	69db      	ldr	r3, [r3, #28]
 80025cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80025d0:	f040 810c 	bne.w	80027ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80025d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025d8:	2200      	movs	r2, #0
 80025da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80025de:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80025e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80025e6:	4622      	mov	r2, r4
 80025e8:	462b      	mov	r3, r5
 80025ea:	1891      	adds	r1, r2, r2
 80025ec:	65b9      	str	r1, [r7, #88]	@ 0x58
 80025ee:	415b      	adcs	r3, r3
 80025f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80025f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80025f6:	4621      	mov	r1, r4
 80025f8:	eb12 0801 	adds.w	r8, r2, r1
 80025fc:	4629      	mov	r1, r5
 80025fe:	eb43 0901 	adc.w	r9, r3, r1
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	f04f 0300 	mov.w	r3, #0
 800260a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800260e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002612:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002616:	4690      	mov	r8, r2
 8002618:	4699      	mov	r9, r3
 800261a:	4623      	mov	r3, r4
 800261c:	eb18 0303 	adds.w	r3, r8, r3
 8002620:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002624:	462b      	mov	r3, r5
 8002626:	eb49 0303 	adc.w	r3, r9, r3
 800262a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800262e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800263a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800263e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002642:	460b      	mov	r3, r1
 8002644:	18db      	adds	r3, r3, r3
 8002646:	653b      	str	r3, [r7, #80]	@ 0x50
 8002648:	4613      	mov	r3, r2
 800264a:	eb42 0303 	adc.w	r3, r2, r3
 800264e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002650:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002654:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002658:	f7fd fdd2 	bl	8000200 <__aeabi_uldivmod>
 800265c:	4602      	mov	r2, r0
 800265e:	460b      	mov	r3, r1
 8002660:	4b61      	ldr	r3, [pc, #388]	@ (80027e8 <UART_SetConfig+0x2d4>)
 8002662:	fba3 2302 	umull	r2, r3, r3, r2
 8002666:	095b      	lsrs	r3, r3, #5
 8002668:	011c      	lsls	r4, r3, #4
 800266a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800266e:	2200      	movs	r2, #0
 8002670:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002674:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002678:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800267c:	4642      	mov	r2, r8
 800267e:	464b      	mov	r3, r9
 8002680:	1891      	adds	r1, r2, r2
 8002682:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002684:	415b      	adcs	r3, r3
 8002686:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002688:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800268c:	4641      	mov	r1, r8
 800268e:	eb12 0a01 	adds.w	sl, r2, r1
 8002692:	4649      	mov	r1, r9
 8002694:	eb43 0b01 	adc.w	fp, r3, r1
 8002698:	f04f 0200 	mov.w	r2, #0
 800269c:	f04f 0300 	mov.w	r3, #0
 80026a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026ac:	4692      	mov	sl, r2
 80026ae:	469b      	mov	fp, r3
 80026b0:	4643      	mov	r3, r8
 80026b2:	eb1a 0303 	adds.w	r3, sl, r3
 80026b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80026ba:	464b      	mov	r3, r9
 80026bc:	eb4b 0303 	adc.w	r3, fp, r3
 80026c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80026c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80026d0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80026d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80026d8:	460b      	mov	r3, r1
 80026da:	18db      	adds	r3, r3, r3
 80026dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80026de:	4613      	mov	r3, r2
 80026e0:	eb42 0303 	adc.w	r3, r2, r3
 80026e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80026e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80026ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80026ee:	f7fd fd87 	bl	8000200 <__aeabi_uldivmod>
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	4611      	mov	r1, r2
 80026f8:	4b3b      	ldr	r3, [pc, #236]	@ (80027e8 <UART_SetConfig+0x2d4>)
 80026fa:	fba3 2301 	umull	r2, r3, r3, r1
 80026fe:	095b      	lsrs	r3, r3, #5
 8002700:	2264      	movs	r2, #100	@ 0x64
 8002702:	fb02 f303 	mul.w	r3, r2, r3
 8002706:	1acb      	subs	r3, r1, r3
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800270e:	4b36      	ldr	r3, [pc, #216]	@ (80027e8 <UART_SetConfig+0x2d4>)
 8002710:	fba3 2302 	umull	r2, r3, r3, r2
 8002714:	095b      	lsrs	r3, r3, #5
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800271c:	441c      	add	r4, r3
 800271e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002722:	2200      	movs	r2, #0
 8002724:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002728:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800272c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002730:	4642      	mov	r2, r8
 8002732:	464b      	mov	r3, r9
 8002734:	1891      	adds	r1, r2, r2
 8002736:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002738:	415b      	adcs	r3, r3
 800273a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800273c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002740:	4641      	mov	r1, r8
 8002742:	1851      	adds	r1, r2, r1
 8002744:	6339      	str	r1, [r7, #48]	@ 0x30
 8002746:	4649      	mov	r1, r9
 8002748:	414b      	adcs	r3, r1
 800274a:	637b      	str	r3, [r7, #52]	@ 0x34
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	f04f 0300 	mov.w	r3, #0
 8002754:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002758:	4659      	mov	r1, fp
 800275a:	00cb      	lsls	r3, r1, #3
 800275c:	4651      	mov	r1, sl
 800275e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002762:	4651      	mov	r1, sl
 8002764:	00ca      	lsls	r2, r1, #3
 8002766:	4610      	mov	r0, r2
 8002768:	4619      	mov	r1, r3
 800276a:	4603      	mov	r3, r0
 800276c:	4642      	mov	r2, r8
 800276e:	189b      	adds	r3, r3, r2
 8002770:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002774:	464b      	mov	r3, r9
 8002776:	460a      	mov	r2, r1
 8002778:	eb42 0303 	adc.w	r3, r2, r3
 800277c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800278c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002790:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002794:	460b      	mov	r3, r1
 8002796:	18db      	adds	r3, r3, r3
 8002798:	62bb      	str	r3, [r7, #40]	@ 0x28
 800279a:	4613      	mov	r3, r2
 800279c:	eb42 0303 	adc.w	r3, r2, r3
 80027a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80027a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80027aa:	f7fd fd29 	bl	8000200 <__aeabi_uldivmod>
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	4b0d      	ldr	r3, [pc, #52]	@ (80027e8 <UART_SetConfig+0x2d4>)
 80027b4:	fba3 1302 	umull	r1, r3, r3, r2
 80027b8:	095b      	lsrs	r3, r3, #5
 80027ba:	2164      	movs	r1, #100	@ 0x64
 80027bc:	fb01 f303 	mul.w	r3, r1, r3
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	3332      	adds	r3, #50	@ 0x32
 80027c6:	4a08      	ldr	r2, [pc, #32]	@ (80027e8 <UART_SetConfig+0x2d4>)
 80027c8:	fba2 2303 	umull	r2, r3, r2, r3
 80027cc:	095b      	lsrs	r3, r3, #5
 80027ce:	f003 0207 	and.w	r2, r3, #7
 80027d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4422      	add	r2, r4
 80027da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80027dc:	e106      	b.n	80029ec <UART_SetConfig+0x4d8>
 80027de:	bf00      	nop
 80027e0:	40011000 	.word	0x40011000
 80027e4:	40011400 	.word	0x40011400
 80027e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027f0:	2200      	movs	r2, #0
 80027f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80027f6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80027fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80027fe:	4642      	mov	r2, r8
 8002800:	464b      	mov	r3, r9
 8002802:	1891      	adds	r1, r2, r2
 8002804:	6239      	str	r1, [r7, #32]
 8002806:	415b      	adcs	r3, r3
 8002808:	627b      	str	r3, [r7, #36]	@ 0x24
 800280a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800280e:	4641      	mov	r1, r8
 8002810:	1854      	adds	r4, r2, r1
 8002812:	4649      	mov	r1, r9
 8002814:	eb43 0501 	adc.w	r5, r3, r1
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	f04f 0300 	mov.w	r3, #0
 8002820:	00eb      	lsls	r3, r5, #3
 8002822:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002826:	00e2      	lsls	r2, r4, #3
 8002828:	4614      	mov	r4, r2
 800282a:	461d      	mov	r5, r3
 800282c:	4643      	mov	r3, r8
 800282e:	18e3      	adds	r3, r4, r3
 8002830:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002834:	464b      	mov	r3, r9
 8002836:	eb45 0303 	adc.w	r3, r5, r3
 800283a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800283e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800284a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800284e:	f04f 0200 	mov.w	r2, #0
 8002852:	f04f 0300 	mov.w	r3, #0
 8002856:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800285a:	4629      	mov	r1, r5
 800285c:	008b      	lsls	r3, r1, #2
 800285e:	4621      	mov	r1, r4
 8002860:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002864:	4621      	mov	r1, r4
 8002866:	008a      	lsls	r2, r1, #2
 8002868:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800286c:	f7fd fcc8 	bl	8000200 <__aeabi_uldivmod>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	4b60      	ldr	r3, [pc, #384]	@ (80029f8 <UART_SetConfig+0x4e4>)
 8002876:	fba3 2302 	umull	r2, r3, r3, r2
 800287a:	095b      	lsrs	r3, r3, #5
 800287c:	011c      	lsls	r4, r3, #4
 800287e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002882:	2200      	movs	r2, #0
 8002884:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002888:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800288c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002890:	4642      	mov	r2, r8
 8002892:	464b      	mov	r3, r9
 8002894:	1891      	adds	r1, r2, r2
 8002896:	61b9      	str	r1, [r7, #24]
 8002898:	415b      	adcs	r3, r3
 800289a:	61fb      	str	r3, [r7, #28]
 800289c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028a0:	4641      	mov	r1, r8
 80028a2:	1851      	adds	r1, r2, r1
 80028a4:	6139      	str	r1, [r7, #16]
 80028a6:	4649      	mov	r1, r9
 80028a8:	414b      	adcs	r3, r1
 80028aa:	617b      	str	r3, [r7, #20]
 80028ac:	f04f 0200 	mov.w	r2, #0
 80028b0:	f04f 0300 	mov.w	r3, #0
 80028b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028b8:	4659      	mov	r1, fp
 80028ba:	00cb      	lsls	r3, r1, #3
 80028bc:	4651      	mov	r1, sl
 80028be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028c2:	4651      	mov	r1, sl
 80028c4:	00ca      	lsls	r2, r1, #3
 80028c6:	4610      	mov	r0, r2
 80028c8:	4619      	mov	r1, r3
 80028ca:	4603      	mov	r3, r0
 80028cc:	4642      	mov	r2, r8
 80028ce:	189b      	adds	r3, r3, r2
 80028d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80028d4:	464b      	mov	r3, r9
 80028d6:	460a      	mov	r2, r1
 80028d8:	eb42 0303 	adc.w	r3, r2, r3
 80028dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80028e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80028ea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80028ec:	f04f 0200 	mov.w	r2, #0
 80028f0:	f04f 0300 	mov.w	r3, #0
 80028f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80028f8:	4649      	mov	r1, r9
 80028fa:	008b      	lsls	r3, r1, #2
 80028fc:	4641      	mov	r1, r8
 80028fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002902:	4641      	mov	r1, r8
 8002904:	008a      	lsls	r2, r1, #2
 8002906:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800290a:	f7fd fc79 	bl	8000200 <__aeabi_uldivmod>
 800290e:	4602      	mov	r2, r0
 8002910:	460b      	mov	r3, r1
 8002912:	4611      	mov	r1, r2
 8002914:	4b38      	ldr	r3, [pc, #224]	@ (80029f8 <UART_SetConfig+0x4e4>)
 8002916:	fba3 2301 	umull	r2, r3, r3, r1
 800291a:	095b      	lsrs	r3, r3, #5
 800291c:	2264      	movs	r2, #100	@ 0x64
 800291e:	fb02 f303 	mul.w	r3, r2, r3
 8002922:	1acb      	subs	r3, r1, r3
 8002924:	011b      	lsls	r3, r3, #4
 8002926:	3332      	adds	r3, #50	@ 0x32
 8002928:	4a33      	ldr	r2, [pc, #204]	@ (80029f8 <UART_SetConfig+0x4e4>)
 800292a:	fba2 2303 	umull	r2, r3, r2, r3
 800292e:	095b      	lsrs	r3, r3, #5
 8002930:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002934:	441c      	add	r4, r3
 8002936:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800293a:	2200      	movs	r2, #0
 800293c:	673b      	str	r3, [r7, #112]	@ 0x70
 800293e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002940:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002944:	4642      	mov	r2, r8
 8002946:	464b      	mov	r3, r9
 8002948:	1891      	adds	r1, r2, r2
 800294a:	60b9      	str	r1, [r7, #8]
 800294c:	415b      	adcs	r3, r3
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002954:	4641      	mov	r1, r8
 8002956:	1851      	adds	r1, r2, r1
 8002958:	6039      	str	r1, [r7, #0]
 800295a:	4649      	mov	r1, r9
 800295c:	414b      	adcs	r3, r1
 800295e:	607b      	str	r3, [r7, #4]
 8002960:	f04f 0200 	mov.w	r2, #0
 8002964:	f04f 0300 	mov.w	r3, #0
 8002968:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800296c:	4659      	mov	r1, fp
 800296e:	00cb      	lsls	r3, r1, #3
 8002970:	4651      	mov	r1, sl
 8002972:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002976:	4651      	mov	r1, sl
 8002978:	00ca      	lsls	r2, r1, #3
 800297a:	4610      	mov	r0, r2
 800297c:	4619      	mov	r1, r3
 800297e:	4603      	mov	r3, r0
 8002980:	4642      	mov	r2, r8
 8002982:	189b      	adds	r3, r3, r2
 8002984:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002986:	464b      	mov	r3, r9
 8002988:	460a      	mov	r2, r1
 800298a:	eb42 0303 	adc.w	r3, r2, r3
 800298e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	663b      	str	r3, [r7, #96]	@ 0x60
 800299a:	667a      	str	r2, [r7, #100]	@ 0x64
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	f04f 0300 	mov.w	r3, #0
 80029a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80029a8:	4649      	mov	r1, r9
 80029aa:	008b      	lsls	r3, r1, #2
 80029ac:	4641      	mov	r1, r8
 80029ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029b2:	4641      	mov	r1, r8
 80029b4:	008a      	lsls	r2, r1, #2
 80029b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80029ba:	f7fd fc21 	bl	8000200 <__aeabi_uldivmod>
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	4b0d      	ldr	r3, [pc, #52]	@ (80029f8 <UART_SetConfig+0x4e4>)
 80029c4:	fba3 1302 	umull	r1, r3, r3, r2
 80029c8:	095b      	lsrs	r3, r3, #5
 80029ca:	2164      	movs	r1, #100	@ 0x64
 80029cc:	fb01 f303 	mul.w	r3, r1, r3
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	011b      	lsls	r3, r3, #4
 80029d4:	3332      	adds	r3, #50	@ 0x32
 80029d6:	4a08      	ldr	r2, [pc, #32]	@ (80029f8 <UART_SetConfig+0x4e4>)
 80029d8:	fba2 2303 	umull	r2, r3, r2, r3
 80029dc:	095b      	lsrs	r3, r3, #5
 80029de:	f003 020f 	and.w	r2, r3, #15
 80029e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4422      	add	r2, r4
 80029ea:	609a      	str	r2, [r3, #8]
}
 80029ec:	bf00      	nop
 80029ee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80029f2:	46bd      	mov	sp, r7
 80029f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029f8:	51eb851f 	.word	0x51eb851f

080029fc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002a06:	2300      	movs	r3, #0
 8002a08:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002a0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a0e:	2b84      	cmp	r3, #132	@ 0x84
 8002a10:	d005      	beq.n	8002a1e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002a12:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	4413      	add	r3, r2
 8002a1a:	3303      	adds	r3, #3
 8002a1c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a32:	f3ef 8305 	mrs	r3, IPSR
 8002a36:	607b      	str	r3, [r7, #4]
  return(result);
 8002a38:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	bf14      	ite	ne
 8002a3e:	2301      	movne	r3, #1
 8002a40:	2300      	moveq	r3, #0
 8002a42:	b2db      	uxtb	r3, r3
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002a54:	f001 f92a 	bl	8003cac <vTaskStartScheduler>
  
  return osOK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002a5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a60:	b089      	sub	sp, #36	@ 0x24
 8002a62:	af04      	add	r7, sp, #16
 8002a64:	6078      	str	r0, [r7, #4]
 8002a66:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d020      	beq.n	8002ab2 <osThreadCreate+0x54>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d01c      	beq.n	8002ab2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685c      	ldr	r4, [r3, #4]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	691e      	ldr	r6, [r3, #16]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff ffb6 	bl	80029fc <makeFreeRtosPriority>
 8002a90:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a9a:	9202      	str	r2, [sp, #8]
 8002a9c:	9301      	str	r3, [sp, #4]
 8002a9e:	9100      	str	r1, [sp, #0]
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	4632      	mov	r2, r6
 8002aa4:	4629      	mov	r1, r5
 8002aa6:	4620      	mov	r0, r4
 8002aa8:	f000 ff32 	bl	8003910 <xTaskCreateStatic>
 8002aac:	4603      	mov	r3, r0
 8002aae:	60fb      	str	r3, [r7, #12]
 8002ab0:	e01c      	b.n	8002aec <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685c      	ldr	r4, [r3, #4]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002abe:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff ff98 	bl	80029fc <makeFreeRtosPriority>
 8002acc:	4602      	mov	r2, r0
 8002ace:	f107 030c 	add.w	r3, r7, #12
 8002ad2:	9301      	str	r3, [sp, #4]
 8002ad4:	9200      	str	r2, [sp, #0]
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	4632      	mov	r2, r6
 8002ada:	4629      	mov	r1, r5
 8002adc:	4620      	mov	r0, r4
 8002ade:	f000 ff77 	bl	80039d0 <xTaskCreate>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d001      	beq.n	8002aec <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	e000      	b.n	8002aee <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002aec:	68fb      	ldr	r3, [r7, #12]
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3714      	adds	r7, #20
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002af6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b084      	sub	sp, #16
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <osDelay+0x16>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	e000      	b.n	8002b0e <osDelay+0x18>
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f001 f896 	bl	8003c40 <vTaskDelay>
  
  return osOK;
 8002b14:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b086      	sub	sp, #24
 8002b22:	af02      	add	r7, sp, #8
 8002b24:	6078      	str	r0, [r7, #4]
 8002b26:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00f      	beq.n	8002b50 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d10a      	bne.n	8002b4c <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	2203      	movs	r2, #3
 8002b3c:	9200      	str	r2, [sp, #0]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	2100      	movs	r1, #0
 8002b42:	2001      	movs	r0, #1
 8002b44:	f000 f9c0 	bl	8002ec8 <xQueueGenericCreateStatic>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	e016      	b.n	8002b7a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	e014      	b.n	8002b7a <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d110      	bne.n	8002b78 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8002b56:	2203      	movs	r2, #3
 8002b58:	2100      	movs	r1, #0
 8002b5a:	2001      	movs	r0, #1
 8002b5c:	f000 fa31 	bl	8002fc2 <xQueueGenericCreate>
 8002b60:	60f8      	str	r0, [r7, #12]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d005      	beq.n	8002b74 <osSemaphoreCreate+0x56>
 8002b68:	2300      	movs	r3, #0
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 fa82 	bl	8003078 <xQueueGenericSend>
      return sema;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	e000      	b.n	8002b7a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8002b78:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
	...

08002b84 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d101      	bne.n	8002b9c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8002b98:	2380      	movs	r3, #128	@ 0x80
 8002b9a:	e03a      	b.n	8002c12 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba6:	d103      	bne.n	8002bb0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8002ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8002bac:	60fb      	str	r3, [r7, #12]
 8002bae:	e009      	b.n	8002bc4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d006      	beq.n	8002bc4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d101      	bne.n	8002bc4 <osSemaphoreWait+0x40>
      ticks = 1;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8002bc4:	f7ff ff32 	bl	8002a2c <inHandlerMode>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d017      	beq.n	8002bfe <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002bce:	f107 0308 	add.w	r3, r7, #8
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 fcf0 	bl	80035bc <xQueueReceiveFromISR>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d001      	beq.n	8002be6 <osSemaphoreWait+0x62>
      return osErrorOS;
 8002be2:	23ff      	movs	r3, #255	@ 0xff
 8002be4:	e015      	b.n	8002c12 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d011      	beq.n	8002c10 <osSemaphoreWait+0x8c>
 8002bec:	4b0b      	ldr	r3, [pc, #44]	@ (8002c1c <osSemaphoreWait+0x98>)
 8002bee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	f3bf 8f4f 	dsb	sy
 8002bf8:	f3bf 8f6f 	isb	sy
 8002bfc:	e008      	b.n	8002c10 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8002bfe:	68f9      	ldr	r1, [r7, #12]
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 fbcb 	bl	800339c <xQueueSemaphoreTake>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d001      	beq.n	8002c10 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8002c0c:	23ff      	movs	r3, #255	@ 0xff
 8002c0e:	e000      	b.n	8002c12 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	e000ed04 	.word	0xe000ed04

08002c20 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8002c30:	f7ff fefc 	bl	8002a2c <inHandlerMode>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d016      	beq.n	8002c68 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002c3a:	f107 0308 	add.w	r3, r7, #8
 8002c3e:	4619      	mov	r1, r3
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 fb1b 	bl	800327c <xQueueGiveFromISR>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d001      	beq.n	8002c50 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8002c4c:	23ff      	movs	r3, #255	@ 0xff
 8002c4e:	e017      	b.n	8002c80 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d013      	beq.n	8002c7e <osSemaphoreRelease+0x5e>
 8002c56:	4b0c      	ldr	r3, [pc, #48]	@ (8002c88 <osSemaphoreRelease+0x68>)
 8002c58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c5c:	601a      	str	r2, [r3, #0]
 8002c5e:	f3bf 8f4f 	dsb	sy
 8002c62:	f3bf 8f6f 	isb	sy
 8002c66:	e00a      	b.n	8002c7e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8002c68:	2300      	movs	r3, #0
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 fa02 	bl	8003078 <xQueueGenericSend>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d001      	beq.n	8002c7e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8002c7a:	23ff      	movs	r3, #255	@ 0xff
 8002c7c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	e000ed04 	.word	0xe000ed04

08002c8c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f103 0208 	add.w	r2, r3, #8
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ca4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f103 0208 	add.w	r2, r3, #8
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f103 0208 	add.w	r2, r3, #8
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b085      	sub	sp, #20
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
 8002cee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	1c5a      	adds	r2, r3, #1
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	601a      	str	r2, [r3, #0]
}
 8002d22:	bf00      	nop
 8002d24:	3714      	adds	r7, #20
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b085      	sub	sp, #20
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
 8002d36:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d44:	d103      	bne.n	8002d4e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	e00c      	b.n	8002d68 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	3308      	adds	r3, #8
 8002d52:	60fb      	str	r3, [r7, #12]
 8002d54:	e002      	b.n	8002d5c <vListInsert+0x2e>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	60fb      	str	r3, [r7, #12]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68ba      	ldr	r2, [r7, #8]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d2f6      	bcs.n	8002d56 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	1c5a      	adds	r2, r3, #1
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	601a      	str	r2, [r3, #0]
}
 8002d94:	bf00      	nop
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	6892      	ldr	r2, [r2, #8]
 8002db6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	6852      	ldr	r2, [r2, #4]
 8002dc0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d103      	bne.n	8002dd4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	1e5a      	subs	r2, r3, #1
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10b      	bne.n	8002e20 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e0c:	f383 8811 	msr	BASEPRI, r3
 8002e10:	f3bf 8f6f 	isb	sy
 8002e14:	f3bf 8f4f 	dsb	sy
 8002e18:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002e1a:	bf00      	nop
 8002e1c:	bf00      	nop
 8002e1e:	e7fd      	b.n	8002e1c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002e20:	f001 fea2 	bl	8004b68 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e2c:	68f9      	ldr	r1, [r7, #12]
 8002e2e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002e30:	fb01 f303 	mul.w	r3, r1, r3
 8002e34:	441a      	add	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e50:	3b01      	subs	r3, #1
 8002e52:	68f9      	ldr	r1, [r7, #12]
 8002e54:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002e56:	fb01 f303 	mul.w	r3, r1, r3
 8002e5a:	441a      	add	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	22ff      	movs	r2, #255	@ 0xff
 8002e64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	22ff      	movs	r2, #255	@ 0xff
 8002e6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d114      	bne.n	8002ea0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d01a      	beq.n	8002eb4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	3310      	adds	r3, #16
 8002e82:	4618      	mov	r0, r3
 8002e84:	f001 f95c 	bl	8004140 <xTaskRemoveFromEventList>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d012      	beq.n	8002eb4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ec4 <xQueueGenericReset+0xd0>)
 8002e90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	f3bf 8f4f 	dsb	sy
 8002e9a:	f3bf 8f6f 	isb	sy
 8002e9e:	e009      	b.n	8002eb4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	3310      	adds	r3, #16
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff fef1 	bl	8002c8c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	3324      	adds	r3, #36	@ 0x24
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7ff feec 	bl	8002c8c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002eb4:	f001 fe8a 	bl	8004bcc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002eb8:	2301      	movs	r3, #1
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	e000ed04 	.word	0xe000ed04

08002ec8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b08e      	sub	sp, #56	@ 0x38
 8002ecc:	af02      	add	r7, sp, #8
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
 8002ed4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10b      	bne.n	8002ef4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ee0:	f383 8811 	msr	BASEPRI, r3
 8002ee4:	f3bf 8f6f 	isb	sy
 8002ee8:	f3bf 8f4f 	dsb	sy
 8002eec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002eee:	bf00      	nop
 8002ef0:	bf00      	nop
 8002ef2:	e7fd      	b.n	8002ef0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10b      	bne.n	8002f12 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002efe:	f383 8811 	msr	BASEPRI, r3
 8002f02:	f3bf 8f6f 	isb	sy
 8002f06:	f3bf 8f4f 	dsb	sy
 8002f0a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002f0c:	bf00      	nop
 8002f0e:	bf00      	nop
 8002f10:	e7fd      	b.n	8002f0e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d002      	beq.n	8002f1e <xQueueGenericCreateStatic+0x56>
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <xQueueGenericCreateStatic+0x5a>
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e000      	b.n	8002f24 <xQueueGenericCreateStatic+0x5c>
 8002f22:	2300      	movs	r3, #0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10b      	bne.n	8002f40 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f2c:	f383 8811 	msr	BASEPRI, r3
 8002f30:	f3bf 8f6f 	isb	sy
 8002f34:	f3bf 8f4f 	dsb	sy
 8002f38:	623b      	str	r3, [r7, #32]
}
 8002f3a:	bf00      	nop
 8002f3c:	bf00      	nop
 8002f3e:	e7fd      	b.n	8002f3c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d102      	bne.n	8002f4c <xQueueGenericCreateStatic+0x84>
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <xQueueGenericCreateStatic+0x88>
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e000      	b.n	8002f52 <xQueueGenericCreateStatic+0x8a>
 8002f50:	2300      	movs	r3, #0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10b      	bne.n	8002f6e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f5a:	f383 8811 	msr	BASEPRI, r3
 8002f5e:	f3bf 8f6f 	isb	sy
 8002f62:	f3bf 8f4f 	dsb	sy
 8002f66:	61fb      	str	r3, [r7, #28]
}
 8002f68:	bf00      	nop
 8002f6a:	bf00      	nop
 8002f6c:	e7fd      	b.n	8002f6a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002f6e:	2348      	movs	r3, #72	@ 0x48
 8002f70:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	2b48      	cmp	r3, #72	@ 0x48
 8002f76:	d00b      	beq.n	8002f90 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f7c:	f383 8811 	msr	BASEPRI, r3
 8002f80:	f3bf 8f6f 	isb	sy
 8002f84:	f3bf 8f4f 	dsb	sy
 8002f88:	61bb      	str	r3, [r7, #24]
}
 8002f8a:	bf00      	nop
 8002f8c:	bf00      	nop
 8002f8e:	e7fd      	b.n	8002f8c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002f90:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00d      	beq.n	8002fb8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002fa4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	4613      	mov	r3, r2
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	68b9      	ldr	r1, [r7, #8]
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f000 f840 	bl	8003038 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3730      	adds	r7, #48	@ 0x30
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b08a      	sub	sp, #40	@ 0x28
 8002fc6:	af02      	add	r7, sp, #8
 8002fc8:	60f8      	str	r0, [r7, #12]
 8002fca:	60b9      	str	r1, [r7, #8]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10b      	bne.n	8002fee <xQueueGenericCreate+0x2c>
	__asm volatile
 8002fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fda:	f383 8811 	msr	BASEPRI, r3
 8002fde:	f3bf 8f6f 	isb	sy
 8002fe2:	f3bf 8f4f 	dsb	sy
 8002fe6:	613b      	str	r3, [r7, #16]
}
 8002fe8:	bf00      	nop
 8002fea:	bf00      	nop
 8002fec:	e7fd      	b.n	8002fea <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	68ba      	ldr	r2, [r7, #8]
 8002ff2:	fb02 f303 	mul.w	r3, r2, r3
 8002ff6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	3348      	adds	r3, #72	@ 0x48
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f001 fed5 	bl	8004dac <pvPortMalloc>
 8003002:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d011      	beq.n	800302e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	3348      	adds	r3, #72	@ 0x48
 8003012:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800301c:	79fa      	ldrb	r2, [r7, #7]
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	4613      	mov	r3, r2
 8003024:	697a      	ldr	r2, [r7, #20]
 8003026:	68b9      	ldr	r1, [r7, #8]
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f000 f805 	bl	8003038 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800302e:	69bb      	ldr	r3, [r7, #24]
	}
 8003030:	4618      	mov	r0, r3
 8003032:	3720      	adds	r7, #32
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
 8003044:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d103      	bne.n	8003054 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	e002      	b.n	800305a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003066:	2101      	movs	r1, #1
 8003068:	69b8      	ldr	r0, [r7, #24]
 800306a:	f7ff fec3 	bl	8002df4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800306e:	bf00      	nop
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
	...

08003078 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b08e      	sub	sp, #56	@ 0x38
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
 8003084:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003086:	2300      	movs	r3, #0
 8003088:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800308e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003090:	2b00      	cmp	r3, #0
 8003092:	d10b      	bne.n	80030ac <xQueueGenericSend+0x34>
	__asm volatile
 8003094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003098:	f383 8811 	msr	BASEPRI, r3
 800309c:	f3bf 8f6f 	isb	sy
 80030a0:	f3bf 8f4f 	dsb	sy
 80030a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80030a6:	bf00      	nop
 80030a8:	bf00      	nop
 80030aa:	e7fd      	b.n	80030a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d103      	bne.n	80030ba <xQueueGenericSend+0x42>
 80030b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <xQueueGenericSend+0x46>
 80030ba:	2301      	movs	r3, #1
 80030bc:	e000      	b.n	80030c0 <xQueueGenericSend+0x48>
 80030be:	2300      	movs	r3, #0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10b      	bne.n	80030dc <xQueueGenericSend+0x64>
	__asm volatile
 80030c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030c8:	f383 8811 	msr	BASEPRI, r3
 80030cc:	f3bf 8f6f 	isb	sy
 80030d0:	f3bf 8f4f 	dsb	sy
 80030d4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80030d6:	bf00      	nop
 80030d8:	bf00      	nop
 80030da:	e7fd      	b.n	80030d8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d103      	bne.n	80030ea <xQueueGenericSend+0x72>
 80030e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d101      	bne.n	80030ee <xQueueGenericSend+0x76>
 80030ea:	2301      	movs	r3, #1
 80030ec:	e000      	b.n	80030f0 <xQueueGenericSend+0x78>
 80030ee:	2300      	movs	r3, #0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d10b      	bne.n	800310c <xQueueGenericSend+0x94>
	__asm volatile
 80030f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030f8:	f383 8811 	msr	BASEPRI, r3
 80030fc:	f3bf 8f6f 	isb	sy
 8003100:	f3bf 8f4f 	dsb	sy
 8003104:	623b      	str	r3, [r7, #32]
}
 8003106:	bf00      	nop
 8003108:	bf00      	nop
 800310a:	e7fd      	b.n	8003108 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800310c:	f001 f9d8 	bl	80044c0 <xTaskGetSchedulerState>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d102      	bne.n	800311c <xQueueGenericSend+0xa4>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <xQueueGenericSend+0xa8>
 800311c:	2301      	movs	r3, #1
 800311e:	e000      	b.n	8003122 <xQueueGenericSend+0xaa>
 8003120:	2300      	movs	r3, #0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10b      	bne.n	800313e <xQueueGenericSend+0xc6>
	__asm volatile
 8003126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800312a:	f383 8811 	msr	BASEPRI, r3
 800312e:	f3bf 8f6f 	isb	sy
 8003132:	f3bf 8f4f 	dsb	sy
 8003136:	61fb      	str	r3, [r7, #28]
}
 8003138:	bf00      	nop
 800313a:	bf00      	nop
 800313c:	e7fd      	b.n	800313a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800313e:	f001 fd13 	bl	8004b68 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003144:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003148:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800314a:	429a      	cmp	r2, r3
 800314c:	d302      	bcc.n	8003154 <xQueueGenericSend+0xdc>
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	2b02      	cmp	r3, #2
 8003152:	d129      	bne.n	80031a8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	68b9      	ldr	r1, [r7, #8]
 8003158:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800315a:	f000 fac9 	bl	80036f0 <prvCopyDataToQueue>
 800315e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003164:	2b00      	cmp	r3, #0
 8003166:	d010      	beq.n	800318a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800316a:	3324      	adds	r3, #36	@ 0x24
 800316c:	4618      	mov	r0, r3
 800316e:	f000 ffe7 	bl	8004140 <xTaskRemoveFromEventList>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d013      	beq.n	80031a0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003178:	4b3f      	ldr	r3, [pc, #252]	@ (8003278 <xQueueGenericSend+0x200>)
 800317a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	f3bf 8f4f 	dsb	sy
 8003184:	f3bf 8f6f 	isb	sy
 8003188:	e00a      	b.n	80031a0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800318a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800318c:	2b00      	cmp	r3, #0
 800318e:	d007      	beq.n	80031a0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003190:	4b39      	ldr	r3, [pc, #228]	@ (8003278 <xQueueGenericSend+0x200>)
 8003192:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	f3bf 8f4f 	dsb	sy
 800319c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80031a0:	f001 fd14 	bl	8004bcc <vPortExitCritical>
				return pdPASS;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e063      	b.n	8003270 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d103      	bne.n	80031b6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80031ae:	f001 fd0d 	bl	8004bcc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80031b2:	2300      	movs	r3, #0
 80031b4:	e05c      	b.n	8003270 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80031b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d106      	bne.n	80031ca <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80031bc:	f107 0314 	add.w	r3, r7, #20
 80031c0:	4618      	mov	r0, r3
 80031c2:	f001 f821 	bl	8004208 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80031c6:	2301      	movs	r3, #1
 80031c8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80031ca:	f001 fcff 	bl	8004bcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80031ce:	f000 fdcf 	bl	8003d70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80031d2:	f001 fcc9 	bl	8004b68 <vPortEnterCritical>
 80031d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80031dc:	b25b      	sxtb	r3, r3
 80031de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e2:	d103      	bne.n	80031ec <xQueueGenericSend+0x174>
 80031e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80031f2:	b25b      	sxtb	r3, r3
 80031f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f8:	d103      	bne.n	8003202 <xQueueGenericSend+0x18a>
 80031fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003202:	f001 fce3 	bl	8004bcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003206:	1d3a      	adds	r2, r7, #4
 8003208:	f107 0314 	add.w	r3, r7, #20
 800320c:	4611      	mov	r1, r2
 800320e:	4618      	mov	r0, r3
 8003210:	f001 f810 	bl	8004234 <xTaskCheckForTimeOut>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d124      	bne.n	8003264 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800321a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800321c:	f000 fb60 	bl	80038e0 <prvIsQueueFull>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d018      	beq.n	8003258 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003228:	3310      	adds	r3, #16
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	4611      	mov	r1, r2
 800322e:	4618      	mov	r0, r3
 8003230:	f000 ff60 	bl	80040f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003234:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003236:	f000 faeb 	bl	8003810 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800323a:	f000 fda7 	bl	8003d8c <xTaskResumeAll>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	f47f af7c 	bne.w	800313e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003246:	4b0c      	ldr	r3, [pc, #48]	@ (8003278 <xQueueGenericSend+0x200>)
 8003248:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	f3bf 8f4f 	dsb	sy
 8003252:	f3bf 8f6f 	isb	sy
 8003256:	e772      	b.n	800313e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003258:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800325a:	f000 fad9 	bl	8003810 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800325e:	f000 fd95 	bl	8003d8c <xTaskResumeAll>
 8003262:	e76c      	b.n	800313e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003264:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003266:	f000 fad3 	bl	8003810 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800326a:	f000 fd8f 	bl	8003d8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800326e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003270:	4618      	mov	r0, r3
 8003272:	3738      	adds	r7, #56	@ 0x38
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	e000ed04 	.word	0xe000ed04

0800327c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b08e      	sub	sp, #56	@ 0x38
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800328a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800328c:	2b00      	cmp	r3, #0
 800328e:	d10b      	bne.n	80032a8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8003290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003294:	f383 8811 	msr	BASEPRI, r3
 8003298:	f3bf 8f6f 	isb	sy
 800329c:	f3bf 8f4f 	dsb	sy
 80032a0:	623b      	str	r3, [r7, #32]
}
 80032a2:	bf00      	nop
 80032a4:	bf00      	nop
 80032a6:	e7fd      	b.n	80032a4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80032a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00b      	beq.n	80032c8 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80032b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032b4:	f383 8811 	msr	BASEPRI, r3
 80032b8:	f3bf 8f6f 	isb	sy
 80032bc:	f3bf 8f4f 	dsb	sy
 80032c0:	61fb      	str	r3, [r7, #28]
}
 80032c2:	bf00      	nop
 80032c4:	bf00      	nop
 80032c6:	e7fd      	b.n	80032c4 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80032c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d103      	bne.n	80032d8 <xQueueGiveFromISR+0x5c>
 80032d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d101      	bne.n	80032dc <xQueueGiveFromISR+0x60>
 80032d8:	2301      	movs	r3, #1
 80032da:	e000      	b.n	80032de <xQueueGiveFromISR+0x62>
 80032dc:	2300      	movs	r3, #0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10b      	bne.n	80032fa <xQueueGiveFromISR+0x7e>
	__asm volatile
 80032e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032e6:	f383 8811 	msr	BASEPRI, r3
 80032ea:	f3bf 8f6f 	isb	sy
 80032ee:	f3bf 8f4f 	dsb	sy
 80032f2:	61bb      	str	r3, [r7, #24]
}
 80032f4:	bf00      	nop
 80032f6:	bf00      	nop
 80032f8:	e7fd      	b.n	80032f6 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80032fa:	f001 fd15 	bl	8004d28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80032fe:	f3ef 8211 	mrs	r2, BASEPRI
 8003302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003306:	f383 8811 	msr	BASEPRI, r3
 800330a:	f3bf 8f6f 	isb	sy
 800330e:	f3bf 8f4f 	dsb	sy
 8003312:	617a      	str	r2, [r7, #20]
 8003314:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003316:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003318:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800331a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800331c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800331e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003324:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003326:	429a      	cmp	r2, r3
 8003328:	d22b      	bcs.n	8003382 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800332a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800332c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003330:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003336:	1c5a      	adds	r2, r3, #1
 8003338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800333a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800333c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003344:	d112      	bne.n	800336c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334a:	2b00      	cmp	r3, #0
 800334c:	d016      	beq.n	800337c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800334e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003350:	3324      	adds	r3, #36	@ 0x24
 8003352:	4618      	mov	r0, r3
 8003354:	f000 fef4 	bl	8004140 <xTaskRemoveFromEventList>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00e      	beq.n	800337c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00b      	beq.n	800337c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	2201      	movs	r2, #1
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	e007      	b.n	800337c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800336c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003370:	3301      	adds	r3, #1
 8003372:	b2db      	uxtb	r3, r3
 8003374:	b25a      	sxtb	r2, r3
 8003376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003378:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800337c:	2301      	movs	r3, #1
 800337e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003380:	e001      	b.n	8003386 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003382:	2300      	movs	r3, #0
 8003384:	637b      	str	r3, [r7, #52]	@ 0x34
 8003386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003388:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003390:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003394:	4618      	mov	r0, r3
 8003396:	3738      	adds	r7, #56	@ 0x38
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b08e      	sub	sp, #56	@ 0x38
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80033a6:	2300      	movs	r3, #0
 80033a8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80033ae:	2300      	movs	r3, #0
 80033b0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80033b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10b      	bne.n	80033d0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80033b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033bc:	f383 8811 	msr	BASEPRI, r3
 80033c0:	f3bf 8f6f 	isb	sy
 80033c4:	f3bf 8f4f 	dsb	sy
 80033c8:	623b      	str	r3, [r7, #32]
}
 80033ca:	bf00      	nop
 80033cc:	bf00      	nop
 80033ce:	e7fd      	b.n	80033cc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80033d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00b      	beq.n	80033f0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80033d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033dc:	f383 8811 	msr	BASEPRI, r3
 80033e0:	f3bf 8f6f 	isb	sy
 80033e4:	f3bf 8f4f 	dsb	sy
 80033e8:	61fb      	str	r3, [r7, #28]
}
 80033ea:	bf00      	nop
 80033ec:	bf00      	nop
 80033ee:	e7fd      	b.n	80033ec <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033f0:	f001 f866 	bl	80044c0 <xTaskGetSchedulerState>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d102      	bne.n	8003400 <xQueueSemaphoreTake+0x64>
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <xQueueSemaphoreTake+0x68>
 8003400:	2301      	movs	r3, #1
 8003402:	e000      	b.n	8003406 <xQueueSemaphoreTake+0x6a>
 8003404:	2300      	movs	r3, #0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10b      	bne.n	8003422 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800340a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800340e:	f383 8811 	msr	BASEPRI, r3
 8003412:	f3bf 8f6f 	isb	sy
 8003416:	f3bf 8f4f 	dsb	sy
 800341a:	61bb      	str	r3, [r7, #24]
}
 800341c:	bf00      	nop
 800341e:	bf00      	nop
 8003420:	e7fd      	b.n	800341e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003422:	f001 fba1 	bl	8004b68 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800342a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800342c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800342e:	2b00      	cmp	r3, #0
 8003430:	d024      	beq.n	800347c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003434:	1e5a      	subs	r2, r3, #1
 8003436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003438:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800343a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d104      	bne.n	800344c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003442:	f001 f9e9 	bl	8004818 <pvTaskIncrementMutexHeldCount>
 8003446:	4602      	mov	r2, r0
 8003448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800344a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800344c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00f      	beq.n	8003474 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003456:	3310      	adds	r3, #16
 8003458:	4618      	mov	r0, r3
 800345a:	f000 fe71 	bl	8004140 <xTaskRemoveFromEventList>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d007      	beq.n	8003474 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003464:	4b54      	ldr	r3, [pc, #336]	@ (80035b8 <xQueueSemaphoreTake+0x21c>)
 8003466:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	f3bf 8f4f 	dsb	sy
 8003470:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003474:	f001 fbaa 	bl	8004bcc <vPortExitCritical>
				return pdPASS;
 8003478:	2301      	movs	r3, #1
 800347a:	e098      	b.n	80035ae <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d112      	bne.n	80034a8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00b      	beq.n	80034a0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800348c:	f383 8811 	msr	BASEPRI, r3
 8003490:	f3bf 8f6f 	isb	sy
 8003494:	f3bf 8f4f 	dsb	sy
 8003498:	617b      	str	r3, [r7, #20]
}
 800349a:	bf00      	nop
 800349c:	bf00      	nop
 800349e:	e7fd      	b.n	800349c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80034a0:	f001 fb94 	bl	8004bcc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80034a4:	2300      	movs	r3, #0
 80034a6:	e082      	b.n	80035ae <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80034a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d106      	bne.n	80034bc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80034ae:	f107 030c 	add.w	r3, r7, #12
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 fea8 	bl	8004208 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80034b8:	2301      	movs	r3, #1
 80034ba:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80034bc:	f001 fb86 	bl	8004bcc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80034c0:	f000 fc56 	bl	8003d70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80034c4:	f001 fb50 	bl	8004b68 <vPortEnterCritical>
 80034c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034ca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80034ce:	b25b      	sxtb	r3, r3
 80034d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d4:	d103      	bne.n	80034de <xQueueSemaphoreTake+0x142>
 80034d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80034e4:	b25b      	sxtb	r3, r3
 80034e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ea:	d103      	bne.n	80034f4 <xQueueSemaphoreTake+0x158>
 80034ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80034f4:	f001 fb6a 	bl	8004bcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034f8:	463a      	mov	r2, r7
 80034fa:	f107 030c 	add.w	r3, r7, #12
 80034fe:	4611      	mov	r1, r2
 8003500:	4618      	mov	r0, r3
 8003502:	f000 fe97 	bl	8004234 <xTaskCheckForTimeOut>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d132      	bne.n	8003572 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800350c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800350e:	f000 f9d1 	bl	80038b4 <prvIsQueueEmpty>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d026      	beq.n	8003566 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d109      	bne.n	8003534 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003520:	f001 fb22 	bl	8004b68 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	4618      	mov	r0, r3
 800352a:	f000 ffe7 	bl	80044fc <xTaskPriorityInherit>
 800352e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003530:	f001 fb4c 	bl	8004bcc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003536:	3324      	adds	r3, #36	@ 0x24
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	4611      	mov	r1, r2
 800353c:	4618      	mov	r0, r3
 800353e:	f000 fdd9 	bl	80040f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003542:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003544:	f000 f964 	bl	8003810 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003548:	f000 fc20 	bl	8003d8c <xTaskResumeAll>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	f47f af67 	bne.w	8003422 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003554:	4b18      	ldr	r3, [pc, #96]	@ (80035b8 <xQueueSemaphoreTake+0x21c>)
 8003556:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	f3bf 8f4f 	dsb	sy
 8003560:	f3bf 8f6f 	isb	sy
 8003564:	e75d      	b.n	8003422 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003566:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003568:	f000 f952 	bl	8003810 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800356c:	f000 fc0e 	bl	8003d8c <xTaskResumeAll>
 8003570:	e757      	b.n	8003422 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003572:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003574:	f000 f94c 	bl	8003810 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003578:	f000 fc08 	bl	8003d8c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800357c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800357e:	f000 f999 	bl	80038b4 <prvIsQueueEmpty>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	f43f af4c 	beq.w	8003422 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800358a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00d      	beq.n	80035ac <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003590:	f001 faea 	bl	8004b68 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003594:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003596:	f000 f893 	bl	80036c0 <prvGetDisinheritPriorityAfterTimeout>
 800359a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800359c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80035a2:	4618      	mov	r0, r3
 80035a4:	f001 f8a8 	bl	80046f8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80035a8:	f001 fb10 	bl	8004bcc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80035ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3738      	adds	r7, #56	@ 0x38
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	e000ed04 	.word	0xe000ed04

080035bc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b08e      	sub	sp, #56	@ 0x38
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80035cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10b      	bne.n	80035ea <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80035d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035d6:	f383 8811 	msr	BASEPRI, r3
 80035da:	f3bf 8f6f 	isb	sy
 80035de:	f3bf 8f4f 	dsb	sy
 80035e2:	623b      	str	r3, [r7, #32]
}
 80035e4:	bf00      	nop
 80035e6:	bf00      	nop
 80035e8:	e7fd      	b.n	80035e6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d103      	bne.n	80035f8 <xQueueReceiveFromISR+0x3c>
 80035f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <xQueueReceiveFromISR+0x40>
 80035f8:	2301      	movs	r3, #1
 80035fa:	e000      	b.n	80035fe <xQueueReceiveFromISR+0x42>
 80035fc:	2300      	movs	r3, #0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10b      	bne.n	800361a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8003602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003606:	f383 8811 	msr	BASEPRI, r3
 800360a:	f3bf 8f6f 	isb	sy
 800360e:	f3bf 8f4f 	dsb	sy
 8003612:	61fb      	str	r3, [r7, #28]
}
 8003614:	bf00      	nop
 8003616:	bf00      	nop
 8003618:	e7fd      	b.n	8003616 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800361a:	f001 fb85 	bl	8004d28 <vPortValidateInterruptPriority>
	__asm volatile
 800361e:	f3ef 8211 	mrs	r2, BASEPRI
 8003622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003626:	f383 8811 	msr	BASEPRI, r3
 800362a:	f3bf 8f6f 	isb	sy
 800362e:	f3bf 8f4f 	dsb	sy
 8003632:	61ba      	str	r2, [r7, #24]
 8003634:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003636:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003638:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800363a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800363c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800363e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003642:	2b00      	cmp	r3, #0
 8003644:	d02f      	beq.n	80036a6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003648:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800364c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003650:	68b9      	ldr	r1, [r7, #8]
 8003652:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003654:	f000 f8b6 	bl	80037c4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800365a:	1e5a      	subs	r2, r3, #1
 800365c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800365e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003660:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003668:	d112      	bne.n	8003690 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800366a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d016      	beq.n	80036a0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003674:	3310      	adds	r3, #16
 8003676:	4618      	mov	r0, r3
 8003678:	f000 fd62 	bl	8004140 <xTaskRemoveFromEventList>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00e      	beq.n	80036a0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00b      	beq.n	80036a0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	e007      	b.n	80036a0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003690:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003694:	3301      	adds	r3, #1
 8003696:	b2db      	uxtb	r3, r3
 8003698:	b25a      	sxtb	r2, r3
 800369a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800369c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80036a0:	2301      	movs	r3, #1
 80036a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80036a4:	e001      	b.n	80036aa <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80036a6:	2300      	movs	r3, #0
 80036a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80036aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ac:	613b      	str	r3, [r7, #16]
	__asm volatile
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	f383 8811 	msr	BASEPRI, r3
}
 80036b4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80036b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3738      	adds	r7, #56	@ 0x38
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d006      	beq.n	80036de <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f1c3 0307 	rsb	r3, r3, #7
 80036da:	60fb      	str	r3, [r7, #12]
 80036dc:	e001      	b.n	80036e2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80036de:	2300      	movs	r3, #0
 80036e0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80036e2:	68fb      	ldr	r3, [r7, #12]
	}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3714      	adds	r7, #20
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80036fc:	2300      	movs	r3, #0
 80036fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003704:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10d      	bne.n	800372a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d14d      	bne.n	80037b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	4618      	mov	r0, r3
 800371c:	f000 ff64 	bl	80045e8 <xTaskPriorityDisinherit>
 8003720:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	609a      	str	r2, [r3, #8]
 8003728:	e043      	b.n	80037b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d119      	bne.n	8003764 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6858      	ldr	r0, [r3, #4]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003738:	461a      	mov	r2, r3
 800373a:	68b9      	ldr	r1, [r7, #8]
 800373c:	f001 fd50 	bl	80051e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003748:	441a      	add	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	685a      	ldr	r2, [r3, #4]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	429a      	cmp	r2, r3
 8003758:	d32b      	bcc.n	80037b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	605a      	str	r2, [r3, #4]
 8003762:	e026      	b.n	80037b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	68d8      	ldr	r0, [r3, #12]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376c:	461a      	mov	r2, r3
 800376e:	68b9      	ldr	r1, [r7, #8]
 8003770:	f001 fd36 	bl	80051e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	68da      	ldr	r2, [r3, #12]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377c:	425b      	negs	r3, r3
 800377e:	441a      	add	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	68da      	ldr	r2, [r3, #12]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	429a      	cmp	r2, r3
 800378e:	d207      	bcs.n	80037a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003798:	425b      	negs	r3, r3
 800379a:	441a      	add	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d105      	bne.n	80037b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d002      	beq.n	80037b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	3b01      	subs	r3, #1
 80037b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1c5a      	adds	r2, r3, #1
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80037ba:	697b      	ldr	r3, [r7, #20]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3718      	adds	r7, #24
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d018      	beq.n	8003808 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68da      	ldr	r2, [r3, #12]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037de:	441a      	add	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68da      	ldr	r2, [r3, #12]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d303      	bcc.n	80037f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68d9      	ldr	r1, [r3, #12]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003800:	461a      	mov	r2, r3
 8003802:	6838      	ldr	r0, [r7, #0]
 8003804:	f001 fcec 	bl	80051e0 <memcpy>
	}
}
 8003808:	bf00      	nop
 800380a:	3708      	adds	r7, #8
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003818:	f001 f9a6 	bl	8004b68 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003822:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003824:	e011      	b.n	800384a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382a:	2b00      	cmp	r3, #0
 800382c:	d012      	beq.n	8003854 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	3324      	adds	r3, #36	@ 0x24
 8003832:	4618      	mov	r0, r3
 8003834:	f000 fc84 	bl	8004140 <xTaskRemoveFromEventList>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800383e:	f000 fd5d 	bl	80042fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003842:	7bfb      	ldrb	r3, [r7, #15]
 8003844:	3b01      	subs	r3, #1
 8003846:	b2db      	uxtb	r3, r3
 8003848:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800384a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800384e:	2b00      	cmp	r3, #0
 8003850:	dce9      	bgt.n	8003826 <prvUnlockQueue+0x16>
 8003852:	e000      	b.n	8003856 <prvUnlockQueue+0x46>
					break;
 8003854:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	22ff      	movs	r2, #255	@ 0xff
 800385a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800385e:	f001 f9b5 	bl	8004bcc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003862:	f001 f981 	bl	8004b68 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800386c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800386e:	e011      	b.n	8003894 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d012      	beq.n	800389e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	3310      	adds	r3, #16
 800387c:	4618      	mov	r0, r3
 800387e:	f000 fc5f 	bl	8004140 <xTaskRemoveFromEventList>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003888:	f000 fd38 	bl	80042fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800388c:	7bbb      	ldrb	r3, [r7, #14]
 800388e:	3b01      	subs	r3, #1
 8003890:	b2db      	uxtb	r3, r3
 8003892:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003894:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003898:	2b00      	cmp	r3, #0
 800389a:	dce9      	bgt.n	8003870 <prvUnlockQueue+0x60>
 800389c:	e000      	b.n	80038a0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800389e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	22ff      	movs	r2, #255	@ 0xff
 80038a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80038a8:	f001 f990 	bl	8004bcc <vPortExitCritical>
}
 80038ac:	bf00      	nop
 80038ae:	3710      	adds	r7, #16
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038bc:	f001 f954 	bl	8004b68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d102      	bne.n	80038ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80038c8:	2301      	movs	r3, #1
 80038ca:	60fb      	str	r3, [r7, #12]
 80038cc:	e001      	b.n	80038d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80038ce:	2300      	movs	r3, #0
 80038d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038d2:	f001 f97b 	bl	8004bcc <vPortExitCritical>

	return xReturn;
 80038d6:	68fb      	ldr	r3, [r7, #12]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038e8:	f001 f93e 	bl	8004b68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d102      	bne.n	80038fe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80038f8:	2301      	movs	r3, #1
 80038fa:	60fb      	str	r3, [r7, #12]
 80038fc:	e001      	b.n	8003902 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80038fe:	2300      	movs	r3, #0
 8003900:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003902:	f001 f963 	bl	8004bcc <vPortExitCritical>

	return xReturn;
 8003906:	68fb      	ldr	r3, [r7, #12]
}
 8003908:	4618      	mov	r0, r3
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003910:	b580      	push	{r7, lr}
 8003912:	b08e      	sub	sp, #56	@ 0x38
 8003914:	af04      	add	r7, sp, #16
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
 800391c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800391e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10b      	bne.n	800393c <xTaskCreateStatic+0x2c>
	__asm volatile
 8003924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003928:	f383 8811 	msr	BASEPRI, r3
 800392c:	f3bf 8f6f 	isb	sy
 8003930:	f3bf 8f4f 	dsb	sy
 8003934:	623b      	str	r3, [r7, #32]
}
 8003936:	bf00      	nop
 8003938:	bf00      	nop
 800393a:	e7fd      	b.n	8003938 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800393c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10b      	bne.n	800395a <xTaskCreateStatic+0x4a>
	__asm volatile
 8003942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003946:	f383 8811 	msr	BASEPRI, r3
 800394a:	f3bf 8f6f 	isb	sy
 800394e:	f3bf 8f4f 	dsb	sy
 8003952:	61fb      	str	r3, [r7, #28]
}
 8003954:	bf00      	nop
 8003956:	bf00      	nop
 8003958:	e7fd      	b.n	8003956 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800395a:	2354      	movs	r3, #84	@ 0x54
 800395c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	2b54      	cmp	r3, #84	@ 0x54
 8003962:	d00b      	beq.n	800397c <xTaskCreateStatic+0x6c>
	__asm volatile
 8003964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003968:	f383 8811 	msr	BASEPRI, r3
 800396c:	f3bf 8f6f 	isb	sy
 8003970:	f3bf 8f4f 	dsb	sy
 8003974:	61bb      	str	r3, [r7, #24]
}
 8003976:	bf00      	nop
 8003978:	bf00      	nop
 800397a:	e7fd      	b.n	8003978 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800397c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800397e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003980:	2b00      	cmp	r3, #0
 8003982:	d01e      	beq.n	80039c2 <xTaskCreateStatic+0xb2>
 8003984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003986:	2b00      	cmp	r3, #0
 8003988:	d01b      	beq.n	80039c2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800398a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800398c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800398e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003990:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003992:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003996:	2202      	movs	r2, #2
 8003998:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800399c:	2300      	movs	r3, #0
 800399e:	9303      	str	r3, [sp, #12]
 80039a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a2:	9302      	str	r3, [sp, #8]
 80039a4:	f107 0314 	add.w	r3, r7, #20
 80039a8:	9301      	str	r3, [sp, #4]
 80039aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	68b9      	ldr	r1, [r7, #8]
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f000 f850 	bl	8003a5a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80039bc:	f000 f8d6 	bl	8003b6c <prvAddNewTaskToReadyList>
 80039c0:	e001      	b.n	80039c6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80039c2:	2300      	movs	r3, #0
 80039c4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80039c6:	697b      	ldr	r3, [r7, #20]
	}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3728      	adds	r7, #40	@ 0x28
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b08c      	sub	sp, #48	@ 0x30
 80039d4:	af04      	add	r7, sp, #16
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	603b      	str	r3, [r7, #0]
 80039dc:	4613      	mov	r3, r2
 80039de:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80039e0:	88fb      	ldrh	r3, [r7, #6]
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4618      	mov	r0, r3
 80039e6:	f001 f9e1 	bl	8004dac <pvPortMalloc>
 80039ea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00e      	beq.n	8003a10 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80039f2:	2054      	movs	r0, #84	@ 0x54
 80039f4:	f001 f9da 	bl	8004dac <pvPortMalloc>
 80039f8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a06:	e005      	b.n	8003a14 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a08:	6978      	ldr	r0, [r7, #20]
 8003a0a:	f001 fa9d 	bl	8004f48 <vPortFree>
 8003a0e:	e001      	b.n	8003a14 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a10:	2300      	movs	r3, #0
 8003a12:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d017      	beq.n	8003a4a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a22:	88fa      	ldrh	r2, [r7, #6]
 8003a24:	2300      	movs	r3, #0
 8003a26:	9303      	str	r3, [sp, #12]
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	9302      	str	r3, [sp, #8]
 8003a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a2e:	9301      	str	r3, [sp, #4]
 8003a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a32:	9300      	str	r3, [sp, #0]
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	68b9      	ldr	r1, [r7, #8]
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f000 f80e 	bl	8003a5a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a3e:	69f8      	ldr	r0, [r7, #28]
 8003a40:	f000 f894 	bl	8003b6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a44:	2301      	movs	r3, #1
 8003a46:	61bb      	str	r3, [r7, #24]
 8003a48:	e002      	b.n	8003a50 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a4e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a50:	69bb      	ldr	r3, [r7, #24]
	}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3720      	adds	r7, #32
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b088      	sub	sp, #32
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	60f8      	str	r0, [r7, #12]
 8003a62:	60b9      	str	r1, [r7, #8]
 8003a64:	607a      	str	r2, [r7, #4]
 8003a66:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a72:	3b01      	subs	r3, #1
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	4413      	add	r3, r2
 8003a78:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	f023 0307 	bic.w	r3, r3, #7
 8003a80:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	f003 0307 	and.w	r3, r3, #7
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00b      	beq.n	8003aa4 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a90:	f383 8811 	msr	BASEPRI, r3
 8003a94:	f3bf 8f6f 	isb	sy
 8003a98:	f3bf 8f4f 	dsb	sy
 8003a9c:	617b      	str	r3, [r7, #20]
}
 8003a9e:	bf00      	nop
 8003aa0:	bf00      	nop
 8003aa2:	e7fd      	b.n	8003aa0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d01f      	beq.n	8003aea <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003aaa:	2300      	movs	r3, #0
 8003aac:	61fb      	str	r3, [r7, #28]
 8003aae:	e012      	b.n	8003ad6 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	7819      	ldrb	r1, [r3, #0]
 8003ab8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	4413      	add	r3, r2
 8003abe:	3334      	adds	r3, #52	@ 0x34
 8003ac0:	460a      	mov	r2, r1
 8003ac2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	4413      	add	r3, r2
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d006      	beq.n	8003ade <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	61fb      	str	r3, [r7, #28]
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	2b0f      	cmp	r3, #15
 8003ada:	d9e9      	bls.n	8003ab0 <prvInitialiseNewTask+0x56>
 8003adc:	e000      	b.n	8003ae0 <prvInitialiseNewTask+0x86>
			{
				break;
 8003ade:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ae8:	e003      	b.n	8003af2 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003af4:	2b06      	cmp	r3, #6
 8003af6:	d901      	bls.n	8003afc <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003af8:	2306      	movs	r3, #6
 8003afa:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003afe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b00:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b06:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b10:	3304      	adds	r3, #4
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7ff f8da 	bl	8002ccc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b1a:	3318      	adds	r3, #24
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7ff f8d5 	bl	8002ccc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b26:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b2a:	f1c3 0207 	rsb	r2, r3, #7
 8003b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b30:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b36:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	68f9      	ldr	r1, [r7, #12]
 8003b4a:	69b8      	ldr	r0, [r7, #24]
 8003b4c:	f000 fede 	bl	800490c <pxPortInitialiseStack>
 8003b50:	4602      	mov	r2, r0
 8003b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b54:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d002      	beq.n	8003b62 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b62:	bf00      	nop
 8003b64:	3720      	adds	r7, #32
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
	...

08003b6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003b74:	f000 fff8 	bl	8004b68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003b78:	4b2a      	ldr	r3, [pc, #168]	@ (8003c24 <prvAddNewTaskToReadyList+0xb8>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	4a29      	ldr	r2, [pc, #164]	@ (8003c24 <prvAddNewTaskToReadyList+0xb8>)
 8003b80:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003b82:	4b29      	ldr	r3, [pc, #164]	@ (8003c28 <prvAddNewTaskToReadyList+0xbc>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d109      	bne.n	8003b9e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003b8a:	4a27      	ldr	r2, [pc, #156]	@ (8003c28 <prvAddNewTaskToReadyList+0xbc>)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b90:	4b24      	ldr	r3, [pc, #144]	@ (8003c24 <prvAddNewTaskToReadyList+0xb8>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d110      	bne.n	8003bba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003b98:	f000 fbd4 	bl	8004344 <prvInitialiseTaskLists>
 8003b9c:	e00d      	b.n	8003bba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003b9e:	4b23      	ldr	r3, [pc, #140]	@ (8003c2c <prvAddNewTaskToReadyList+0xc0>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d109      	bne.n	8003bba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003ba6:	4b20      	ldr	r3, [pc, #128]	@ (8003c28 <prvAddNewTaskToReadyList+0xbc>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d802      	bhi.n	8003bba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003bb4:	4a1c      	ldr	r2, [pc, #112]	@ (8003c28 <prvAddNewTaskToReadyList+0xbc>)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003bba:	4b1d      	ldr	r3, [pc, #116]	@ (8003c30 <prvAddNewTaskToReadyList+0xc4>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	4a1b      	ldr	r2, [pc, #108]	@ (8003c30 <prvAddNewTaskToReadyList+0xc4>)
 8003bc2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc8:	2201      	movs	r2, #1
 8003bca:	409a      	lsls	r2, r3
 8003bcc:	4b19      	ldr	r3, [pc, #100]	@ (8003c34 <prvAddNewTaskToReadyList+0xc8>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	4a18      	ldr	r2, [pc, #96]	@ (8003c34 <prvAddNewTaskToReadyList+0xc8>)
 8003bd4:	6013      	str	r3, [r2, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bda:	4613      	mov	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	4413      	add	r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	4a15      	ldr	r2, [pc, #84]	@ (8003c38 <prvAddNewTaskToReadyList+0xcc>)
 8003be4:	441a      	add	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	3304      	adds	r3, #4
 8003bea:	4619      	mov	r1, r3
 8003bec:	4610      	mov	r0, r2
 8003bee:	f7ff f87a 	bl	8002ce6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003bf2:	f000 ffeb 	bl	8004bcc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8003c2c <prvAddNewTaskToReadyList+0xc0>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00e      	beq.n	8003c1c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8003c28 <prvAddNewTaskToReadyList+0xbc>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d207      	bcs.n	8003c1c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c3c <prvAddNewTaskToReadyList+0xd0>)
 8003c0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c12:	601a      	str	r2, [r3, #0]
 8003c14:	f3bf 8f4f 	dsb	sy
 8003c18:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c1c:	bf00      	nop
 8003c1e:	3708      	adds	r7, #8
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	20000424 	.word	0x20000424
 8003c28:	20000324 	.word	0x20000324
 8003c2c:	20000430 	.word	0x20000430
 8003c30:	20000440 	.word	0x20000440
 8003c34:	2000042c 	.word	0x2000042c
 8003c38:	20000328 	.word	0x20000328
 8003c3c:	e000ed04 	.word	0xe000ed04

08003c40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d018      	beq.n	8003c84 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003c52:	4b14      	ldr	r3, [pc, #80]	@ (8003ca4 <vTaskDelay+0x64>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00b      	beq.n	8003c72 <vTaskDelay+0x32>
	__asm volatile
 8003c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c5e:	f383 8811 	msr	BASEPRI, r3
 8003c62:	f3bf 8f6f 	isb	sy
 8003c66:	f3bf 8f4f 	dsb	sy
 8003c6a:	60bb      	str	r3, [r7, #8]
}
 8003c6c:	bf00      	nop
 8003c6e:	bf00      	nop
 8003c70:	e7fd      	b.n	8003c6e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003c72:	f000 f87d 	bl	8003d70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003c76:	2100      	movs	r1, #0
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 fde1 	bl	8004840 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003c7e:	f000 f885 	bl	8003d8c <xTaskResumeAll>
 8003c82:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d107      	bne.n	8003c9a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003c8a:	4b07      	ldr	r3, [pc, #28]	@ (8003ca8 <vTaskDelay+0x68>)
 8003c8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	f3bf 8f4f 	dsb	sy
 8003c96:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003c9a:	bf00      	nop
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	2000044c 	.word	0x2000044c
 8003ca8:	e000ed04 	.word	0xe000ed04

08003cac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b08a      	sub	sp, #40	@ 0x28
 8003cb0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003cba:	463a      	mov	r2, r7
 8003cbc:	1d39      	adds	r1, r7, #4
 8003cbe:	f107 0308 	add.w	r3, r7, #8
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7fc fc32 	bl	800052c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003cc8:	6839      	ldr	r1, [r7, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	9202      	str	r2, [sp, #8]
 8003cd0:	9301      	str	r3, [sp, #4]
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	9300      	str	r3, [sp, #0]
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	460a      	mov	r2, r1
 8003cda:	491f      	ldr	r1, [pc, #124]	@ (8003d58 <vTaskStartScheduler+0xac>)
 8003cdc:	481f      	ldr	r0, [pc, #124]	@ (8003d5c <vTaskStartScheduler+0xb0>)
 8003cde:	f7ff fe17 	bl	8003910 <xTaskCreateStatic>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	4a1e      	ldr	r2, [pc, #120]	@ (8003d60 <vTaskStartScheduler+0xb4>)
 8003ce6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003ce8:	4b1d      	ldr	r3, [pc, #116]	@ (8003d60 <vTaskStartScheduler+0xb4>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d002      	beq.n	8003cf6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	617b      	str	r3, [r7, #20]
 8003cf4:	e001      	b.n	8003cfa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d116      	bne.n	8003d2e <vTaskStartScheduler+0x82>
	__asm volatile
 8003d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d04:	f383 8811 	msr	BASEPRI, r3
 8003d08:	f3bf 8f6f 	isb	sy
 8003d0c:	f3bf 8f4f 	dsb	sy
 8003d10:	613b      	str	r3, [r7, #16]
}
 8003d12:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d14:	4b13      	ldr	r3, [pc, #76]	@ (8003d64 <vTaskStartScheduler+0xb8>)
 8003d16:	f04f 32ff 	mov.w	r2, #4294967295
 8003d1a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d1c:	4b12      	ldr	r3, [pc, #72]	@ (8003d68 <vTaskStartScheduler+0xbc>)
 8003d1e:	2201      	movs	r2, #1
 8003d20:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003d22:	4b12      	ldr	r3, [pc, #72]	@ (8003d6c <vTaskStartScheduler+0xc0>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d28:	f000 fe7a 	bl	8004a20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d2c:	e00f      	b.n	8003d4e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d34:	d10b      	bne.n	8003d4e <vTaskStartScheduler+0xa2>
	__asm volatile
 8003d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d3a:	f383 8811 	msr	BASEPRI, r3
 8003d3e:	f3bf 8f6f 	isb	sy
 8003d42:	f3bf 8f4f 	dsb	sy
 8003d46:	60fb      	str	r3, [r7, #12]
}
 8003d48:	bf00      	nop
 8003d4a:	bf00      	nop
 8003d4c:	e7fd      	b.n	8003d4a <vTaskStartScheduler+0x9e>
}
 8003d4e:	bf00      	nop
 8003d50:	3718      	adds	r7, #24
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	080053a4 	.word	0x080053a4
 8003d5c:	08004315 	.word	0x08004315
 8003d60:	20000448 	.word	0x20000448
 8003d64:	20000444 	.word	0x20000444
 8003d68:	20000430 	.word	0x20000430
 8003d6c:	20000428 	.word	0x20000428

08003d70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d70:	b480      	push	{r7}
 8003d72:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003d74:	4b04      	ldr	r3, [pc, #16]	@ (8003d88 <vTaskSuspendAll+0x18>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	4a03      	ldr	r2, [pc, #12]	@ (8003d88 <vTaskSuspendAll+0x18>)
 8003d7c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003d7e:	bf00      	nop
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr
 8003d88:	2000044c 	.word	0x2000044c

08003d8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003d92:	2300      	movs	r3, #0
 8003d94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003d96:	2300      	movs	r3, #0
 8003d98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003d9a:	4b42      	ldr	r3, [pc, #264]	@ (8003ea4 <xTaskResumeAll+0x118>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10b      	bne.n	8003dba <xTaskResumeAll+0x2e>
	__asm volatile
 8003da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003da6:	f383 8811 	msr	BASEPRI, r3
 8003daa:	f3bf 8f6f 	isb	sy
 8003dae:	f3bf 8f4f 	dsb	sy
 8003db2:	603b      	str	r3, [r7, #0]
}
 8003db4:	bf00      	nop
 8003db6:	bf00      	nop
 8003db8:	e7fd      	b.n	8003db6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003dba:	f000 fed5 	bl	8004b68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003dbe:	4b39      	ldr	r3, [pc, #228]	@ (8003ea4 <xTaskResumeAll+0x118>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	4a37      	ldr	r2, [pc, #220]	@ (8003ea4 <xTaskResumeAll+0x118>)
 8003dc6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dc8:	4b36      	ldr	r3, [pc, #216]	@ (8003ea4 <xTaskResumeAll+0x118>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d161      	bne.n	8003e94 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003dd0:	4b35      	ldr	r3, [pc, #212]	@ (8003ea8 <xTaskResumeAll+0x11c>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d05d      	beq.n	8003e94 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003dd8:	e02e      	b.n	8003e38 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dda:	4b34      	ldr	r3, [pc, #208]	@ (8003eac <xTaskResumeAll+0x120>)
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	3318      	adds	r3, #24
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7fe ffda 	bl	8002da0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	3304      	adds	r3, #4
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7fe ffd5 	bl	8002da0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	409a      	lsls	r2, r3
 8003dfe:	4b2c      	ldr	r3, [pc, #176]	@ (8003eb0 <xTaskResumeAll+0x124>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	4a2a      	ldr	r2, [pc, #168]	@ (8003eb0 <xTaskResumeAll+0x124>)
 8003e06:	6013      	str	r3, [r2, #0]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	4413      	add	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	4a27      	ldr	r2, [pc, #156]	@ (8003eb4 <xTaskResumeAll+0x128>)
 8003e16:	441a      	add	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	3304      	adds	r3, #4
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4610      	mov	r0, r2
 8003e20:	f7fe ff61 	bl	8002ce6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e28:	4b23      	ldr	r3, [pc, #140]	@ (8003eb8 <xTaskResumeAll+0x12c>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d302      	bcc.n	8003e38 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003e32:	4b22      	ldr	r3, [pc, #136]	@ (8003ebc <xTaskResumeAll+0x130>)
 8003e34:	2201      	movs	r2, #1
 8003e36:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e38:	4b1c      	ldr	r3, [pc, #112]	@ (8003eac <xTaskResumeAll+0x120>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1cc      	bne.n	8003dda <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e46:	f000 fb1b 	bl	8004480 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003e4a:	4b1d      	ldr	r3, [pc, #116]	@ (8003ec0 <xTaskResumeAll+0x134>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d010      	beq.n	8003e78 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e56:	f000 f837 	bl	8003ec8 <xTaskIncrementTick>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d002      	beq.n	8003e66 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003e60:	4b16      	ldr	r3, [pc, #88]	@ (8003ebc <xTaskResumeAll+0x130>)
 8003e62:	2201      	movs	r2, #1
 8003e64:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1f1      	bne.n	8003e56 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003e72:	4b13      	ldr	r3, [pc, #76]	@ (8003ec0 <xTaskResumeAll+0x134>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003e78:	4b10      	ldr	r3, [pc, #64]	@ (8003ebc <xTaskResumeAll+0x130>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d009      	beq.n	8003e94 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003e80:	2301      	movs	r3, #1
 8003e82:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003e84:	4b0f      	ldr	r3, [pc, #60]	@ (8003ec4 <xTaskResumeAll+0x138>)
 8003e86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	f3bf 8f4f 	dsb	sy
 8003e90:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e94:	f000 fe9a 	bl	8004bcc <vPortExitCritical>

	return xAlreadyYielded;
 8003e98:	68bb      	ldr	r3, [r7, #8]
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	2000044c 	.word	0x2000044c
 8003ea8:	20000424 	.word	0x20000424
 8003eac:	200003e4 	.word	0x200003e4
 8003eb0:	2000042c 	.word	0x2000042c
 8003eb4:	20000328 	.word	0x20000328
 8003eb8:	20000324 	.word	0x20000324
 8003ebc:	20000438 	.word	0x20000438
 8003ec0:	20000434 	.word	0x20000434
 8003ec4:	e000ed04 	.word	0xe000ed04

08003ec8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ed2:	4b4f      	ldr	r3, [pc, #316]	@ (8004010 <xTaskIncrementTick+0x148>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f040 808f 	bne.w	8003ffa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003edc:	4b4d      	ldr	r3, [pc, #308]	@ (8004014 <xTaskIncrementTick+0x14c>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003ee4:	4a4b      	ldr	r2, [pc, #300]	@ (8004014 <xTaskIncrementTick+0x14c>)
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d121      	bne.n	8003f34 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003ef0:	4b49      	ldr	r3, [pc, #292]	@ (8004018 <xTaskIncrementTick+0x150>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00b      	beq.n	8003f12 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003efe:	f383 8811 	msr	BASEPRI, r3
 8003f02:	f3bf 8f6f 	isb	sy
 8003f06:	f3bf 8f4f 	dsb	sy
 8003f0a:	603b      	str	r3, [r7, #0]
}
 8003f0c:	bf00      	nop
 8003f0e:	bf00      	nop
 8003f10:	e7fd      	b.n	8003f0e <xTaskIncrementTick+0x46>
 8003f12:	4b41      	ldr	r3, [pc, #260]	@ (8004018 <xTaskIncrementTick+0x150>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	60fb      	str	r3, [r7, #12]
 8003f18:	4b40      	ldr	r3, [pc, #256]	@ (800401c <xTaskIncrementTick+0x154>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a3e      	ldr	r2, [pc, #248]	@ (8004018 <xTaskIncrementTick+0x150>)
 8003f1e:	6013      	str	r3, [r2, #0]
 8003f20:	4a3e      	ldr	r2, [pc, #248]	@ (800401c <xTaskIncrementTick+0x154>)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6013      	str	r3, [r2, #0]
 8003f26:	4b3e      	ldr	r3, [pc, #248]	@ (8004020 <xTaskIncrementTick+0x158>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	4a3c      	ldr	r2, [pc, #240]	@ (8004020 <xTaskIncrementTick+0x158>)
 8003f2e:	6013      	str	r3, [r2, #0]
 8003f30:	f000 faa6 	bl	8004480 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f34:	4b3b      	ldr	r3, [pc, #236]	@ (8004024 <xTaskIncrementTick+0x15c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d348      	bcc.n	8003fd0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f3e:	4b36      	ldr	r3, [pc, #216]	@ (8004018 <xTaskIncrementTick+0x150>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d104      	bne.n	8003f52 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f48:	4b36      	ldr	r3, [pc, #216]	@ (8004024 <xTaskIncrementTick+0x15c>)
 8003f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f4e:	601a      	str	r2, [r3, #0]
					break;
 8003f50:	e03e      	b.n	8003fd0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f52:	4b31      	ldr	r3, [pc, #196]	@ (8004018 <xTaskIncrementTick+0x150>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d203      	bcs.n	8003f72 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003f6a:	4a2e      	ldr	r2, [pc, #184]	@ (8004024 <xTaskIncrementTick+0x15c>)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003f70:	e02e      	b.n	8003fd0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	3304      	adds	r3, #4
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7fe ff12 	bl	8002da0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d004      	beq.n	8003f8e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	3318      	adds	r3, #24
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7fe ff09 	bl	8002da0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f92:	2201      	movs	r2, #1
 8003f94:	409a      	lsls	r2, r3
 8003f96:	4b24      	ldr	r3, [pc, #144]	@ (8004028 <xTaskIncrementTick+0x160>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	4a22      	ldr	r2, [pc, #136]	@ (8004028 <xTaskIncrementTick+0x160>)
 8003f9e:	6013      	str	r3, [r2, #0]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	4413      	add	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4a1f      	ldr	r2, [pc, #124]	@ (800402c <xTaskIncrementTick+0x164>)
 8003fae:	441a      	add	r2, r3
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	3304      	adds	r3, #4
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	4610      	mov	r0, r2
 8003fb8:	f7fe fe95 	bl	8002ce6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fc0:	4b1b      	ldr	r3, [pc, #108]	@ (8004030 <xTaskIncrementTick+0x168>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d3b9      	bcc.n	8003f3e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fce:	e7b6      	b.n	8003f3e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003fd0:	4b17      	ldr	r3, [pc, #92]	@ (8004030 <xTaskIncrementTick+0x168>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fd6:	4915      	ldr	r1, [pc, #84]	@ (800402c <xTaskIncrementTick+0x164>)
 8003fd8:	4613      	mov	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4413      	add	r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	440b      	add	r3, r1
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d901      	bls.n	8003fec <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003fec:	4b11      	ldr	r3, [pc, #68]	@ (8004034 <xTaskIncrementTick+0x16c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d007      	beq.n	8004004 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	617b      	str	r3, [r7, #20]
 8003ff8:	e004      	b.n	8004004 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8004038 <xTaskIncrementTick+0x170>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	3301      	adds	r3, #1
 8004000:	4a0d      	ldr	r2, [pc, #52]	@ (8004038 <xTaskIncrementTick+0x170>)
 8004002:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004004:	697b      	ldr	r3, [r7, #20]
}
 8004006:	4618      	mov	r0, r3
 8004008:	3718      	adds	r7, #24
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	2000044c 	.word	0x2000044c
 8004014:	20000428 	.word	0x20000428
 8004018:	200003dc 	.word	0x200003dc
 800401c:	200003e0 	.word	0x200003e0
 8004020:	2000043c 	.word	0x2000043c
 8004024:	20000444 	.word	0x20000444
 8004028:	2000042c 	.word	0x2000042c
 800402c:	20000328 	.word	0x20000328
 8004030:	20000324 	.word	0x20000324
 8004034:	20000438 	.word	0x20000438
 8004038:	20000434 	.word	0x20000434

0800403c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800403c:	b480      	push	{r7}
 800403e:	b087      	sub	sp, #28
 8004040:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004042:	4b27      	ldr	r3, [pc, #156]	@ (80040e0 <vTaskSwitchContext+0xa4>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d003      	beq.n	8004052 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800404a:	4b26      	ldr	r3, [pc, #152]	@ (80040e4 <vTaskSwitchContext+0xa8>)
 800404c:	2201      	movs	r2, #1
 800404e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004050:	e040      	b.n	80040d4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004052:	4b24      	ldr	r3, [pc, #144]	@ (80040e4 <vTaskSwitchContext+0xa8>)
 8004054:	2200      	movs	r2, #0
 8004056:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004058:	4b23      	ldr	r3, [pc, #140]	@ (80040e8 <vTaskSwitchContext+0xac>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	fab3 f383 	clz	r3, r3
 8004064:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004066:	7afb      	ldrb	r3, [r7, #11]
 8004068:	f1c3 031f 	rsb	r3, r3, #31
 800406c:	617b      	str	r3, [r7, #20]
 800406e:	491f      	ldr	r1, [pc, #124]	@ (80040ec <vTaskSwitchContext+0xb0>)
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	4613      	mov	r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	4413      	add	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	440b      	add	r3, r1
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10b      	bne.n	800409a <vTaskSwitchContext+0x5e>
	__asm volatile
 8004082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004086:	f383 8811 	msr	BASEPRI, r3
 800408a:	f3bf 8f6f 	isb	sy
 800408e:	f3bf 8f4f 	dsb	sy
 8004092:	607b      	str	r3, [r7, #4]
}
 8004094:	bf00      	nop
 8004096:	bf00      	nop
 8004098:	e7fd      	b.n	8004096 <vTaskSwitchContext+0x5a>
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	4613      	mov	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4413      	add	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4a11      	ldr	r2, [pc, #68]	@ (80040ec <vTaskSwitchContext+0xb0>)
 80040a6:	4413      	add	r3, r2
 80040a8:	613b      	str	r3, [r7, #16]
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	605a      	str	r2, [r3, #4]
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	685a      	ldr	r2, [r3, #4]
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	3308      	adds	r3, #8
 80040bc:	429a      	cmp	r2, r3
 80040be:	d104      	bne.n	80040ca <vTaskSwitchContext+0x8e>
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	685a      	ldr	r2, [r3, #4]
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	605a      	str	r2, [r3, #4]
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	4a07      	ldr	r2, [pc, #28]	@ (80040f0 <vTaskSwitchContext+0xb4>)
 80040d2:	6013      	str	r3, [r2, #0]
}
 80040d4:	bf00      	nop
 80040d6:	371c      	adds	r7, #28
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	2000044c 	.word	0x2000044c
 80040e4:	20000438 	.word	0x20000438
 80040e8:	2000042c 	.word	0x2000042c
 80040ec:	20000328 	.word	0x20000328
 80040f0:	20000324 	.word	0x20000324

080040f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10b      	bne.n	800411c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004108:	f383 8811 	msr	BASEPRI, r3
 800410c:	f3bf 8f6f 	isb	sy
 8004110:	f3bf 8f4f 	dsb	sy
 8004114:	60fb      	str	r3, [r7, #12]
}
 8004116:	bf00      	nop
 8004118:	bf00      	nop
 800411a:	e7fd      	b.n	8004118 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800411c:	4b07      	ldr	r3, [pc, #28]	@ (800413c <vTaskPlaceOnEventList+0x48>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	3318      	adds	r3, #24
 8004122:	4619      	mov	r1, r3
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f7fe fe02 	bl	8002d2e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800412a:	2101      	movs	r1, #1
 800412c:	6838      	ldr	r0, [r7, #0]
 800412e:	f000 fb87 	bl	8004840 <prvAddCurrentTaskToDelayedList>
}
 8004132:	bf00      	nop
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	20000324 	.word	0x20000324

08004140 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10b      	bne.n	800416e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800415a:	f383 8811 	msr	BASEPRI, r3
 800415e:	f3bf 8f6f 	isb	sy
 8004162:	f3bf 8f4f 	dsb	sy
 8004166:	60fb      	str	r3, [r7, #12]
}
 8004168:	bf00      	nop
 800416a:	bf00      	nop
 800416c:	e7fd      	b.n	800416a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	3318      	adds	r3, #24
 8004172:	4618      	mov	r0, r3
 8004174:	f7fe fe14 	bl	8002da0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004178:	4b1d      	ldr	r3, [pc, #116]	@ (80041f0 <xTaskRemoveFromEventList+0xb0>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d11c      	bne.n	80041ba <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	3304      	adds	r3, #4
 8004184:	4618      	mov	r0, r3
 8004186:	f7fe fe0b 	bl	8002da0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800418e:	2201      	movs	r2, #1
 8004190:	409a      	lsls	r2, r3
 8004192:	4b18      	ldr	r3, [pc, #96]	@ (80041f4 <xTaskRemoveFromEventList+0xb4>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4313      	orrs	r3, r2
 8004198:	4a16      	ldr	r2, [pc, #88]	@ (80041f4 <xTaskRemoveFromEventList+0xb4>)
 800419a:	6013      	str	r3, [r2, #0]
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041a0:	4613      	mov	r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4413      	add	r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	4a13      	ldr	r2, [pc, #76]	@ (80041f8 <xTaskRemoveFromEventList+0xb8>)
 80041aa:	441a      	add	r2, r3
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	3304      	adds	r3, #4
 80041b0:	4619      	mov	r1, r3
 80041b2:	4610      	mov	r0, r2
 80041b4:	f7fe fd97 	bl	8002ce6 <vListInsertEnd>
 80041b8:	e005      	b.n	80041c6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	3318      	adds	r3, #24
 80041be:	4619      	mov	r1, r3
 80041c0:	480e      	ldr	r0, [pc, #56]	@ (80041fc <xTaskRemoveFromEventList+0xbc>)
 80041c2:	f7fe fd90 	bl	8002ce6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004200 <xTaskRemoveFromEventList+0xc0>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d905      	bls.n	80041e0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80041d4:	2301      	movs	r3, #1
 80041d6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80041d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004204 <xTaskRemoveFromEventList+0xc4>)
 80041da:	2201      	movs	r2, #1
 80041dc:	601a      	str	r2, [r3, #0]
 80041de:	e001      	b.n	80041e4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80041e0:	2300      	movs	r3, #0
 80041e2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80041e4:	697b      	ldr	r3, [r7, #20]
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3718      	adds	r7, #24
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	2000044c 	.word	0x2000044c
 80041f4:	2000042c 	.word	0x2000042c
 80041f8:	20000328 	.word	0x20000328
 80041fc:	200003e4 	.word	0x200003e4
 8004200:	20000324 	.word	0x20000324
 8004204:	20000438 	.word	0x20000438

08004208 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004210:	4b06      	ldr	r3, [pc, #24]	@ (800422c <vTaskInternalSetTimeOutState+0x24>)
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004218:	4b05      	ldr	r3, [pc, #20]	@ (8004230 <vTaskInternalSetTimeOutState+0x28>)
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	605a      	str	r2, [r3, #4]
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	2000043c 	.word	0x2000043c
 8004230:	20000428 	.word	0x20000428

08004234 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b088      	sub	sp, #32
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10b      	bne.n	800425c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004248:	f383 8811 	msr	BASEPRI, r3
 800424c:	f3bf 8f6f 	isb	sy
 8004250:	f3bf 8f4f 	dsb	sy
 8004254:	613b      	str	r3, [r7, #16]
}
 8004256:	bf00      	nop
 8004258:	bf00      	nop
 800425a:	e7fd      	b.n	8004258 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10b      	bne.n	800427a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004266:	f383 8811 	msr	BASEPRI, r3
 800426a:	f3bf 8f6f 	isb	sy
 800426e:	f3bf 8f4f 	dsb	sy
 8004272:	60fb      	str	r3, [r7, #12]
}
 8004274:	bf00      	nop
 8004276:	bf00      	nop
 8004278:	e7fd      	b.n	8004276 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800427a:	f000 fc75 	bl	8004b68 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800427e:	4b1d      	ldr	r3, [pc, #116]	@ (80042f4 <xTaskCheckForTimeOut+0xc0>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004296:	d102      	bne.n	800429e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004298:	2300      	movs	r3, #0
 800429a:	61fb      	str	r3, [r7, #28]
 800429c:	e023      	b.n	80042e6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	4b15      	ldr	r3, [pc, #84]	@ (80042f8 <xTaskCheckForTimeOut+0xc4>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d007      	beq.n	80042ba <xTaskCheckForTimeOut+0x86>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	69ba      	ldr	r2, [r7, #24]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d302      	bcc.n	80042ba <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80042b4:	2301      	movs	r3, #1
 80042b6:	61fb      	str	r3, [r7, #28]
 80042b8:	e015      	b.n	80042e6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d20b      	bcs.n	80042dc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	1ad2      	subs	r2, r2, r3
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f7ff ff99 	bl	8004208 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80042d6:	2300      	movs	r3, #0
 80042d8:	61fb      	str	r3, [r7, #28]
 80042da:	e004      	b.n	80042e6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	2200      	movs	r2, #0
 80042e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80042e2:	2301      	movs	r3, #1
 80042e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80042e6:	f000 fc71 	bl	8004bcc <vPortExitCritical>

	return xReturn;
 80042ea:	69fb      	ldr	r3, [r7, #28]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3720      	adds	r7, #32
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	20000428 	.word	0x20000428
 80042f8:	2000043c 	.word	0x2000043c

080042fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004300:	4b03      	ldr	r3, [pc, #12]	@ (8004310 <vTaskMissedYield+0x14>)
 8004302:	2201      	movs	r2, #1
 8004304:	601a      	str	r2, [r3, #0]
}
 8004306:	bf00      	nop
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr
 8004310:	20000438 	.word	0x20000438

08004314 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800431c:	f000 f852 	bl	80043c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004320:	4b06      	ldr	r3, [pc, #24]	@ (800433c <prvIdleTask+0x28>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d9f9      	bls.n	800431c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004328:	4b05      	ldr	r3, [pc, #20]	@ (8004340 <prvIdleTask+0x2c>)
 800432a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800432e:	601a      	str	r2, [r3, #0]
 8004330:	f3bf 8f4f 	dsb	sy
 8004334:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004338:	e7f0      	b.n	800431c <prvIdleTask+0x8>
 800433a:	bf00      	nop
 800433c:	20000328 	.word	0x20000328
 8004340:	e000ed04 	.word	0xe000ed04

08004344 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800434a:	2300      	movs	r3, #0
 800434c:	607b      	str	r3, [r7, #4]
 800434e:	e00c      	b.n	800436a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	4613      	mov	r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	4413      	add	r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	4a12      	ldr	r2, [pc, #72]	@ (80043a4 <prvInitialiseTaskLists+0x60>)
 800435c:	4413      	add	r3, r2
 800435e:	4618      	mov	r0, r3
 8004360:	f7fe fc94 	bl	8002c8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	3301      	adds	r3, #1
 8004368:	607b      	str	r3, [r7, #4]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2b06      	cmp	r3, #6
 800436e:	d9ef      	bls.n	8004350 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004370:	480d      	ldr	r0, [pc, #52]	@ (80043a8 <prvInitialiseTaskLists+0x64>)
 8004372:	f7fe fc8b 	bl	8002c8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004376:	480d      	ldr	r0, [pc, #52]	@ (80043ac <prvInitialiseTaskLists+0x68>)
 8004378:	f7fe fc88 	bl	8002c8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800437c:	480c      	ldr	r0, [pc, #48]	@ (80043b0 <prvInitialiseTaskLists+0x6c>)
 800437e:	f7fe fc85 	bl	8002c8c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004382:	480c      	ldr	r0, [pc, #48]	@ (80043b4 <prvInitialiseTaskLists+0x70>)
 8004384:	f7fe fc82 	bl	8002c8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004388:	480b      	ldr	r0, [pc, #44]	@ (80043b8 <prvInitialiseTaskLists+0x74>)
 800438a:	f7fe fc7f 	bl	8002c8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800438e:	4b0b      	ldr	r3, [pc, #44]	@ (80043bc <prvInitialiseTaskLists+0x78>)
 8004390:	4a05      	ldr	r2, [pc, #20]	@ (80043a8 <prvInitialiseTaskLists+0x64>)
 8004392:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004394:	4b0a      	ldr	r3, [pc, #40]	@ (80043c0 <prvInitialiseTaskLists+0x7c>)
 8004396:	4a05      	ldr	r2, [pc, #20]	@ (80043ac <prvInitialiseTaskLists+0x68>)
 8004398:	601a      	str	r2, [r3, #0]
}
 800439a:	bf00      	nop
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	20000328 	.word	0x20000328
 80043a8:	200003b4 	.word	0x200003b4
 80043ac:	200003c8 	.word	0x200003c8
 80043b0:	200003e4 	.word	0x200003e4
 80043b4:	200003f8 	.word	0x200003f8
 80043b8:	20000410 	.word	0x20000410
 80043bc:	200003dc 	.word	0x200003dc
 80043c0:	200003e0 	.word	0x200003e0

080043c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043ca:	e019      	b.n	8004400 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80043cc:	f000 fbcc 	bl	8004b68 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043d0:	4b10      	ldr	r3, [pc, #64]	@ (8004414 <prvCheckTasksWaitingTermination+0x50>)
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	3304      	adds	r3, #4
 80043dc:	4618      	mov	r0, r3
 80043de:	f7fe fcdf 	bl	8002da0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80043e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004418 <prvCheckTasksWaitingTermination+0x54>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	3b01      	subs	r3, #1
 80043e8:	4a0b      	ldr	r2, [pc, #44]	@ (8004418 <prvCheckTasksWaitingTermination+0x54>)
 80043ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80043ec:	4b0b      	ldr	r3, [pc, #44]	@ (800441c <prvCheckTasksWaitingTermination+0x58>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	3b01      	subs	r3, #1
 80043f2:	4a0a      	ldr	r2, [pc, #40]	@ (800441c <prvCheckTasksWaitingTermination+0x58>)
 80043f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80043f6:	f000 fbe9 	bl	8004bcc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 f810 	bl	8004420 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004400:	4b06      	ldr	r3, [pc, #24]	@ (800441c <prvCheckTasksWaitingTermination+0x58>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1e1      	bne.n	80043cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004408:	bf00      	nop
 800440a:	bf00      	nop
 800440c:	3708      	adds	r7, #8
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	200003f8 	.word	0x200003f8
 8004418:	20000424 	.word	0x20000424
 800441c:	2000040c 	.word	0x2000040c

08004420 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800442e:	2b00      	cmp	r3, #0
 8004430:	d108      	bne.n	8004444 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004436:	4618      	mov	r0, r3
 8004438:	f000 fd86 	bl	8004f48 <vPortFree>
				vPortFree( pxTCB );
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 fd83 	bl	8004f48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004442:	e019      	b.n	8004478 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800444a:	2b01      	cmp	r3, #1
 800444c:	d103      	bne.n	8004456 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 fd7a 	bl	8004f48 <vPortFree>
	}
 8004454:	e010      	b.n	8004478 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800445c:	2b02      	cmp	r3, #2
 800445e:	d00b      	beq.n	8004478 <prvDeleteTCB+0x58>
	__asm volatile
 8004460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004464:	f383 8811 	msr	BASEPRI, r3
 8004468:	f3bf 8f6f 	isb	sy
 800446c:	f3bf 8f4f 	dsb	sy
 8004470:	60fb      	str	r3, [r7, #12]
}
 8004472:	bf00      	nop
 8004474:	bf00      	nop
 8004476:	e7fd      	b.n	8004474 <prvDeleteTCB+0x54>
	}
 8004478:	bf00      	nop
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004486:	4b0c      	ldr	r3, [pc, #48]	@ (80044b8 <prvResetNextTaskUnblockTime+0x38>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d104      	bne.n	800449a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004490:	4b0a      	ldr	r3, [pc, #40]	@ (80044bc <prvResetNextTaskUnblockTime+0x3c>)
 8004492:	f04f 32ff 	mov.w	r2, #4294967295
 8004496:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004498:	e008      	b.n	80044ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800449a:	4b07      	ldr	r3, [pc, #28]	@ (80044b8 <prvResetNextTaskUnblockTime+0x38>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	4a04      	ldr	r2, [pc, #16]	@ (80044bc <prvResetNextTaskUnblockTime+0x3c>)
 80044aa:	6013      	str	r3, [r2, #0]
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	200003dc 	.word	0x200003dc
 80044bc:	20000444 	.word	0x20000444

080044c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80044c6:	4b0b      	ldr	r3, [pc, #44]	@ (80044f4 <xTaskGetSchedulerState+0x34>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d102      	bne.n	80044d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80044ce:	2301      	movs	r3, #1
 80044d0:	607b      	str	r3, [r7, #4]
 80044d2:	e008      	b.n	80044e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044d4:	4b08      	ldr	r3, [pc, #32]	@ (80044f8 <xTaskGetSchedulerState+0x38>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d102      	bne.n	80044e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80044dc:	2302      	movs	r3, #2
 80044de:	607b      	str	r3, [r7, #4]
 80044e0:	e001      	b.n	80044e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80044e2:	2300      	movs	r3, #0
 80044e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80044e6:	687b      	ldr	r3, [r7, #4]
	}
 80044e8:	4618      	mov	r0, r3
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	20000430 	.word	0x20000430
 80044f8:	2000044c 	.word	0x2000044c

080044fc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004508:	2300      	movs	r3, #0
 800450a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d05e      	beq.n	80045d0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004516:	4b31      	ldr	r3, [pc, #196]	@ (80045dc <xTaskPriorityInherit+0xe0>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800451c:	429a      	cmp	r2, r3
 800451e:	d24e      	bcs.n	80045be <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	2b00      	cmp	r3, #0
 8004526:	db06      	blt.n	8004536 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004528:	4b2c      	ldr	r3, [pc, #176]	@ (80045dc <xTaskPriorityInherit+0xe0>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800452e:	f1c3 0207 	rsb	r2, r3, #7
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	6959      	ldr	r1, [r3, #20]
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800453e:	4613      	mov	r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	4413      	add	r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	4a26      	ldr	r2, [pc, #152]	@ (80045e0 <xTaskPriorityInherit+0xe4>)
 8004548:	4413      	add	r3, r2
 800454a:	4299      	cmp	r1, r3
 800454c:	d12f      	bne.n	80045ae <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	3304      	adds	r3, #4
 8004552:	4618      	mov	r0, r3
 8004554:	f7fe fc24 	bl	8002da0 <uxListRemove>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10a      	bne.n	8004574 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004562:	2201      	movs	r2, #1
 8004564:	fa02 f303 	lsl.w	r3, r2, r3
 8004568:	43da      	mvns	r2, r3
 800456a:	4b1e      	ldr	r3, [pc, #120]	@ (80045e4 <xTaskPriorityInherit+0xe8>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4013      	ands	r3, r2
 8004570:	4a1c      	ldr	r2, [pc, #112]	@ (80045e4 <xTaskPriorityInherit+0xe8>)
 8004572:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004574:	4b19      	ldr	r3, [pc, #100]	@ (80045dc <xTaskPriorityInherit+0xe0>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004582:	2201      	movs	r2, #1
 8004584:	409a      	lsls	r2, r3
 8004586:	4b17      	ldr	r3, [pc, #92]	@ (80045e4 <xTaskPriorityInherit+0xe8>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4313      	orrs	r3, r2
 800458c:	4a15      	ldr	r2, [pc, #84]	@ (80045e4 <xTaskPriorityInherit+0xe8>)
 800458e:	6013      	str	r3, [r2, #0]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004594:	4613      	mov	r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	4413      	add	r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	4a10      	ldr	r2, [pc, #64]	@ (80045e0 <xTaskPriorityInherit+0xe4>)
 800459e:	441a      	add	r2, r3
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	3304      	adds	r3, #4
 80045a4:	4619      	mov	r1, r3
 80045a6:	4610      	mov	r0, r2
 80045a8:	f7fe fb9d 	bl	8002ce6 <vListInsertEnd>
 80045ac:	e004      	b.n	80045b8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80045ae:	4b0b      	ldr	r3, [pc, #44]	@ (80045dc <xTaskPriorityInherit+0xe0>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80045b8:	2301      	movs	r3, #1
 80045ba:	60fb      	str	r3, [r7, #12]
 80045bc:	e008      	b.n	80045d0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045c2:	4b06      	ldr	r3, [pc, #24]	@ (80045dc <xTaskPriorityInherit+0xe0>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d201      	bcs.n	80045d0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80045cc:	2301      	movs	r3, #1
 80045ce:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80045d0:	68fb      	ldr	r3, [r7, #12]
	}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	20000324 	.word	0x20000324
 80045e0:	20000328 	.word	0x20000328
 80045e4:	2000042c 	.word	0x2000042c

080045e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b086      	sub	sp, #24
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80045f4:	2300      	movs	r3, #0
 80045f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d070      	beq.n	80046e0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80045fe:	4b3b      	ldr	r3, [pc, #236]	@ (80046ec <xTaskPriorityDisinherit+0x104>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	429a      	cmp	r2, r3
 8004606:	d00b      	beq.n	8004620 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800460c:	f383 8811 	msr	BASEPRI, r3
 8004610:	f3bf 8f6f 	isb	sy
 8004614:	f3bf 8f4f 	dsb	sy
 8004618:	60fb      	str	r3, [r7, #12]
}
 800461a:	bf00      	nop
 800461c:	bf00      	nop
 800461e:	e7fd      	b.n	800461c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004624:	2b00      	cmp	r3, #0
 8004626:	d10b      	bne.n	8004640 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800462c:	f383 8811 	msr	BASEPRI, r3
 8004630:	f3bf 8f6f 	isb	sy
 8004634:	f3bf 8f4f 	dsb	sy
 8004638:	60bb      	str	r3, [r7, #8]
}
 800463a:	bf00      	nop
 800463c:	bf00      	nop
 800463e:	e7fd      	b.n	800463c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004644:	1e5a      	subs	r2, r3, #1
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004652:	429a      	cmp	r2, r3
 8004654:	d044      	beq.n	80046e0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800465a:	2b00      	cmp	r3, #0
 800465c:	d140      	bne.n	80046e0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	3304      	adds	r3, #4
 8004662:	4618      	mov	r0, r3
 8004664:	f7fe fb9c 	bl	8002da0 <uxListRemove>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d115      	bne.n	800469a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004672:	491f      	ldr	r1, [pc, #124]	@ (80046f0 <xTaskPriorityDisinherit+0x108>)
 8004674:	4613      	mov	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	4413      	add	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	440b      	add	r3, r1
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10a      	bne.n	800469a <xTaskPriorityDisinherit+0xb2>
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004688:	2201      	movs	r2, #1
 800468a:	fa02 f303 	lsl.w	r3, r2, r3
 800468e:	43da      	mvns	r2, r3
 8004690:	4b18      	ldr	r3, [pc, #96]	@ (80046f4 <xTaskPriorityDisinherit+0x10c>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4013      	ands	r3, r2
 8004696:	4a17      	ldr	r2, [pc, #92]	@ (80046f4 <xTaskPriorityDisinherit+0x10c>)
 8004698:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046a6:	f1c3 0207 	rsb	r2, r3, #7
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046b2:	2201      	movs	r2, #1
 80046b4:	409a      	lsls	r2, r3
 80046b6:	4b0f      	ldr	r3, [pc, #60]	@ (80046f4 <xTaskPriorityDisinherit+0x10c>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	4a0d      	ldr	r2, [pc, #52]	@ (80046f4 <xTaskPriorityDisinherit+0x10c>)
 80046be:	6013      	str	r3, [r2, #0]
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046c4:	4613      	mov	r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	4413      	add	r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	4a08      	ldr	r2, [pc, #32]	@ (80046f0 <xTaskPriorityDisinherit+0x108>)
 80046ce:	441a      	add	r2, r3
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	3304      	adds	r3, #4
 80046d4:	4619      	mov	r1, r3
 80046d6:	4610      	mov	r0, r2
 80046d8:	f7fe fb05 	bl	8002ce6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80046dc:	2301      	movs	r3, #1
 80046de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80046e0:	697b      	ldr	r3, [r7, #20]
	}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3718      	adds	r7, #24
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	20000324 	.word	0x20000324
 80046f0:	20000328 	.word	0x20000328
 80046f4:	2000042c 	.word	0x2000042c

080046f8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b088      	sub	sp, #32
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004706:	2301      	movs	r3, #1
 8004708:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d079      	beq.n	8004804 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10b      	bne.n	8004730 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800471c:	f383 8811 	msr	BASEPRI, r3
 8004720:	f3bf 8f6f 	isb	sy
 8004724:	f3bf 8f4f 	dsb	sy
 8004728:	60fb      	str	r3, [r7, #12]
}
 800472a:	bf00      	nop
 800472c:	bf00      	nop
 800472e:	e7fd      	b.n	800472c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	429a      	cmp	r2, r3
 8004738:	d902      	bls.n	8004740 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	61fb      	str	r3, [r7, #28]
 800473e:	e002      	b.n	8004746 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004744:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800474a:	69fa      	ldr	r2, [r7, #28]
 800474c:	429a      	cmp	r2, r3
 800474e:	d059      	beq.n	8004804 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	429a      	cmp	r2, r3
 8004758:	d154      	bne.n	8004804 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800475a:	4b2c      	ldr	r3, [pc, #176]	@ (800480c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	429a      	cmp	r2, r3
 8004762:	d10b      	bne.n	800477c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8004764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004768:	f383 8811 	msr	BASEPRI, r3
 800476c:	f3bf 8f6f 	isb	sy
 8004770:	f3bf 8f4f 	dsb	sy
 8004774:	60bb      	str	r3, [r7, #8]
}
 8004776:	bf00      	nop
 8004778:	bf00      	nop
 800477a:	e7fd      	b.n	8004778 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004780:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	69fa      	ldr	r2, [r7, #28]
 8004786:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	2b00      	cmp	r3, #0
 800478e:	db04      	blt.n	800479a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	f1c3 0207 	rsb	r2, r3, #7
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	6959      	ldr	r1, [r3, #20]
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	4613      	mov	r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	4413      	add	r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	4a19      	ldr	r2, [pc, #100]	@ (8004810 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80047aa:	4413      	add	r3, r2
 80047ac:	4299      	cmp	r1, r3
 80047ae:	d129      	bne.n	8004804 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	3304      	adds	r3, #4
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7fe faf3 	bl	8002da0 <uxListRemove>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10a      	bne.n	80047d6 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c4:	2201      	movs	r2, #1
 80047c6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ca:	43da      	mvns	r2, r3
 80047cc:	4b11      	ldr	r3, [pc, #68]	@ (8004814 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4013      	ands	r3, r2
 80047d2:	4a10      	ldr	r2, [pc, #64]	@ (8004814 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80047d4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047da:	2201      	movs	r2, #1
 80047dc:	409a      	lsls	r2, r3
 80047de:	4b0d      	ldr	r3, [pc, #52]	@ (8004814 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	4a0b      	ldr	r2, [pc, #44]	@ (8004814 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80047e6:	6013      	str	r3, [r2, #0]
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047ec:	4613      	mov	r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	4413      	add	r3, r2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4a06      	ldr	r2, [pc, #24]	@ (8004810 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80047f6:	441a      	add	r2, r3
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	3304      	adds	r3, #4
 80047fc:	4619      	mov	r1, r3
 80047fe:	4610      	mov	r0, r2
 8004800:	f7fe fa71 	bl	8002ce6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004804:	bf00      	nop
 8004806:	3720      	adds	r7, #32
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	20000324 	.word	0x20000324
 8004810:	20000328 	.word	0x20000328
 8004814:	2000042c 	.word	0x2000042c

08004818 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004818:	b480      	push	{r7}
 800481a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800481c:	4b07      	ldr	r3, [pc, #28]	@ (800483c <pvTaskIncrementMutexHeldCount+0x24>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d004      	beq.n	800482e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004824:	4b05      	ldr	r3, [pc, #20]	@ (800483c <pvTaskIncrementMutexHeldCount+0x24>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800482a:	3201      	adds	r2, #1
 800482c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800482e:	4b03      	ldr	r3, [pc, #12]	@ (800483c <pvTaskIncrementMutexHeldCount+0x24>)
 8004830:	681b      	ldr	r3, [r3, #0]
	}
 8004832:	4618      	mov	r0, r3
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr
 800483c:	20000324 	.word	0x20000324

08004840 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800484a:	4b29      	ldr	r3, [pc, #164]	@ (80048f0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004850:	4b28      	ldr	r3, [pc, #160]	@ (80048f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	3304      	adds	r3, #4
 8004856:	4618      	mov	r0, r3
 8004858:	f7fe faa2 	bl	8002da0 <uxListRemove>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10b      	bne.n	800487a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004862:	4b24      	ldr	r3, [pc, #144]	@ (80048f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004868:	2201      	movs	r2, #1
 800486a:	fa02 f303 	lsl.w	r3, r2, r3
 800486e:	43da      	mvns	r2, r3
 8004870:	4b21      	ldr	r3, [pc, #132]	@ (80048f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4013      	ands	r3, r2
 8004876:	4a20      	ldr	r2, [pc, #128]	@ (80048f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004878:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004880:	d10a      	bne.n	8004898 <prvAddCurrentTaskToDelayedList+0x58>
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d007      	beq.n	8004898 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004888:	4b1a      	ldr	r3, [pc, #104]	@ (80048f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	3304      	adds	r3, #4
 800488e:	4619      	mov	r1, r3
 8004890:	481a      	ldr	r0, [pc, #104]	@ (80048fc <prvAddCurrentTaskToDelayedList+0xbc>)
 8004892:	f7fe fa28 	bl	8002ce6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004896:	e026      	b.n	80048e6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4413      	add	r3, r2
 800489e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80048a0:	4b14      	ldr	r3, [pc, #80]	@ (80048f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80048a8:	68ba      	ldr	r2, [r7, #8]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d209      	bcs.n	80048c4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048b0:	4b13      	ldr	r3, [pc, #76]	@ (8004900 <prvAddCurrentTaskToDelayedList+0xc0>)
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	4b0f      	ldr	r3, [pc, #60]	@ (80048f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	3304      	adds	r3, #4
 80048ba:	4619      	mov	r1, r3
 80048bc:	4610      	mov	r0, r2
 80048be:	f7fe fa36 	bl	8002d2e <vListInsert>
}
 80048c2:	e010      	b.n	80048e6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048c4:	4b0f      	ldr	r3, [pc, #60]	@ (8004904 <prvAddCurrentTaskToDelayedList+0xc4>)
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	4b0a      	ldr	r3, [pc, #40]	@ (80048f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	3304      	adds	r3, #4
 80048ce:	4619      	mov	r1, r3
 80048d0:	4610      	mov	r0, r2
 80048d2:	f7fe fa2c 	bl	8002d2e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80048d6:	4b0c      	ldr	r3, [pc, #48]	@ (8004908 <prvAddCurrentTaskToDelayedList+0xc8>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d202      	bcs.n	80048e6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80048e0:	4a09      	ldr	r2, [pc, #36]	@ (8004908 <prvAddCurrentTaskToDelayedList+0xc8>)
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	6013      	str	r3, [r2, #0]
}
 80048e6:	bf00      	nop
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	20000428 	.word	0x20000428
 80048f4:	20000324 	.word	0x20000324
 80048f8:	2000042c 	.word	0x2000042c
 80048fc:	20000410 	.word	0x20000410
 8004900:	200003e0 	.word	0x200003e0
 8004904:	200003dc 	.word	0x200003dc
 8004908:	20000444 	.word	0x20000444

0800490c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	3b04      	subs	r3, #4
 800491c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004924:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	3b04      	subs	r3, #4
 800492a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	f023 0201 	bic.w	r2, r3, #1
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	3b04      	subs	r3, #4
 800493a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800493c:	4a0c      	ldr	r2, [pc, #48]	@ (8004970 <pxPortInitialiseStack+0x64>)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	3b14      	subs	r3, #20
 8004946:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	3b04      	subs	r3, #4
 8004952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f06f 0202 	mvn.w	r2, #2
 800495a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	3b20      	subs	r3, #32
 8004960:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004962:	68fb      	ldr	r3, [r7, #12]
}
 8004964:	4618      	mov	r0, r3
 8004966:	3714      	adds	r7, #20
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr
 8004970:	08004975 	.word	0x08004975

08004974 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800497a:	2300      	movs	r3, #0
 800497c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800497e:	4b13      	ldr	r3, [pc, #76]	@ (80049cc <prvTaskExitError+0x58>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004986:	d00b      	beq.n	80049a0 <prvTaskExitError+0x2c>
	__asm volatile
 8004988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800498c:	f383 8811 	msr	BASEPRI, r3
 8004990:	f3bf 8f6f 	isb	sy
 8004994:	f3bf 8f4f 	dsb	sy
 8004998:	60fb      	str	r3, [r7, #12]
}
 800499a:	bf00      	nop
 800499c:	bf00      	nop
 800499e:	e7fd      	b.n	800499c <prvTaskExitError+0x28>
	__asm volatile
 80049a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049a4:	f383 8811 	msr	BASEPRI, r3
 80049a8:	f3bf 8f6f 	isb	sy
 80049ac:	f3bf 8f4f 	dsb	sy
 80049b0:	60bb      	str	r3, [r7, #8]
}
 80049b2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80049b4:	bf00      	nop
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d0fc      	beq.n	80049b6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80049bc:	bf00      	nop
 80049be:	bf00      	nop
 80049c0:	3714      	adds	r7, #20
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	2000000c 	.word	0x2000000c

080049d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80049d0:	4b07      	ldr	r3, [pc, #28]	@ (80049f0 <pxCurrentTCBConst2>)
 80049d2:	6819      	ldr	r1, [r3, #0]
 80049d4:	6808      	ldr	r0, [r1, #0]
 80049d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049da:	f380 8809 	msr	PSP, r0
 80049de:	f3bf 8f6f 	isb	sy
 80049e2:	f04f 0000 	mov.w	r0, #0
 80049e6:	f380 8811 	msr	BASEPRI, r0
 80049ea:	4770      	bx	lr
 80049ec:	f3af 8000 	nop.w

080049f0 <pxCurrentTCBConst2>:
 80049f0:	20000324 	.word	0x20000324
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80049f4:	bf00      	nop
 80049f6:	bf00      	nop

080049f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80049f8:	4808      	ldr	r0, [pc, #32]	@ (8004a1c <prvPortStartFirstTask+0x24>)
 80049fa:	6800      	ldr	r0, [r0, #0]
 80049fc:	6800      	ldr	r0, [r0, #0]
 80049fe:	f380 8808 	msr	MSP, r0
 8004a02:	f04f 0000 	mov.w	r0, #0
 8004a06:	f380 8814 	msr	CONTROL, r0
 8004a0a:	b662      	cpsie	i
 8004a0c:	b661      	cpsie	f
 8004a0e:	f3bf 8f4f 	dsb	sy
 8004a12:	f3bf 8f6f 	isb	sy
 8004a16:	df00      	svc	0
 8004a18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004a1a:	bf00      	nop
 8004a1c:	e000ed08 	.word	0xe000ed08

08004a20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004a26:	4b47      	ldr	r3, [pc, #284]	@ (8004b44 <xPortStartScheduler+0x124>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a47      	ldr	r2, [pc, #284]	@ (8004b48 <xPortStartScheduler+0x128>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d10b      	bne.n	8004a48 <xPortStartScheduler+0x28>
	__asm volatile
 8004a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a34:	f383 8811 	msr	BASEPRI, r3
 8004a38:	f3bf 8f6f 	isb	sy
 8004a3c:	f3bf 8f4f 	dsb	sy
 8004a40:	60fb      	str	r3, [r7, #12]
}
 8004a42:	bf00      	nop
 8004a44:	bf00      	nop
 8004a46:	e7fd      	b.n	8004a44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004a48:	4b3e      	ldr	r3, [pc, #248]	@ (8004b44 <xPortStartScheduler+0x124>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a3f      	ldr	r2, [pc, #252]	@ (8004b4c <xPortStartScheduler+0x12c>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d10b      	bne.n	8004a6a <xPortStartScheduler+0x4a>
	__asm volatile
 8004a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a56:	f383 8811 	msr	BASEPRI, r3
 8004a5a:	f3bf 8f6f 	isb	sy
 8004a5e:	f3bf 8f4f 	dsb	sy
 8004a62:	613b      	str	r3, [r7, #16]
}
 8004a64:	bf00      	nop
 8004a66:	bf00      	nop
 8004a68:	e7fd      	b.n	8004a66 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004a6a:	4b39      	ldr	r3, [pc, #228]	@ (8004b50 <xPortStartScheduler+0x130>)
 8004a6c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	22ff      	movs	r2, #255	@ 0xff
 8004a7a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004a84:	78fb      	ldrb	r3, [r7, #3]
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004a8c:	b2da      	uxtb	r2, r3
 8004a8e:	4b31      	ldr	r3, [pc, #196]	@ (8004b54 <xPortStartScheduler+0x134>)
 8004a90:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004a92:	4b31      	ldr	r3, [pc, #196]	@ (8004b58 <xPortStartScheduler+0x138>)
 8004a94:	2207      	movs	r2, #7
 8004a96:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a98:	e009      	b.n	8004aae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004a9a:	4b2f      	ldr	r3, [pc, #188]	@ (8004b58 <xPortStartScheduler+0x138>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	4a2d      	ldr	r2, [pc, #180]	@ (8004b58 <xPortStartScheduler+0x138>)
 8004aa2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004aa4:	78fb      	ldrb	r3, [r7, #3]
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	005b      	lsls	r3, r3, #1
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004aae:	78fb      	ldrb	r3, [r7, #3]
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ab6:	2b80      	cmp	r3, #128	@ 0x80
 8004ab8:	d0ef      	beq.n	8004a9a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004aba:	4b27      	ldr	r3, [pc, #156]	@ (8004b58 <xPortStartScheduler+0x138>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f1c3 0307 	rsb	r3, r3, #7
 8004ac2:	2b04      	cmp	r3, #4
 8004ac4:	d00b      	beq.n	8004ade <xPortStartScheduler+0xbe>
	__asm volatile
 8004ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aca:	f383 8811 	msr	BASEPRI, r3
 8004ace:	f3bf 8f6f 	isb	sy
 8004ad2:	f3bf 8f4f 	dsb	sy
 8004ad6:	60bb      	str	r3, [r7, #8]
}
 8004ad8:	bf00      	nop
 8004ada:	bf00      	nop
 8004adc:	e7fd      	b.n	8004ada <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004ade:	4b1e      	ldr	r3, [pc, #120]	@ (8004b58 <xPortStartScheduler+0x138>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	021b      	lsls	r3, r3, #8
 8004ae4:	4a1c      	ldr	r2, [pc, #112]	@ (8004b58 <xPortStartScheduler+0x138>)
 8004ae6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8004b58 <xPortStartScheduler+0x138>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004af0:	4a19      	ldr	r2, [pc, #100]	@ (8004b58 <xPortStartScheduler+0x138>)
 8004af2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	b2da      	uxtb	r2, r3
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004afc:	4b17      	ldr	r3, [pc, #92]	@ (8004b5c <xPortStartScheduler+0x13c>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a16      	ldr	r2, [pc, #88]	@ (8004b5c <xPortStartScheduler+0x13c>)
 8004b02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004b06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004b08:	4b14      	ldr	r3, [pc, #80]	@ (8004b5c <xPortStartScheduler+0x13c>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a13      	ldr	r2, [pc, #76]	@ (8004b5c <xPortStartScheduler+0x13c>)
 8004b0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004b12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004b14:	f000 f8da 	bl	8004ccc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004b18:	4b11      	ldr	r3, [pc, #68]	@ (8004b60 <xPortStartScheduler+0x140>)
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004b1e:	f000 f8f9 	bl	8004d14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004b22:	4b10      	ldr	r3, [pc, #64]	@ (8004b64 <xPortStartScheduler+0x144>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a0f      	ldr	r2, [pc, #60]	@ (8004b64 <xPortStartScheduler+0x144>)
 8004b28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004b2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004b2e:	f7ff ff63 	bl	80049f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004b32:	f7ff fa83 	bl	800403c <vTaskSwitchContext>
	prvTaskExitError();
 8004b36:	f7ff ff1d 	bl	8004974 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3718      	adds	r7, #24
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	e000ed00 	.word	0xe000ed00
 8004b48:	410fc271 	.word	0x410fc271
 8004b4c:	410fc270 	.word	0x410fc270
 8004b50:	e000e400 	.word	0xe000e400
 8004b54:	20000450 	.word	0x20000450
 8004b58:	20000454 	.word	0x20000454
 8004b5c:	e000ed20 	.word	0xe000ed20
 8004b60:	2000000c 	.word	0x2000000c
 8004b64:	e000ef34 	.word	0xe000ef34

08004b68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
	__asm volatile
 8004b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b72:	f383 8811 	msr	BASEPRI, r3
 8004b76:	f3bf 8f6f 	isb	sy
 8004b7a:	f3bf 8f4f 	dsb	sy
 8004b7e:	607b      	str	r3, [r7, #4]
}
 8004b80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004b82:	4b10      	ldr	r3, [pc, #64]	@ (8004bc4 <vPortEnterCritical+0x5c>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	3301      	adds	r3, #1
 8004b88:	4a0e      	ldr	r2, [pc, #56]	@ (8004bc4 <vPortEnterCritical+0x5c>)
 8004b8a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004b8c:	4b0d      	ldr	r3, [pc, #52]	@ (8004bc4 <vPortEnterCritical+0x5c>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d110      	bne.n	8004bb6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004b94:	4b0c      	ldr	r3, [pc, #48]	@ (8004bc8 <vPortEnterCritical+0x60>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00b      	beq.n	8004bb6 <vPortEnterCritical+0x4e>
	__asm volatile
 8004b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba2:	f383 8811 	msr	BASEPRI, r3
 8004ba6:	f3bf 8f6f 	isb	sy
 8004baa:	f3bf 8f4f 	dsb	sy
 8004bae:	603b      	str	r3, [r7, #0]
}
 8004bb0:	bf00      	nop
 8004bb2:	bf00      	nop
 8004bb4:	e7fd      	b.n	8004bb2 <vPortEnterCritical+0x4a>
	}
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	2000000c 	.word	0x2000000c
 8004bc8:	e000ed04 	.word	0xe000ed04

08004bcc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004bd2:	4b12      	ldr	r3, [pc, #72]	@ (8004c1c <vPortExitCritical+0x50>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10b      	bne.n	8004bf2 <vPortExitCritical+0x26>
	__asm volatile
 8004bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bde:	f383 8811 	msr	BASEPRI, r3
 8004be2:	f3bf 8f6f 	isb	sy
 8004be6:	f3bf 8f4f 	dsb	sy
 8004bea:	607b      	str	r3, [r7, #4]
}
 8004bec:	bf00      	nop
 8004bee:	bf00      	nop
 8004bf0:	e7fd      	b.n	8004bee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8004c1c <vPortExitCritical+0x50>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	4a08      	ldr	r2, [pc, #32]	@ (8004c1c <vPortExitCritical+0x50>)
 8004bfa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004bfc:	4b07      	ldr	r3, [pc, #28]	@ (8004c1c <vPortExitCritical+0x50>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d105      	bne.n	8004c10 <vPortExitCritical+0x44>
 8004c04:	2300      	movs	r3, #0
 8004c06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	f383 8811 	msr	BASEPRI, r3
}
 8004c0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr
 8004c1c:	2000000c 	.word	0x2000000c

08004c20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004c20:	f3ef 8009 	mrs	r0, PSP
 8004c24:	f3bf 8f6f 	isb	sy
 8004c28:	4b15      	ldr	r3, [pc, #84]	@ (8004c80 <pxCurrentTCBConst>)
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	f01e 0f10 	tst.w	lr, #16
 8004c30:	bf08      	it	eq
 8004c32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004c36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c3a:	6010      	str	r0, [r2, #0]
 8004c3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004c40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004c44:	f380 8811 	msr	BASEPRI, r0
 8004c48:	f3bf 8f4f 	dsb	sy
 8004c4c:	f3bf 8f6f 	isb	sy
 8004c50:	f7ff f9f4 	bl	800403c <vTaskSwitchContext>
 8004c54:	f04f 0000 	mov.w	r0, #0
 8004c58:	f380 8811 	msr	BASEPRI, r0
 8004c5c:	bc09      	pop	{r0, r3}
 8004c5e:	6819      	ldr	r1, [r3, #0]
 8004c60:	6808      	ldr	r0, [r1, #0]
 8004c62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c66:	f01e 0f10 	tst.w	lr, #16
 8004c6a:	bf08      	it	eq
 8004c6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004c70:	f380 8809 	msr	PSP, r0
 8004c74:	f3bf 8f6f 	isb	sy
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	f3af 8000 	nop.w

08004c80 <pxCurrentTCBConst>:
 8004c80:	20000324 	.word	0x20000324
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004c84:	bf00      	nop
 8004c86:	bf00      	nop

08004c88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
	__asm volatile
 8004c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c92:	f383 8811 	msr	BASEPRI, r3
 8004c96:	f3bf 8f6f 	isb	sy
 8004c9a:	f3bf 8f4f 	dsb	sy
 8004c9e:	607b      	str	r3, [r7, #4]
}
 8004ca0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ca2:	f7ff f911 	bl	8003ec8 <xTaskIncrementTick>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d003      	beq.n	8004cb4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004cac:	4b06      	ldr	r3, [pc, #24]	@ (8004cc8 <SysTick_Handler+0x40>)
 8004cae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cb2:	601a      	str	r2, [r3, #0]
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	f383 8811 	msr	BASEPRI, r3
}
 8004cbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004cc0:	bf00      	nop
 8004cc2:	3708      	adds	r7, #8
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	e000ed04 	.word	0xe000ed04

08004ccc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004ccc:	b480      	push	{r7}
 8004cce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8004d00 <vPortSetupTimerInterrupt+0x34>)
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8004d04 <vPortSetupTimerInterrupt+0x38>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8004d08 <vPortSetupTimerInterrupt+0x3c>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a0a      	ldr	r2, [pc, #40]	@ (8004d0c <vPortSetupTimerInterrupt+0x40>)
 8004ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce6:	099b      	lsrs	r3, r3, #6
 8004ce8:	4a09      	ldr	r2, [pc, #36]	@ (8004d10 <vPortSetupTimerInterrupt+0x44>)
 8004cea:	3b01      	subs	r3, #1
 8004cec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004cee:	4b04      	ldr	r3, [pc, #16]	@ (8004d00 <vPortSetupTimerInterrupt+0x34>)
 8004cf0:	2207      	movs	r2, #7
 8004cf2:	601a      	str	r2, [r3, #0]
}
 8004cf4:	bf00      	nop
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	e000e010 	.word	0xe000e010
 8004d04:	e000e018 	.word	0xe000e018
 8004d08:	20000000 	.word	0x20000000
 8004d0c:	10624dd3 	.word	0x10624dd3
 8004d10:	e000e014 	.word	0xe000e014

08004d14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004d14:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004d24 <vPortEnableVFP+0x10>
 8004d18:	6801      	ldr	r1, [r0, #0]
 8004d1a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004d1e:	6001      	str	r1, [r0, #0]
 8004d20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004d22:	bf00      	nop
 8004d24:	e000ed88 	.word	0xe000ed88

08004d28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004d2e:	f3ef 8305 	mrs	r3, IPSR
 8004d32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2b0f      	cmp	r3, #15
 8004d38:	d915      	bls.n	8004d66 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004d3a:	4a18      	ldr	r2, [pc, #96]	@ (8004d9c <vPortValidateInterruptPriority+0x74>)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	4413      	add	r3, r2
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004d44:	4b16      	ldr	r3, [pc, #88]	@ (8004da0 <vPortValidateInterruptPriority+0x78>)
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	7afa      	ldrb	r2, [r7, #11]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d20b      	bcs.n	8004d66 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d52:	f383 8811 	msr	BASEPRI, r3
 8004d56:	f3bf 8f6f 	isb	sy
 8004d5a:	f3bf 8f4f 	dsb	sy
 8004d5e:	607b      	str	r3, [r7, #4]
}
 8004d60:	bf00      	nop
 8004d62:	bf00      	nop
 8004d64:	e7fd      	b.n	8004d62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004d66:	4b0f      	ldr	r3, [pc, #60]	@ (8004da4 <vPortValidateInterruptPriority+0x7c>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8004da8 <vPortValidateInterruptPriority+0x80>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d90b      	bls.n	8004d8e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d7a:	f383 8811 	msr	BASEPRI, r3
 8004d7e:	f3bf 8f6f 	isb	sy
 8004d82:	f3bf 8f4f 	dsb	sy
 8004d86:	603b      	str	r3, [r7, #0]
}
 8004d88:	bf00      	nop
 8004d8a:	bf00      	nop
 8004d8c:	e7fd      	b.n	8004d8a <vPortValidateInterruptPriority+0x62>
	}
 8004d8e:	bf00      	nop
 8004d90:	3714      	adds	r7, #20
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	e000e3f0 	.word	0xe000e3f0
 8004da0:	20000450 	.word	0x20000450
 8004da4:	e000ed0c 	.word	0xe000ed0c
 8004da8:	20000454 	.word	0x20000454

08004dac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b08a      	sub	sp, #40	@ 0x28
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004db4:	2300      	movs	r3, #0
 8004db6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004db8:	f7fe ffda 	bl	8003d70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004dbc:	4b5c      	ldr	r3, [pc, #368]	@ (8004f30 <pvPortMalloc+0x184>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d101      	bne.n	8004dc8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004dc4:	f000 f924 	bl	8005010 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004dc8:	4b5a      	ldr	r3, [pc, #360]	@ (8004f34 <pvPortMalloc+0x188>)
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4013      	ands	r3, r2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f040 8095 	bne.w	8004f00 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d01e      	beq.n	8004e1a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004ddc:	2208      	movs	r2, #8
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4413      	add	r3, r2
 8004de2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f003 0307 	and.w	r3, r3, #7
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d015      	beq.n	8004e1a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f023 0307 	bic.w	r3, r3, #7
 8004df4:	3308      	adds	r3, #8
 8004df6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f003 0307 	and.w	r3, r3, #7
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00b      	beq.n	8004e1a <pvPortMalloc+0x6e>
	__asm volatile
 8004e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e06:	f383 8811 	msr	BASEPRI, r3
 8004e0a:	f3bf 8f6f 	isb	sy
 8004e0e:	f3bf 8f4f 	dsb	sy
 8004e12:	617b      	str	r3, [r7, #20]
}
 8004e14:	bf00      	nop
 8004e16:	bf00      	nop
 8004e18:	e7fd      	b.n	8004e16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d06f      	beq.n	8004f00 <pvPortMalloc+0x154>
 8004e20:	4b45      	ldr	r3, [pc, #276]	@ (8004f38 <pvPortMalloc+0x18c>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d86a      	bhi.n	8004f00 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004e2a:	4b44      	ldr	r3, [pc, #272]	@ (8004f3c <pvPortMalloc+0x190>)
 8004e2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004e2e:	4b43      	ldr	r3, [pc, #268]	@ (8004f3c <pvPortMalloc+0x190>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e34:	e004      	b.n	8004e40 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d903      	bls.n	8004e52 <pvPortMalloc+0xa6>
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1f1      	bne.n	8004e36 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004e52:	4b37      	ldr	r3, [pc, #220]	@ (8004f30 <pvPortMalloc+0x184>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d051      	beq.n	8004f00 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004e5c:	6a3b      	ldr	r3, [r7, #32]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2208      	movs	r2, #8
 8004e62:	4413      	add	r3, r2
 8004e64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	6a3b      	ldr	r3, [r7, #32]
 8004e6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e70:	685a      	ldr	r2, [r3, #4]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	1ad2      	subs	r2, r2, r3
 8004e76:	2308      	movs	r3, #8
 8004e78:	005b      	lsls	r3, r3, #1
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d920      	bls.n	8004ec0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004e7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4413      	add	r3, r2
 8004e84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	f003 0307 	and.w	r3, r3, #7
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00b      	beq.n	8004ea8 <pvPortMalloc+0xfc>
	__asm volatile
 8004e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e94:	f383 8811 	msr	BASEPRI, r3
 8004e98:	f3bf 8f6f 	isb	sy
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	613b      	str	r3, [r7, #16]
}
 8004ea2:	bf00      	nop
 8004ea4:	bf00      	nop
 8004ea6:	e7fd      	b.n	8004ea4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eaa:	685a      	ldr	r2, [r3, #4]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	1ad2      	subs	r2, r2, r3
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004eba:	69b8      	ldr	r0, [r7, #24]
 8004ebc:	f000 f90a 	bl	80050d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004ec0:	4b1d      	ldr	r3, [pc, #116]	@ (8004f38 <pvPortMalloc+0x18c>)
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	4a1b      	ldr	r2, [pc, #108]	@ (8004f38 <pvPortMalloc+0x18c>)
 8004ecc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004ece:	4b1a      	ldr	r3, [pc, #104]	@ (8004f38 <pvPortMalloc+0x18c>)
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	4b1b      	ldr	r3, [pc, #108]	@ (8004f40 <pvPortMalloc+0x194>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d203      	bcs.n	8004ee2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004eda:	4b17      	ldr	r3, [pc, #92]	@ (8004f38 <pvPortMalloc+0x18c>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a18      	ldr	r2, [pc, #96]	@ (8004f40 <pvPortMalloc+0x194>)
 8004ee0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee4:	685a      	ldr	r2, [r3, #4]
 8004ee6:	4b13      	ldr	r3, [pc, #76]	@ (8004f34 <pvPortMalloc+0x188>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	431a      	orrs	r2, r3
 8004eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004ef6:	4b13      	ldr	r3, [pc, #76]	@ (8004f44 <pvPortMalloc+0x198>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	3301      	adds	r3, #1
 8004efc:	4a11      	ldr	r2, [pc, #68]	@ (8004f44 <pvPortMalloc+0x198>)
 8004efe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004f00:	f7fe ff44 	bl	8003d8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	f003 0307 	and.w	r3, r3, #7
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00b      	beq.n	8004f26 <pvPortMalloc+0x17a>
	__asm volatile
 8004f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f12:	f383 8811 	msr	BASEPRI, r3
 8004f16:	f3bf 8f6f 	isb	sy
 8004f1a:	f3bf 8f4f 	dsb	sy
 8004f1e:	60fb      	str	r3, [r7, #12]
}
 8004f20:	bf00      	nop
 8004f22:	bf00      	nop
 8004f24:	e7fd      	b.n	8004f22 <pvPortMalloc+0x176>
	return pvReturn;
 8004f26:	69fb      	ldr	r3, [r7, #28]
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3728      	adds	r7, #40	@ 0x28
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	20004060 	.word	0x20004060
 8004f34:	20004074 	.word	0x20004074
 8004f38:	20004064 	.word	0x20004064
 8004f3c:	20004058 	.word	0x20004058
 8004f40:	20004068 	.word	0x20004068
 8004f44:	2000406c 	.word	0x2000406c

08004f48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b086      	sub	sp, #24
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d04f      	beq.n	8004ffa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004f5a:	2308      	movs	r3, #8
 8004f5c:	425b      	negs	r3, r3
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	4413      	add	r3, r2
 8004f62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	685a      	ldr	r2, [r3, #4]
 8004f6c:	4b25      	ldr	r3, [pc, #148]	@ (8005004 <vPortFree+0xbc>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4013      	ands	r3, r2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d10b      	bne.n	8004f8e <vPortFree+0x46>
	__asm volatile
 8004f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f7a:	f383 8811 	msr	BASEPRI, r3
 8004f7e:	f3bf 8f6f 	isb	sy
 8004f82:	f3bf 8f4f 	dsb	sy
 8004f86:	60fb      	str	r3, [r7, #12]
}
 8004f88:	bf00      	nop
 8004f8a:	bf00      	nop
 8004f8c:	e7fd      	b.n	8004f8a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00b      	beq.n	8004fae <vPortFree+0x66>
	__asm volatile
 8004f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f9a:	f383 8811 	msr	BASEPRI, r3
 8004f9e:	f3bf 8f6f 	isb	sy
 8004fa2:	f3bf 8f4f 	dsb	sy
 8004fa6:	60bb      	str	r3, [r7, #8]
}
 8004fa8:	bf00      	nop
 8004faa:	bf00      	nop
 8004fac:	e7fd      	b.n	8004faa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	4b14      	ldr	r3, [pc, #80]	@ (8005004 <vPortFree+0xbc>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d01e      	beq.n	8004ffa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d11a      	bne.n	8004ffa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	685a      	ldr	r2, [r3, #4]
 8004fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8005004 <vPortFree+0xbc>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	43db      	mvns	r3, r3
 8004fce:	401a      	ands	r2, r3
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004fd4:	f7fe fecc 	bl	8003d70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	685a      	ldr	r2, [r3, #4]
 8004fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8005008 <vPortFree+0xc0>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	4a09      	ldr	r2, [pc, #36]	@ (8005008 <vPortFree+0xc0>)
 8004fe4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004fe6:	6938      	ldr	r0, [r7, #16]
 8004fe8:	f000 f874 	bl	80050d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004fec:	4b07      	ldr	r3, [pc, #28]	@ (800500c <vPortFree+0xc4>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	4a06      	ldr	r2, [pc, #24]	@ (800500c <vPortFree+0xc4>)
 8004ff4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004ff6:	f7fe fec9 	bl	8003d8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004ffa:	bf00      	nop
 8004ffc:	3718      	adds	r7, #24
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	20004074 	.word	0x20004074
 8005008:	20004064 	.word	0x20004064
 800500c:	20004070 	.word	0x20004070

08005010 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005010:	b480      	push	{r7}
 8005012:	b085      	sub	sp, #20
 8005014:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005016:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800501a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800501c:	4b27      	ldr	r3, [pc, #156]	@ (80050bc <prvHeapInit+0xac>)
 800501e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f003 0307 	and.w	r3, r3, #7
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00c      	beq.n	8005044 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	3307      	adds	r3, #7
 800502e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f023 0307 	bic.w	r3, r3, #7
 8005036:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005038:	68ba      	ldr	r2, [r7, #8]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	4a1f      	ldr	r2, [pc, #124]	@ (80050bc <prvHeapInit+0xac>)
 8005040:	4413      	add	r3, r2
 8005042:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005048:	4a1d      	ldr	r2, [pc, #116]	@ (80050c0 <prvHeapInit+0xb0>)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800504e:	4b1c      	ldr	r3, [pc, #112]	@ (80050c0 <prvHeapInit+0xb0>)
 8005050:	2200      	movs	r2, #0
 8005052:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	68ba      	ldr	r2, [r7, #8]
 8005058:	4413      	add	r3, r2
 800505a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800505c:	2208      	movs	r2, #8
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	1a9b      	subs	r3, r3, r2
 8005062:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f023 0307 	bic.w	r3, r3, #7
 800506a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	4a15      	ldr	r2, [pc, #84]	@ (80050c4 <prvHeapInit+0xb4>)
 8005070:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005072:	4b14      	ldr	r3, [pc, #80]	@ (80050c4 <prvHeapInit+0xb4>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2200      	movs	r2, #0
 8005078:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800507a:	4b12      	ldr	r3, [pc, #72]	@ (80050c4 <prvHeapInit+0xb4>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2200      	movs	r2, #0
 8005080:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	1ad2      	subs	r2, r2, r3
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005090:	4b0c      	ldr	r3, [pc, #48]	@ (80050c4 <prvHeapInit+0xb4>)
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	4a0a      	ldr	r2, [pc, #40]	@ (80050c8 <prvHeapInit+0xb8>)
 800509e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	4a09      	ldr	r2, [pc, #36]	@ (80050cc <prvHeapInit+0xbc>)
 80050a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80050a8:	4b09      	ldr	r3, [pc, #36]	@ (80050d0 <prvHeapInit+0xc0>)
 80050aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80050ae:	601a      	str	r2, [r3, #0]
}
 80050b0:	bf00      	nop
 80050b2:	3714      	adds	r7, #20
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr
 80050bc:	20000458 	.word	0x20000458
 80050c0:	20004058 	.word	0x20004058
 80050c4:	20004060 	.word	0x20004060
 80050c8:	20004068 	.word	0x20004068
 80050cc:	20004064 	.word	0x20004064
 80050d0:	20004074 	.word	0x20004074

080050d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80050dc:	4b28      	ldr	r3, [pc, #160]	@ (8005180 <prvInsertBlockIntoFreeList+0xac>)
 80050de:	60fb      	str	r3, [r7, #12]
 80050e0:	e002      	b.n	80050e8 <prvInsertBlockIntoFreeList+0x14>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	60fb      	str	r3, [r7, #12]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d8f7      	bhi.n	80050e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	4413      	add	r3, r2
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	429a      	cmp	r2, r3
 8005102:	d108      	bne.n	8005116 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	685a      	ldr	r2, [r3, #4]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	441a      	add	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	68ba      	ldr	r2, [r7, #8]
 8005120:	441a      	add	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	429a      	cmp	r2, r3
 8005128:	d118      	bne.n	800515c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	4b15      	ldr	r3, [pc, #84]	@ (8005184 <prvInsertBlockIntoFreeList+0xb0>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	429a      	cmp	r2, r3
 8005134:	d00d      	beq.n	8005152 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685a      	ldr	r2, [r3, #4]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	441a      	add	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	601a      	str	r2, [r3, #0]
 8005150:	e008      	b.n	8005164 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005152:	4b0c      	ldr	r3, [pc, #48]	@ (8005184 <prvInsertBlockIntoFreeList+0xb0>)
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	601a      	str	r2, [r3, #0]
 800515a:	e003      	b.n	8005164 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	429a      	cmp	r2, r3
 800516a:	d002      	beq.n	8005172 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005172:	bf00      	nop
 8005174:	3714      	adds	r7, #20
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	20004058 	.word	0x20004058
 8005184:	20004060 	.word	0x20004060

08005188 <memset>:
 8005188:	4402      	add	r2, r0
 800518a:	4603      	mov	r3, r0
 800518c:	4293      	cmp	r3, r2
 800518e:	d100      	bne.n	8005192 <memset+0xa>
 8005190:	4770      	bx	lr
 8005192:	f803 1b01 	strb.w	r1, [r3], #1
 8005196:	e7f9      	b.n	800518c <memset+0x4>

08005198 <__libc_init_array>:
 8005198:	b570      	push	{r4, r5, r6, lr}
 800519a:	4d0d      	ldr	r5, [pc, #52]	@ (80051d0 <__libc_init_array+0x38>)
 800519c:	4c0d      	ldr	r4, [pc, #52]	@ (80051d4 <__libc_init_array+0x3c>)
 800519e:	1b64      	subs	r4, r4, r5
 80051a0:	10a4      	asrs	r4, r4, #2
 80051a2:	2600      	movs	r6, #0
 80051a4:	42a6      	cmp	r6, r4
 80051a6:	d109      	bne.n	80051bc <__libc_init_array+0x24>
 80051a8:	4d0b      	ldr	r5, [pc, #44]	@ (80051d8 <__libc_init_array+0x40>)
 80051aa:	4c0c      	ldr	r4, [pc, #48]	@ (80051dc <__libc_init_array+0x44>)
 80051ac:	f000 f826 	bl	80051fc <_init>
 80051b0:	1b64      	subs	r4, r4, r5
 80051b2:	10a4      	asrs	r4, r4, #2
 80051b4:	2600      	movs	r6, #0
 80051b6:	42a6      	cmp	r6, r4
 80051b8:	d105      	bne.n	80051c6 <__libc_init_array+0x2e>
 80051ba:	bd70      	pop	{r4, r5, r6, pc}
 80051bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80051c0:	4798      	blx	r3
 80051c2:	3601      	adds	r6, #1
 80051c4:	e7ee      	b.n	80051a4 <__libc_init_array+0xc>
 80051c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80051ca:	4798      	blx	r3
 80051cc:	3601      	adds	r6, #1
 80051ce:	e7f2      	b.n	80051b6 <__libc_init_array+0x1e>
 80051d0:	080053cc 	.word	0x080053cc
 80051d4:	080053cc 	.word	0x080053cc
 80051d8:	080053cc 	.word	0x080053cc
 80051dc:	080053d0 	.word	0x080053d0

080051e0 <memcpy>:
 80051e0:	440a      	add	r2, r1
 80051e2:	4291      	cmp	r1, r2
 80051e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80051e8:	d100      	bne.n	80051ec <memcpy+0xc>
 80051ea:	4770      	bx	lr
 80051ec:	b510      	push	{r4, lr}
 80051ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051f6:	4291      	cmp	r1, r2
 80051f8:	d1f9      	bne.n	80051ee <memcpy+0xe>
 80051fa:	bd10      	pop	{r4, pc}

080051fc <_init>:
 80051fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051fe:	bf00      	nop
 8005200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005202:	bc08      	pop	{r3}
 8005204:	469e      	mov	lr, r3
 8005206:	4770      	bx	lr

08005208 <_fini>:
 8005208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800520a:	bf00      	nop
 800520c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800520e:	bc08      	pop	{r3}
 8005210:	469e      	mov	lr, r3
 8005212:	4770      	bx	lr
